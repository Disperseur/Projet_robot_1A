
test_ledsIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac0  08004ac0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac8  08004ac8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08004adc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004adc  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed9c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e3c  00000000  00000000  0002ee1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a8  00000000  00000000  000318d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a4c  00000000  00000000  00032280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2f5  00000000  00000000  00058ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6f0d  00000000  00000000  00066fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003474  00000000  00000000  0015ded0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00161344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a60 	.word	0x08004a60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a60 	.word	0x08004a60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb28 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f82a 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f920 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f8ee 	bl	80006b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004d8:	f000 f876 	bl	80005c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Cmde_led_IR3_GPIO_Port, Cmde_led_IR3_Pin, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f002 fa3b 	bl	8002960 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_GPIO_WritePin(Cmde_led_IR3_GPIO_Port, Cmde_led_IR3_Pin, 0);
	  HAL_ADC_Start(&hadc1);
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <main+0x50>)
 80004ec:	f000 fefc 	bl	80012e8 <HAL_ADC_Start>
	  HAL_Delay(100);
 80004f0:	2064      	movs	r0, #100	; 0x64
 80004f2:	f000 fb8f 	bl	8000c14 <HAL_Delay>
	  blanc = HAL_ADC_GetValue(&hadc1);
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x50>)
 80004f8:	f000 ffb0 	bl	800145c <HAL_ADC_GetValue>
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <main+0x54>)
 8000502:	601a      	str	r2, [r3, #0]
	  //HAL_Delay(100);
	  //mesure = HAL_ADC_GetValue(&hadc1);



	  detection = blanc - mesure;
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <main+0x54>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <main+0x58>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	4a04      	ldr	r2, [pc, #16]	; (8000520 <main+0x5c>)
 8000510:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Start(&hadc1);
 8000512:	e7ea      	b.n	80004ea <main+0x26>
 8000514:	20000028 	.word	0x20000028
 8000518:	20000118 	.word	0x20000118
 800051c:	20000114 	.word	0x20000114
 8000520:	2000011c 	.word	0x2000011c

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b096      	sub	sp, #88	; 0x58
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2244      	movs	r2, #68	; 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fa67 	bl	8004a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000546:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054a:	f002 fa2f 	bl	80029ac <HAL_PWREx_ControlVoltageScaling>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000554:	f000 f95e 	bl	8000814 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000560:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056e:	2301      	movs	r3, #1
 8000570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000572:	230a      	movs	r3, #10
 8000574:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000576:	2307      	movs	r3, #7
 8000578:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fa66 	bl	8002a58 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000592:	f000 f93f 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fe2e 	bl	8003210 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ba:	f000 f92b 	bl	8000814 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3758      	adds	r7, #88	; 0x58
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <MX_ADC1_Init+0xe0>)
 80005ec:	4a2f      	ldr	r2, [pc, #188]	; (80006ac <MX_ADC1_Init+0xe4>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_ADC1_Init+0xe0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <MX_ADC1_Init+0xe0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_ADC1_Init+0xe0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <MX_ADC1_Init+0xe0>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <MX_ADC1_Init+0xe0>)
 800060a:	2204      	movs	r2, #4
 800060c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_ADC1_Init+0xe0>)
 8000616:	2200      	movs	r2, #0
 8000618:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800061a:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <MX_ADC1_Init+0xe0>)
 800061c:	2201      	movs	r2, #1
 800061e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_ADC1_Init+0xe0>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_ADC1_Init+0xe0>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_ADC1_Init+0xe0>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_ADC1_Init+0xe0>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_ADC1_Init+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_ADC1_Init+0xe0>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064a:	4817      	ldr	r0, [pc, #92]	; (80006a8 <MX_ADC1_Init+0xe0>)
 800064c:	f000 fcfc 	bl	8001048 <HAL_ADC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000656:	f000 f8dd 	bl	8000814 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4810      	ldr	r0, [pc, #64]	; (80006a8 <MX_ADC1_Init+0xe0>)
 8000666:	f001 fe0f 	bl	8002288 <HAL_ADCEx_MultiModeConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000670:	f000 f8d0 	bl	8000814 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_ADC1_Init+0xe8>)
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000678:	2306      	movs	r3, #6
 800067a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800067c:	2307      	movs	r3, #7
 800067e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000680:	237f      	movs	r3, #127	; 0x7f
 8000682:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000684:	2304      	movs	r3, #4
 8000686:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_ADC1_Init+0xe0>)
 8000692:	f001 f929 	bl	80018e8 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800069c:	f000 f8ba 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000028 	.word	0x20000028
 80006ac:	50040000 	.word	0x50040000
 80006b0:	43210000 	.word	0x43210000

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MX_USART2_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f8:	f003 fc6a 	bl	8003fd0 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f887 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000008c 	.word	0x2000008c
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b37      	ldr	r3, [pc, #220]	; (8000808 <MX_GPIO_Init+0xf4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a36      	ldr	r2, [pc, #216]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a30      	ldr	r2, [pc, #192]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_GPIO_Init+0xf4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a24      	ldr	r2, [pc, #144]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Cmde_led_IR3_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f002 f8e4 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cmde_led_IR1_GPIO_Port, Cmde_led_IR1_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079e:	481b      	ldr	r0, [pc, #108]	; (800080c <MX_GPIO_Init+0xf8>)
 80007a0:	f002 f8de 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4815      	ldr	r0, [pc, #84]	; (8000810 <MX_GPIO_Init+0xfc>)
 80007bc:	f001 ff26 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Cmde_led_IR3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Cmde_led_IR3_Pin;
 80007c0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f001 ff16 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cmde_led_IR1_Pin */
  GPIO_InitStruct.Pin = Cmde_led_IR1_Pin;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Cmde_led_IR1_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0xf8>)
 80007fa:	f001 ff07 	bl	800260c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400
 8000810:	48000800 	.word	0x48000800

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6613      	str	r3, [r2, #96]	; 0x60
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0ac      	sub	sp, #176	; 0xb0
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2288      	movs	r2, #136	; 0x88
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f004 f8bc 	bl	8004a06 <memset>
  if(hadc->Instance==ADC1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a38      	ldr	r2, [pc, #224]	; (8000974 <HAL_ADC_MspInit+0x10c>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d169      	bne.n	800096c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800089c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800089e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008ae:	2308      	movs	r3, #8
 80008b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008b2:	2307      	movs	r3, #7
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fec5 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80008d4:	f7ff ff9e 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_ADC_MspInit+0x110>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	4a26      	ldr	r2, [pc, #152]	; (8000978 <HAL_ADC_MspInit+0x110>)
 80008de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <HAL_ADC_MspInit+0x110>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_ADC_MspInit+0x110>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <HAL_ADC_MspInit+0x110>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_ADC_MspInit+0x110>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_ADC_MspInit+0x110>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	4a1a      	ldr	r2, [pc, #104]	; (8000978 <HAL_ADC_MspInit+0x110>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_ADC_MspInit+0x110>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000920:	2304      	movs	r3, #4
 8000922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000926:	230b      	movs	r3, #11
 8000928:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000936:	4619      	mov	r1, r3
 8000938:	4810      	ldr	r0, [pc, #64]	; (800097c <HAL_ADC_MspInit+0x114>)
 800093a:	f001 fe67 	bl	800260c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800093e:	2302      	movs	r3, #2
 8000940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000944:	230b      	movs	r3, #11
 8000946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000954:	4619      	mov	r1, r3
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <HAL_ADC_MspInit+0x118>)
 8000958:	f001 fe58 	bl	800260c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2012      	movs	r0, #18
 8000962:	f001 fe1c 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000966:	2012      	movs	r0, #18
 8000968:	f001 fe35 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	37b0      	adds	r7, #176	; 0xb0
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	50040000 	.word	0x50040000
 8000978:	40021000 	.word	0x40021000
 800097c:	48000800 	.word	0x48000800
 8000980:	48000400 	.word	0x48000400

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0ac      	sub	sp, #176	; 0xb0
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2288      	movs	r2, #136	; 0x88
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 f82e 	bl	8004a06 <memset>
  if(huart->Instance==USART2)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <HAL_UART_MspInit+0xb0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d13b      	bne.n	8000a2c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fe49 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009cc:	f7ff ff22 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	6593      	str	r3, [r2, #88]	; 0x58
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a00:	230c      	movs	r3, #12
 8000a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 fdf0 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	37b0      	adds	r7, #176	; 0xb0
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8a4 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <ADC1_2_IRQHandler+0x10>)
 8000a96:	f000 fcef 	bl	8001478 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000028 	.word	0x20000028

08000aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f003 ff8f 	bl	8004a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afa:	f7ff fce3 	bl	80004c4 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b0c:	08004ad0 	.word	0x08004ad0
  ldr r2, =_sbss
 8000b10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b14:	20000124 	.word	0x20000124

08000b18 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC3_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_Init+0x3c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_Init+0x3c>)
 8000b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b32:	2003      	movs	r0, #3
 8000b34:	f001 fd28 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 f80f 	bl	8000b5c <HAL_InitTick>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	e001      	b.n	8000b4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b4a:	f7ff fe69 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_InitTick+0x6c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d023      	beq.n	8000bb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_InitTick+0x70>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_InitTick+0x6c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fd33 	bl	80025f2 <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10f      	bne.n	8000bb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d809      	bhi.n	8000bac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f001 fcfd 	bl	800259e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_InitTick+0x74>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e007      	b.n	8000bbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e004      	b.n	8000bbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e001      	b.n	8000bbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000120 	.word	0x20000120

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000120 	.word	0x20000120

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	431a      	orrs	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	609a      	str	r2, [r3, #8]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	431a      	orrs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3360      	adds	r3, #96	; 0x60
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <LL_ADC_SetOffset+0x44>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cfc:	bf00      	nop
 8000cfe:	371c      	adds	r7, #28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	03fff000 	.word	0x03fff000

08000d0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3360      	adds	r3, #96	; 0x60
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3360      	adds	r3, #96	; 0x60
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d62:	bf00      	nop
 8000d64:	371c      	adds	r7, #28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3330      	adds	r3, #48	; 0x30
 8000da4:	461a      	mov	r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	4413      	add	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	f003 031f 	and.w	r3, r3, #31
 8000dbe:	211f      	movs	r1, #31
 8000dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0e9b      	lsrs	r3, r3, #26
 8000dcc:	f003 011f 	and.w	r1, r3, #31
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f003 031f 	and.w	r3, r3, #31
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000de0:	bf00      	nop
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b087      	sub	sp, #28
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3314      	adds	r3, #20
 8000e22:	461a      	mov	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	0e5b      	lsrs	r3, r3, #25
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	4413      	add	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	0d1b      	lsrs	r3, r3, #20
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	2107      	movs	r1, #7
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	401a      	ands	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	0d1b      	lsrs	r3, r3, #20
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	431a      	orrs	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e5c:	bf00      	nop
 8000e5e:	371c      	adds	r7, #28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e80:	43db      	mvns	r3, r3
 8000e82:	401a      	ands	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0318 	and.w	r3, r3, #24
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e8c:	40d9      	lsrs	r1, r3
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	400b      	ands	r3, r1
 8000e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e96:	431a      	orrs	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	0007ffff 	.word	0x0007ffff

08000eb0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f003 031f 	and.w	r3, r3, #31
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6093      	str	r3, [r2, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f20:	d101      	bne.n	8000f26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f70:	d101      	bne.n	8000f76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <LL_ADC_IsEnabled+0x18>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <LL_ADC_IsEnabled+0x1a>
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fe2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe6:	f043 0204 	orr.w	r2, r3, #4
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b04      	cmp	r3, #4
 800100c:	d101      	bne.n	8001012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b08      	cmp	r3, #8
 8001032:	d101      	bne.n	8001038 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e130      	b.n	80012c4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff fbf9 	bl	8000868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff3f 	bl	8000f0c <LL_ADC_IsDeepPowerDownEnabled>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff25 	bl	8000ee8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff5a 	bl	8000f5c <LL_ADC_IsInternalRegulatorEnabled>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d115      	bne.n	80010da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff3e 	bl	8000f34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010b8:	4b84      	ldr	r3, [pc, #528]	; (80012cc <HAL_ADC_Init+0x284>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	099b      	lsrs	r3, r3, #6
 80010be:	4a84      	ldr	r2, [pc, #528]	; (80012d0 <HAL_ADC_Init+0x288>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	099b      	lsrs	r3, r3, #6
 80010c6:	3301      	adds	r3, #1
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010cc:	e002      	b.n	80010d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff3c 	bl	8000f5c <LL_ADC_IsInternalRegulatorEnabled>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10d      	bne.n	8001106 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ee:	f043 0210 	orr.w	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff75 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 8001110:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b00      	cmp	r3, #0
 800111c:	f040 80c9 	bne.w	80012b2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 80c5 	bne.w	80012b2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001130:	f043 0202 	orr.w	r2, r3, #2
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff35 	bl	8000fac <LL_ADC_IsEnabled>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d115      	bne.n	8001174 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001148:	4862      	ldr	r0, [pc, #392]	; (80012d4 <HAL_ADC_Init+0x28c>)
 800114a:	f7ff ff2f 	bl	8000fac <LL_ADC_IsEnabled>
 800114e:	4604      	mov	r4, r0
 8001150:	4861      	ldr	r0, [pc, #388]	; (80012d8 <HAL_ADC_Init+0x290>)
 8001152:	f7ff ff2b 	bl	8000fac <LL_ADC_IsEnabled>
 8001156:	4603      	mov	r3, r0
 8001158:	431c      	orrs	r4, r3
 800115a:	4860      	ldr	r0, [pc, #384]	; (80012dc <HAL_ADC_Init+0x294>)
 800115c:	f7ff ff26 	bl	8000fac <LL_ADC_IsEnabled>
 8001160:	4603      	mov	r3, r0
 8001162:	4323      	orrs	r3, r4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4619      	mov	r1, r3
 800116e:	485c      	ldr	r0, [pc, #368]	; (80012e0 <HAL_ADC_Init+0x298>)
 8001170:	f7ff fd74 	bl	8000c5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e5b      	ldrb	r3, [r3, #25]
 8001178:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800117e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001184:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800118a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001192:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d106      	bne.n	80011b0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	3b01      	subs	r3, #1
 80011a8:	045b      	lsls	r3, r3, #17
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	4b44      	ldr	r3, [pc, #272]	; (80012e4 <HAL_ADC_Init+0x29c>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	430b      	orrs	r3, r1
 80011de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff1b 	bl	8001020 <LL_ADC_INJ_IsConversionOngoing>
 80011ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d13d      	bne.n	800126e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d13a      	bne.n	800126e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001204:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	69b9      	ldr	r1, [r7, #24]
 800121e:	430b      	orrs	r3, r1
 8001220:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001228:	2b01      	cmp	r3, #1
 800122a:	d118      	bne.n	800125e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001236:	f023 0304 	bic.w	r3, r3, #4
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001242:	4311      	orrs	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001248:	4311      	orrs	r1, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800124e:	430a      	orrs	r2, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	e007      	b.n	800126e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10c      	bne.n	8001290 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f023 010f 	bic.w	r1, r3, #15
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
 800128e:	e007      	b.n	80012a0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 020f 	bic.w	r2, r2, #15
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a4:	f023 0303 	bic.w	r3, r3, #3
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	655a      	str	r2, [r3, #84]	; 0x54
 80012b0:	e007      	b.n	80012c2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b6:	f043 0210 	orr.w	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3724      	adds	r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	053e2d63 	.word	0x053e2d63
 80012d4:	50040000 	.word	0x50040000
 80012d8:	50040100 	.word	0x50040100
 80012dc:	50040200 	.word	0x50040200
 80012e0:	50040300 	.word	0x50040300
 80012e4:	fff0c007 	.word	0xfff0c007

080012e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012f0:	4857      	ldr	r0, [pc, #348]	; (8001450 <HAL_ADC_Start+0x168>)
 80012f2:	f7ff fddd 	bl	8000eb0 <LL_ADC_GetMultimode>
 80012f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe7c 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	f040 809c 	bne.w	8001442 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_ADC_Start+0x30>
 8001314:	2302      	movs	r3, #2
 8001316:	e097      	b.n	8001448 <HAL_ADC_Start+0x160>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fed3 	bl	80020cc <ADC_Enable>
 8001326:	4603      	mov	r3, r0
 8001328:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f040 8083 	bne.w	8001438 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a42      	ldr	r2, [pc, #264]	; (8001454 <HAL_ADC_Start+0x16c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d002      	beq.n	8001356 <HAL_ADC_Start+0x6e>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	e000      	b.n	8001358 <HAL_ADC_Start+0x70>
 8001356:	4b40      	ldr	r3, [pc, #256]	; (8001458 <HAL_ADC_Start+0x170>)
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	4293      	cmp	r3, r2
 800135e:	d002      	beq.n	8001366 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800137e:	d106      	bne.n	800138e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	f023 0206 	bic.w	r2, r3, #6
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	659a      	str	r2, [r3, #88]	; 0x58
 800138c:	e002      	b.n	8001394 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	221c      	movs	r2, #28
 800139a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <HAL_ADC_Start+0x16c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d002      	beq.n	80013b4 <HAL_ADC_Start+0xcc>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	e000      	b.n	80013b6 <HAL_ADC_Start+0xce>
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_ADC_Start+0x170>)
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d008      	beq.n	80013d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d002      	beq.n	80013d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	d114      	bne.n	80013fa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fded 	bl	8000fd2 <LL_ADC_REG_StartConversion>
 80013f8:	e025      	b.n	8001446 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_ADC_Start+0x16c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d002      	beq.n	8001416 <HAL_ADC_Start+0x12e>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	e000      	b.n	8001418 <HAL_ADC_Start+0x130>
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_ADC_Start+0x170>)
 8001418:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00f      	beq.n	8001446 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800142e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
 8001436:	e006      	b.n	8001446 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001440:	e001      	b.n	8001446 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001442:	2302      	movs	r3, #2
 8001444:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	50040300 	.word	0x50040300
 8001454:	50040100 	.word	0x50040100
 8001458:	50040000 	.word	0x50040000

0800145c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001494:	4882      	ldr	r0, [pc, #520]	; (80016a0 <HAL_ADC_IRQHandler+0x228>)
 8001496:	f7ff fd0b 	bl	8000eb0 <LL_ADC_GetMultimode>
 800149a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d017      	beq.n	80014d6 <HAL_ADC_IRQHandler+0x5e>
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d012      	beq.n	80014d6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fed3 	bl	8002274 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2202      	movs	r2, #2
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <HAL_ADC_IRQHandler+0x72>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10a      	bne.n	8001500 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 8083 	beq.w	80015fc <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d07d      	beq.n	80015fc <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc26 	bl	8000d6e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d062      	beq.n	80015ee <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a5d      	ldr	r2, [pc, #372]	; (80016a4 <HAL_ADC_IRQHandler+0x22c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d002      	beq.n	8001538 <HAL_ADC_IRQHandler+0xc0>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	e000      	b.n	800153a <HAL_ADC_IRQHandler+0xc2>
 8001538:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <HAL_ADC_IRQHandler+0x230>)
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	4293      	cmp	r3, r2
 8001540:	d008      	beq.n	8001554 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b05      	cmp	r3, #5
 800154c:	d002      	beq.n	8001554 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b09      	cmp	r3, #9
 8001552:	d104      	bne.n	800155e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	623b      	str	r3, [r7, #32]
 800155c:	e00c      	b.n	8001578 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a50      	ldr	r2, [pc, #320]	; (80016a4 <HAL_ADC_IRQHandler+0x22c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d002      	beq.n	800156e <HAL_ADC_IRQHandler+0xf6>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	e000      	b.n	8001570 <HAL_ADC_IRQHandler+0xf8>
 800156e:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <HAL_ADC_IRQHandler+0x230>)
 8001570:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d135      	bne.n	80015ee <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b08      	cmp	r3, #8
 800158e:	d12e      	bne.n	80015ee <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fd30 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d11a      	bne.n	80015d6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 020c 	bic.w	r2, r2, #12
 80015ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d112      	bne.n	80015ee <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	; 0x54
 80015d4:	e00b      	b.n	80015ee <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f043 0210 	orr.w	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f95c 	bl	80018ac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	220c      	movs	r2, #12
 80015fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <HAL_ADC_IRQHandler+0x198>
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	f003 0320 	and.w	r3, r3, #32
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10b      	bne.n	8001628 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 809f 	beq.w	800175a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8099 	beq.w	800175a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fbd1 	bl	8000dec <LL_ADC_INJ_IsTriggerSourceSWStart>
 800164a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb8c 	bl	8000d6e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001656:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_ADC_IRQHandler+0x22c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d002      	beq.n	8001668 <HAL_ADC_IRQHandler+0x1f0>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	e000      	b.n	800166a <HAL_ADC_IRQHandler+0x1f2>
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_ADC_IRQHandler+0x230>)
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	4293      	cmp	r3, r2
 8001670:	d008      	beq.n	8001684 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b06      	cmp	r3, #6
 800167c:	d002      	beq.n	8001684 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b07      	cmp	r3, #7
 8001682:	d104      	bne.n	800168e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e013      	b.n	80016b6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_ADC_IRQHandler+0x22c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d009      	beq.n	80016ac <HAL_ADC_IRQHandler+0x234>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	e007      	b.n	80016ae <HAL_ADC_IRQHandler+0x236>
 800169e:	bf00      	nop
 80016a0:	50040300 	.word	0x50040300
 80016a4:	50040100 	.word	0x50040100
 80016a8:	50040000 	.word	0x50040000
 80016ac:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <HAL_ADC_IRQHandler+0x42c>)
 80016ae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d047      	beq.n	800174c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x25e>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d03f      	beq.n	800174c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d13a      	bne.n	800174c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	2b40      	cmp	r3, #64	; 0x40
 80016e2:	d133      	bne.n	800174c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d12e      	bne.n	800174c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fc94 	bl	8001020 <LL_ADC_INJ_IsConversionOngoing>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d11a      	bne.n	8001734 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800170c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d112      	bne.n	800174c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
 8001732:	e00b      	b.n	800174c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f043 0210 	orr.w	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	f043 0201 	orr.w	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fd69 	bl	8002224 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2260      	movs	r2, #96	; 0x60
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001760:	2b00      	cmp	r3, #0
 8001762:	d011      	beq.n	8001788 <HAL_ADC_IRQHandler+0x310>
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00c      	beq.n	8001788 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8a0 	bl	80018c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d012      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x340>
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00d      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fd4f 	bl	800224c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d012      	beq.n	80017e8 <HAL_ADC_IRQHandler+0x370>
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fd41 	bl	8002260 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d036      	beq.n	8001860 <HAL_ADC_IRQHandler+0x3e8>
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d031      	beq.n	8001860 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001804:	2301      	movs	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
 8001808:	e014      	b.n	8001834 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001810:	4825      	ldr	r0, [pc, #148]	; (80018a8 <HAL_ADC_IRQHandler+0x430>)
 8001812:	f7ff fb5b 	bl	8000ecc <LL_ADC_GetMultiDMATransfer>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00b      	beq.n	8001834 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800181c:	2301      	movs	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
 8001820:	e008      	b.n	8001834 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001830:	2301      	movs	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10e      	bne.n	8001858 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f043 0202 	orr.w	r2, r3, #2
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f83e 	bl	80018d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2210      	movs	r2, #16
 800185e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001866:	2b00      	cmp	r3, #0
 8001868:	d018      	beq.n	800189c <HAL_ADC_IRQHandler+0x424>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f043 0208 	orr.w	r2, r3, #8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001894:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fcce 	bl	8002238 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	50040000 	.word	0x50040000
 80018a8:	50040300 	.word	0x50040300

080018ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0b6      	sub	sp, #216	; 0xd8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_ADC_ConfigChannel+0x22>
 8001906:	2302      	movs	r3, #2
 8001908:	e3c9      	b.n	800209e <HAL_ADC_ConfigChannel+0x7b6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fb6f 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 83aa 	bne.w	8002078 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d824      	bhi.n	800197e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	3b02      	subs	r3, #2
 800193a:	2b03      	cmp	r3, #3
 800193c:	d81b      	bhi.n	8001976 <HAL_ADC_ConfigChannel+0x8e>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <HAL_ADC_ConfigChannel+0x5c>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001955 	.word	0x08001955
 8001948:	0800195d 	.word	0x0800195d
 800194c:	08001965 	.word	0x08001965
 8001950:	0800196d 	.word	0x0800196d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001954:	230c      	movs	r3, #12
 8001956:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800195a:	e010      	b.n	800197e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800195c:	2312      	movs	r3, #18
 800195e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001962:	e00c      	b.n	800197e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001964:	2318      	movs	r3, #24
 8001966:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800196a:	e008      	b.n	800197e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800196c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001974:	e003      	b.n	800197e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001976:	2306      	movs	r3, #6
 8001978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800197c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800198c:	f7ff fa02 	bl	8000d94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fb30 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 800199a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fb3c 	bl	8001020 <LL_ADC_INJ_IsConversionOngoing>
 80019a8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 81a4 	bne.w	8001cfe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 819f 	bne.w	8001cfe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	461a      	mov	r2, r3
 80019ce:	f7ff fa20 	bl	8000e12 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d00a      	beq.n	8001a0a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6919      	ldr	r1, [r3, #16]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a04:	f7ff f95e 	bl	8000cc4 <LL_ADC_SetOffset>
 8001a08:	e179      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f97b 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x14e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f970 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	e01e      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x18c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff f965 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001a64:	2320      	movs	r3, #32
 8001a66:	e004      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001a68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x1a4>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	e018      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1d6>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001aa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001aa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e004      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001ab4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d106      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f934 	bl	8000d38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f918 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x214>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2101      	movs	r1, #1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f90d 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	f003 021f 	and.w	r2, r3, #31
 8001afa:	e01e      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x252>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f902 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001b22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	e004      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001b2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x26a>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0e9b      	lsrs	r3, r3, #26
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	e018      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x29c>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001b76:	2320      	movs	r3, #32
 8001b78:	e004      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001b7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d106      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2101      	movs	r1, #1
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f8d1 	bl	8000d38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f8b5 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10a      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x2da>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f8aa 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	0e9b      	lsrs	r3, r3, #26
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	e01e      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x318>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f89f 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	e004      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x330>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0e9b      	lsrs	r3, r3, #26
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	e014      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x35a>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001c34:	2320      	movs	r3, #32
 8001c36:	e004      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f872 	bl	8000d38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2103      	movs	r1, #3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f856 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x398>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2103      	movs	r1, #3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f84b 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 021f 	and.w	r2, r3, #31
 8001c7e:	e017      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x3c8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2103      	movs	r1, #3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f840 	bl	8000d0c <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c9a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	e003      	b.n	8001cae <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x3e0>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0e9b      	lsrs	r3, r3, #26
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	e011      	b.n	8001cec <HAL_ADC_ConfigChannel+0x404>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e003      	b.n	8001cec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f81d 	bl	8000d38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f952 	bl	8000fac <LL_ADC_IsEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8140 	bne.w	8001f90 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f7ff f8a3 	bl	8000e68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4a8f      	ldr	r2, [pc, #572]	; (8001f64 <HAL_ADC_ConfigChannel+0x67c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	f040 8131 	bne.w	8001f90 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10b      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x46e>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2b09      	cmp	r3, #9
 8001d4c:	bf94      	ite	ls
 8001d4e:	2301      	movls	r3, #1
 8001d50:	2300      	movhi	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	e019      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x4a2>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e003      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d079      	beq.n	8001e82 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x4c2>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	3301      	adds	r3, #1
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da8:	e015      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x4ee>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dba:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e003      	b.n	8001dce <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	069b      	lsls	r3, r3, #26
 8001dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x50e>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	e017      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x53e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e003      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	ea42 0103 	orr.w	r1, r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x564>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	051b      	lsls	r3, r3, #20
 8001e4a:	e018      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x596>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e003      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f003 021f 	and.w	r2, r3, #31
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	e081      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x5b6>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	3301      	adds	r3, #1
 8001e96:	069b      	lsls	r3, r3, #26
 8001e98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9c:	e015      	b.n	8001eca <HAL_ADC_ConfigChannel+0x5e2>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	e003      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	069b      	lsls	r3, r3, #26
 8001ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x602>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0e9b      	lsrs	r3, r3, #26
 8001edc:	3301      	adds	r3, #1
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	e017      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x632>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e003      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	ea42 0103 	orr.w	r1, r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x65e>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0e9b      	lsrs	r3, r3, #26
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 021f 	and.w	r2, r3, #31
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	051b      	lsls	r3, r3, #20
 8001f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f44:	e01e      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x69c>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	60fb      	str	r3, [r7, #12]
  return result;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d104      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	e006      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x688>
 8001f62:	bf00      	nop
 8001f64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 021f 	and.w	r2, r3, #31
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	051b      	lsls	r3, r3, #20
 8001f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe ff41 	bl	8000e12 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d07a      	beq.n	8002092 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9c:	4843      	ldr	r0, [pc, #268]	; (80020ac <HAL_ADC_ConfigChannel+0x7c4>)
 8001f9e:	f7fe fe83 	bl	8000ca8 <LL_ADC_GetCommonPathInternalCh>
 8001fa2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a41      	ldr	r2, [pc, #260]	; (80020b0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d12c      	bne.n	800200a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d126      	bne.n	800200a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a3c      	ldr	r2, [pc, #240]	; (80020b4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x6e8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a3b      	ldr	r2, [pc, #236]	; (80020b8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d15d      	bne.n	800208c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4834      	ldr	r0, [pc, #208]	; (80020ac <HAL_ADC_ConfigChannel+0x7c4>)
 8001fdc:	f7fe fe51 	bl	8000c82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_ADC_ConfigChannel+0x7d4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	4a36      	ldr	r2, [pc, #216]	; (80020c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ffa:	e002      	b.n	8002002 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f9      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002008:	e040      	b.n	800208c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2d      	ldr	r2, [pc, #180]	; (80020c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d118      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d112      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <HAL_ADC_ConfigChannel+0x74c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a22      	ldr	r2, [pc, #136]	; (80020b8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d12d      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203c:	4619      	mov	r1, r3
 800203e:	481b      	ldr	r0, [pc, #108]	; (80020ac <HAL_ADC_ConfigChannel+0x7c4>)
 8002040:	f7fe fe1f 	bl	8000c82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002044:	e024      	b.n	8002090 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <HAL_ADC_ConfigChannel+0x7e0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d120      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d11a      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d115      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800206a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800206e:	4619      	mov	r1, r3
 8002070:	480e      	ldr	r0, [pc, #56]	; (80020ac <HAL_ADC_ConfigChannel+0x7c4>)
 8002072:	f7fe fe06 	bl	8000c82 <LL_ADC_SetCommonPathInternalCh>
 8002076:	e00c      	b.n	8002092 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800208a:	e002      	b.n	8002092 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800208c:	bf00      	nop
 800208e:	e000      	b.n	8002092 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002090:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800209a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	37d8      	adds	r7, #216	; 0xd8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	80080000 	.word	0x80080000
 80020ac:	50040300 	.word	0x50040300
 80020b0:	c7520000 	.word	0xc7520000
 80020b4:	50040000 	.word	0x50040000
 80020b8:	50040200 	.word	0x50040200
 80020bc:	20000000 	.word	0x20000000
 80020c0:	053e2d63 	.word	0x053e2d63
 80020c4:	cb840000 	.word	0xcb840000
 80020c8:	80000001 	.word	0x80000001

080020cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe ff65 	bl	8000fac <LL_ADC_IsEnabled>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d169      	bne.n	80021bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <ADC_Enable+0xfc>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00d      	beq.n	8002112 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0210 	orr.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e055      	b.n	80021be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe ff34 	bl	8000f84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800211c:	482b      	ldr	r0, [pc, #172]	; (80021cc <ADC_Enable+0x100>)
 800211e:	f7fe fdc3 	bl	8000ca8 <LL_ADC_GetCommonPathInternalCh>
 8002122:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <ADC_Enable+0x104>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <ADC_Enable+0x108>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002146:	e002      	b.n	800214e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	3b01      	subs	r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002154:	f7fe fd52 	bl	8000bfc <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800215a:	e028      	b.n	80021ae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe ff23 	bl	8000fac <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d104      	bne.n	8002176 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe ff07 	bl	8000f84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002176:	f7fe fd41 	bl	8000bfc <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d914      	bls.n	80021ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d00d      	beq.n	80021ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0210 	orr.w	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f043 0201 	orr.w	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e007      	b.n	80021be <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d1cf      	bne.n	800215c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	8000003f 	.word	0x8000003f
 80021cc:	50040300 	.word	0x50040300
 80021d0:	20000000 	.word	0x20000000
 80021d4:	053e2d63 	.word	0x053e2d63

080021d8 <LL_ADC_IsEnabled>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <LL_ADC_IsEnabled+0x18>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <LL_ADC_IsEnabled+0x1a>
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_ADC_REG_IsConversionOngoing>:
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b04      	cmp	r3, #4
 8002210:	d101      	bne.n	8002216 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b09f      	sub	sp, #124	; 0x7c
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e093      	b.n	80023ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80022ae:	2300      	movs	r3, #0
 80022b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80022b2:	2300      	movs	r3, #0
 80022b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d102      	bne.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	e001      	b.n	80022ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e072      	b.n	80023ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff87 	bl	80021fe <LL_ADC_REG_IsConversionOngoing>
 80022f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff81 	bl	80021fe <LL_ADC_REG_IsConversionOngoing>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d154      	bne.n	80023ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002304:	2b00      	cmp	r3, #0
 8002306:	d151      	bne.n	80023ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002308:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800230a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02c      	beq.n	800236e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002326:	035b      	lsls	r3, r3, #13
 8002328:	430b      	orrs	r3, r1
 800232a:	431a      	orrs	r2, r3
 800232c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002330:	4829      	ldr	r0, [pc, #164]	; (80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002332:	f7ff ff51 	bl	80021d8 <LL_ADC_IsEnabled>
 8002336:	4604      	mov	r4, r0
 8002338:	4828      	ldr	r0, [pc, #160]	; (80023dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800233a:	f7ff ff4d 	bl	80021d8 <LL_ADC_IsEnabled>
 800233e:	4603      	mov	r3, r0
 8002340:	431c      	orrs	r4, r3
 8002342:	4828      	ldr	r0, [pc, #160]	; (80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002344:	f7ff ff48 	bl	80021d8 <LL_ADC_IsEnabled>
 8002348:	4603      	mov	r3, r0
 800234a:	4323      	orrs	r3, r4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d137      	bne.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002358:	f023 030f 	bic.w	r3, r3, #15
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	6811      	ldr	r1, [r2, #0]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	6892      	ldr	r2, [r2, #8]
 8002364:	430a      	orrs	r2, r1
 8002366:	431a      	orrs	r2, r3
 8002368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800236c:	e028      	b.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800236e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002378:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800237a:	4817      	ldr	r0, [pc, #92]	; (80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800237c:	f7ff ff2c 	bl	80021d8 <LL_ADC_IsEnabled>
 8002380:	4604      	mov	r4, r0
 8002382:	4816      	ldr	r0, [pc, #88]	; (80023dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002384:	f7ff ff28 	bl	80021d8 <LL_ADC_IsEnabled>
 8002388:	4603      	mov	r3, r0
 800238a:	431c      	orrs	r4, r3
 800238c:	4815      	ldr	r0, [pc, #84]	; (80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800238e:	f7ff ff23 	bl	80021d8 <LL_ADC_IsEnabled>
 8002392:	4603      	mov	r3, r0
 8002394:	4323      	orrs	r3, r4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d112      	bne.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800239a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023a2:	f023 030f 	bic.w	r3, r3, #15
 80023a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023aa:	e009      	b.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80023be:	e000      	b.n	80023c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	377c      	adds	r7, #124	; 0x7c
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	50040000 	.word	0x50040000
 80023dc:	50040100 	.word	0x50040100
 80023e0:	50040300 	.word	0x50040300
 80023e4:	50040200 	.word	0x50040200

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <__NVIC_EnableIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	; (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f7ff ff8e 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff29 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff3e 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff8e 	bl	80024dc <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5d 	bl	8002488 <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff31 	bl	800244c <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa2 	bl	8002544 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261a:	e17f      	b.n	800291c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8171 	beq.w	8002916 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d005      	beq.n	800264c <HAL_GPIO_Init+0x40>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d130      	bne.n	80026ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002682:	2201      	movs	r2, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 0201 	and.w	r2, r3, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d118      	bne.n	80026ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026c0:	2201      	movs	r2, #1
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	08db      	lsrs	r3, r3, #3
 80026d6:	f003 0201 	and.w	r2, r3, #1
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d017      	beq.n	8002728 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d123      	bne.n	800277c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	08da      	lsrs	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3208      	adds	r2, #8
 8002776:	6939      	ldr	r1, [r7, #16]
 8002778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80ac 	beq.w	8002916 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	4b5f      	ldr	r3, [pc, #380]	; (800293c <HAL_GPIO_Init+0x330>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	4a5e      	ldr	r2, [pc, #376]	; (800293c <HAL_GPIO_Init+0x330>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6613      	str	r3, [r2, #96]	; 0x60
 80027ca:	4b5c      	ldr	r3, [pc, #368]	; (800293c <HAL_GPIO_Init+0x330>)
 80027cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027d6:	4a5a      	ldr	r2, [pc, #360]	; (8002940 <HAL_GPIO_Init+0x334>)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	220f      	movs	r2, #15
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002800:	d025      	beq.n	800284e <HAL_GPIO_Init+0x242>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4f      	ldr	r2, [pc, #316]	; (8002944 <HAL_GPIO_Init+0x338>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01f      	beq.n	800284a <HAL_GPIO_Init+0x23e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4e      	ldr	r2, [pc, #312]	; (8002948 <HAL_GPIO_Init+0x33c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d019      	beq.n	8002846 <HAL_GPIO_Init+0x23a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4d      	ldr	r2, [pc, #308]	; (800294c <HAL_GPIO_Init+0x340>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0x236>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4c      	ldr	r2, [pc, #304]	; (8002950 <HAL_GPIO_Init+0x344>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00d      	beq.n	800283e <HAL_GPIO_Init+0x232>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4b      	ldr	r2, [pc, #300]	; (8002954 <HAL_GPIO_Init+0x348>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0x22e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4a      	ldr	r2, [pc, #296]	; (8002958 <HAL_GPIO_Init+0x34c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_GPIO_Init+0x22a>
 8002832:	2306      	movs	r3, #6
 8002834:	e00c      	b.n	8002850 <HAL_GPIO_Init+0x244>
 8002836:	2307      	movs	r3, #7
 8002838:	e00a      	b.n	8002850 <HAL_GPIO_Init+0x244>
 800283a:	2305      	movs	r3, #5
 800283c:	e008      	b.n	8002850 <HAL_GPIO_Init+0x244>
 800283e:	2304      	movs	r3, #4
 8002840:	e006      	b.n	8002850 <HAL_GPIO_Init+0x244>
 8002842:	2303      	movs	r3, #3
 8002844:	e004      	b.n	8002850 <HAL_GPIO_Init+0x244>
 8002846:	2302      	movs	r3, #2
 8002848:	e002      	b.n	8002850 <HAL_GPIO_Init+0x244>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_GPIO_Init+0x244>
 800284e:	2300      	movs	r3, #0
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	f002 0203 	and.w	r2, r2, #3
 8002856:	0092      	lsls	r2, r2, #2
 8002858:	4093      	lsls	r3, r2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002860:	4937      	ldr	r1, [pc, #220]	; (8002940 <HAL_GPIO_Init+0x334>)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800286e:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_GPIO_Init+0x350>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002892:	4a32      	ldr	r2, [pc, #200]	; (800295c <HAL_GPIO_Init+0x350>)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002898:	4b30      	ldr	r3, [pc, #192]	; (800295c <HAL_GPIO_Init+0x350>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028bc:	4a27      	ldr	r2, [pc, #156]	; (800295c <HAL_GPIO_Init+0x350>)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <HAL_GPIO_Init+0x350>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_GPIO_Init+0x350>)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_GPIO_Init+0x350>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <HAL_GPIO_Init+0x350>)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3301      	adds	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	f47f ae78 	bne.w	800261c <HAL_GPIO_Init+0x10>
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	40010000 	.word	0x40010000
 8002944:	48000400 	.word	0x48000400
 8002948:	48000800 	.word	0x48000800
 800294c:	48000c00 	.word	0x48000c00
 8002950:	48001000 	.word	0x48001000
 8002954:	48001400 	.word	0x48001400
 8002958:	48001800 	.word	0x48001800
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002970:	787b      	ldrb	r3, [r7, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800297c:	e002      	b.n	8002984 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40007000 	.word	0x40007000

080029ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ba:	d130      	bne.n	8002a1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029bc:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c8:	d038      	beq.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2232      	movs	r2, #50	; 0x32
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9b      	lsrs	r3, r3, #18
 80029ec:	3301      	adds	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f0:	e002      	b.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a04:	d102      	bne.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f2      	bne.n	80029f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d110      	bne.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e00f      	b.n	8002a3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2a:	d007      	beq.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a34:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	20000000 	.word	0x20000000
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e3ca      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	4b97      	ldr	r3, [pc, #604]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a74:	4b94      	ldr	r3, [pc, #592]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80e4 	beq.w	8002c54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x4a>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	f040 808b 	bne.w	8002bb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	f040 8087 	bne.w	8002bb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa2:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x62>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e3a2      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1a      	ldr	r2, [r3, #32]
 8002abe:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x7c>
 8002aca:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad2:	e005      	b.n	8002ae0 <HAL_RCC_OscConfig+0x88>
 8002ad4:	4b7c      	ldr	r3, [pc, #496]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d223      	bcs.n	8002b2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fd55 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e383      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af8:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a72      	ldr	r2, [pc, #456]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002afe:	f043 0308 	orr.w	r3, r3, #8
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b70      	ldr	r3, [pc, #448]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	496d      	ldr	r1, [pc, #436]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b16:	4b6c      	ldr	r3, [pc, #432]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	4968      	ldr	r1, [pc, #416]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
 8002b2a:	e025      	b.n	8002b78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b2c:	4b66      	ldr	r3, [pc, #408]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a65      	ldr	r2, [pc, #404]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b32:	f043 0308 	orr.w	r3, r3, #8
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b63      	ldr	r3, [pc, #396]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4960      	ldr	r1, [pc, #384]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	495b      	ldr	r1, [pc, #364]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fd15 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e343      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b78:	f000 fc4a 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b52      	ldr	r3, [pc, #328]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	4950      	ldr	r1, [pc, #320]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	4a4e      	ldr	r2, [pc, #312]	; (8002cd0 <HAL_RCC_OscConfig+0x278>)
 8002b96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b98:	4b4e      	ldr	r3, [pc, #312]	; (8002cd4 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd ffdd 	bl	8000b5c <HAL_InitTick>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d052      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	e327      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d032      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a42      	ldr	r2, [pc, #264]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f81a 	bl	8000bfc <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bcc:	f7fe f816 	bl	8000bfc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e310      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a36      	ldr	r2, [pc, #216]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4931      	ldr	r1, [pc, #196]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c08:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	492c      	ldr	r1, [pc, #176]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e01a      	b.n	8002c54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c2a:	f7fd ffe7 	bl	8000bfc <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c32:	f7fd ffe3 	bl	8000bfc <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e2dd      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c44:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x1da>
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d074      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d005      	beq.n	8002c72 <HAL_RCC_OscConfig+0x21a>
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	d10e      	bne.n	8002c8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d10b      	bne.n	8002c8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d064      	beq.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d160      	bne.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e2ba      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x24a>
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e026      	b.n	8002cf0 <HAL_RCC_OscConfig+0x298>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002caa:	d115      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x280>
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a02      	ldr	r2, [pc, #8]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x298>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08004a78 	.word	0x08004a78
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	4ba0      	ldr	r3, [pc, #640]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a9f      	ldr	r2, [pc, #636]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b9d      	ldr	r3, [pc, #628]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a9c      	ldr	r2, [pc, #624]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fd ff80 	bl	8000bfc <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fd ff7c 	bl	8000bfc <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e276      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d12:	4b92      	ldr	r3, [pc, #584]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2a8>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fd ff6c 	bl	8000bfc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fd ff68 	bl	8000bfc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e262      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3a:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2d0>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d060      	beq.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x310>
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d119      	bne.n	8002d96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d116      	bne.n	8002d96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d68:	4b7c      	ldr	r3, [pc, #496]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_OscConfig+0x328>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e23f      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	4973      	ldr	r1, [pc, #460]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d94:	e040      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d023      	beq.n	8002de6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9e:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6e      	ldr	r2, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fd ff27 	bl	8000bfc <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fd ff23 	bl	8000bfc <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e21d      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc4:	4b65      	ldr	r3, [pc, #404]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b62      	ldr	r3, [pc, #392]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	495f      	ldr	r1, [pc, #380]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
 8002de4:	e018      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de6:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a5c      	ldr	r2, [pc, #368]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fd ff03 	bl	8000bfc <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7fd feff 	bl	8000bfc <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1f9      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d03c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01c      	beq.n	8002e66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2c:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	4a4a      	ldr	r2, [pc, #296]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fd fede 	bl	8000bfc <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fd feda 	bl	8000bfc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1d4      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ef      	beq.n	8002e44 <HAL_RCC_OscConfig+0x3ec>
 8002e64:	e01b      	b.n	8002e9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fd fec1 	bl	8000bfc <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7e:	f7fd febd 	bl	8000bfc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1b7      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1ef      	bne.n	8002e7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80a6 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eac:	2300      	movs	r3, #0
 8002eae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10d      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebc:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed8:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <HAL_RCC_OscConfig+0x508>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d118      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_RCC_OscConfig+0x508>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_RCC_OscConfig+0x508>)
 8002eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef0:	f7fd fe84 	bl	8000bfc <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef8:	f7fd fe80 	bl	8000bfc <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e17a      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_RCC_OscConfig+0x508>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d108      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4d8>
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f2e:	e029      	b.n	8002f84 <HAL_RCC_OscConfig+0x52c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_OscConfig+0x50c>
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f58:	e014      	b.n	8002f84 <HAL_RCC_OscConfig+0x52c>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40007000 	.word	0x40007000
 8002f64:	4b9c      	ldr	r3, [pc, #624]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	4a9b      	ldr	r2, [pc, #620]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f74:	4b98      	ldr	r3, [pc, #608]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	4a97      	ldr	r2, [pc, #604]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d016      	beq.n	8002fba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fd fe36 	bl	8000bfc <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fd fe32 	bl	8000bfc <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e12a      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002faa:	4b8b      	ldr	r3, [pc, #556]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ed      	beq.n	8002f94 <HAL_RCC_OscConfig+0x53c>
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fd fe1f 	bl	8000bfc <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7fd fe1b 	bl	8000bfc <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e113      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd8:	4b7f      	ldr	r3, [pc, #508]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ed      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe6:	7ffb      	ldrb	r3, [r7, #31]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fec:	4b7a      	ldr	r3, [pc, #488]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	4a79      	ldr	r2, [pc, #484]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80fe 	beq.w	80031fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	2b02      	cmp	r3, #2
 8003008:	f040 80d0 	bne.w	80031ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800300c:	4b72      	ldr	r3, [pc, #456]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0203 	and.w	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	429a      	cmp	r2, r3
 800301e:	d130      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	3b01      	subs	r3, #1
 800302c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d127      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d11f      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800304c:	2a07      	cmp	r2, #7
 800304e:	bf14      	ite	ne
 8003050:	2201      	movne	r2, #1
 8003052:	2200      	moveq	r2, #0
 8003054:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003056:	4293      	cmp	r3, r2
 8003058:	d113      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	3b01      	subs	r3, #1
 8003068:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d109      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	3b01      	subs	r3, #1
 800307c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d06e      	beq.n	8003160 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d069      	beq.n	800315c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003088:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003094:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0ad      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a4b      	ldr	r2, [pc, #300]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b0:	f7fd fda4 	bl	8000bfc <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fd fda0 	bl	8000bfc <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e09a      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ca:	4b43      	ldr	r3, [pc, #268]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d6:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4b40      	ldr	r3, [pc, #256]	; (80031dc <HAL_RCC_OscConfig+0x784>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030e6:	3a01      	subs	r2, #1
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	4311      	orrs	r1, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f0:	0212      	lsls	r2, r2, #8
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030f8:	0852      	lsrs	r2, r2, #1
 80030fa:	3a01      	subs	r2, #1
 80030fc:	0552      	lsls	r2, r2, #21
 80030fe:	4311      	orrs	r1, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003104:	0852      	lsrs	r2, r2, #1
 8003106:	3a01      	subs	r2, #1
 8003108:	0652      	lsls	r2, r2, #25
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003110:	0912      	lsrs	r2, r2, #4
 8003112:	0452      	lsls	r2, r2, #17
 8003114:	430a      	orrs	r2, r1
 8003116:	4930      	ldr	r1, [pc, #192]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003118:	4313      	orrs	r3, r2
 800311a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800311c:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2d      	ldr	r2, [pc, #180]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003128:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a2a      	ldr	r2, [pc, #168]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 800312e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003134:	f7fd fd62 	bl	8000bfc <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fd fd5e 	bl	8000bfc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e058      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800315a:	e050      	b.n	80031fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e04f      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d148      	bne.n	80031fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003176:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a16      	ldr	r2, [pc, #88]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003182:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003184:	f7fd fd3a 	bl	8000bfc <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fd fd36 	bl	8000bfc <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e030      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x734>
 80031aa:	e028      	b.n	80031fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d023      	beq.n	80031fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <HAL_RCC_OscConfig+0x780>)
 80031b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd fd1d 	bl	8000bfc <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c4:	e00c      	b.n	80031e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fd fd19 	bl	8000bfc <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d905      	bls.n	80031e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e013      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
 80031d8:	40021000 	.word	0x40021000
 80031dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x7b0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ec      	bne.n	80031c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_OscConfig+0x7b0>)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4905      	ldr	r1, [pc, #20]	; (8003208 <HAL_RCC_OscConfig+0x7b0>)
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_OscConfig+0x7b4>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	60cb      	str	r3, [r1, #12]
 80031f8:	e001      	b.n	80031fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	feeefffc 	.word	0xfeeefffc

08003210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0e7      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b75      	ldr	r3, [pc, #468]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d910      	bls.n	8003254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b72      	ldr	r3, [pc, #456]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4970      	ldr	r1, [pc, #448]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b6e      	ldr	r3, [pc, #440]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0cf      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	4b66      	ldr	r3, [pc, #408]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326c:	429a      	cmp	r2, r3
 800326e:	d908      	bls.n	8003282 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4960      	ldr	r1, [pc, #384]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04c      	beq.n	8003328 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d121      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0a6      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ae:	4b54      	ldr	r3, [pc, #336]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d115      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e09a      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032c6:	4b4e      	ldr	r3, [pc, #312]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e08e      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e086      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032e6:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4943      	ldr	r1, [pc, #268]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f8:	f7fd fc80 	bl	8000bfc <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fd fc7c 	bl	8000bfc <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e06e      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b3a      	ldr	r3, [pc, #232]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 020c 	and.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1eb      	bne.n	8003300 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b31      	ldr	r3, [pc, #196]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003340:	429a      	cmp	r2, r3
 8003342:	d208      	bcs.n	8003356 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	492b      	ldr	r1, [pc, #172]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d210      	bcs.n	8003386 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 0207 	bic.w	r2, r3, #7
 800336c:	4923      	ldr	r1, [pc, #140]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003374:	4b21      	ldr	r3, [pc, #132]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e036      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	4918      	ldr	r1, [pc, #96]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4910      	ldr	r1, [pc, #64]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c4:	f000 f824 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <HAL_RCC_ClockConfig+0x1f4>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
 80033e0:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1f8>)
 80033e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_ClockConfig+0x1fc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd fbb7 	bl	8000b5c <HAL_InitTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80033f2:	7afb      	ldrb	r3, [r7, #11]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40022000 	.word	0x40022000
 8003400:	40021000 	.word	0x40021000
 8003404:	08004a78 	.word	0x08004a78
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x34>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d121      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d11e      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003444:	4b34      	ldr	r3, [pc, #208]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003450:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e005      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003460:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800346c:	4a2b      	ldr	r2, [pc, #172]	; (800351c <HAL_RCC_GetSysClockFreq+0x10c>)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d102      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e004      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d101      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 8003496:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d134      	bne.n	8003508 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d003      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0xac>
 80034b4:	e005      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 80034b8:	617b      	str	r3, [r7, #20]
      break;
 80034ba:	e005      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034bc:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 80034be:	617b      	str	r3, [r7, #20]
      break;
 80034c0:	e002      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	617b      	str	r3, [r7, #20]
      break;
 80034c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c8:	4b13      	ldr	r3, [pc, #76]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	3301      	adds	r3, #1
 80034d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	fb03 f202 	mul.w	r2, r3, r2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	0e5b      	lsrs	r3, r3, #25
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	3301      	adds	r3, #1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003508:	69bb      	ldr	r3, [r7, #24]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	08004a90 	.word	0x08004a90
 8003520:	00f42400 	.word	0x00f42400
 8003524:	007a1200 	.word	0x007a1200

08003528 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCC_GetHCLKFreq+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000000 	.word	0x20000000

08003540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003544:	f7ff fff0 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x24>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4904      	ldr	r1, [pc, #16]	; (8003568 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	08004a88 	.word	0x08004a88

0800356c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003570:	f7ff ffda 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0adb      	lsrs	r3, r3, #11
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4904      	ldr	r1, [pc, #16]	; (8003594 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	08004a88 	.word	0x08004a88

08003598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035a4:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035b0:	f7ff f9ee 	bl	8002990 <HAL_PWREx_GetVoltageRange>
 80035b4:	6178      	str	r0, [r7, #20]
 80035b6:	e014      	b.n	80035e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b25      	ldr	r3, [pc, #148]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	4a24      	ldr	r2, [pc, #144]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6593      	str	r3, [r2, #88]	; 0x58
 80035c4:	4b22      	ldr	r3, [pc, #136]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035d0:	f7ff f9de 	bl	8002990 <HAL_PWREx_GetVoltageRange>
 80035d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035da:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e8:	d10b      	bne.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d919      	bls.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2ba0      	cmp	r3, #160	; 0xa0
 80035f4:	d902      	bls.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f6:	2302      	movs	r3, #2
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	e013      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035fc:	2301      	movs	r3, #1
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	e010      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d902      	bls.n	800360e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003608:	2303      	movs	r3, #3
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	e00a      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d102      	bne.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003614:	2302      	movs	r3, #2
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e004      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b70      	cmp	r3, #112	; 0x70
 800361e:	d101      	bne.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003620:	2301      	movs	r3, #1
 8003622:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 0207 	bic.w	r2, r3, #7
 800362c:	4909      	ldr	r1, [pc, #36]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	429a      	cmp	r2, r3
 8003640:	d001      	beq.n	8003646 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	40022000 	.word	0x40022000

08003658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003660:	2300      	movs	r3, #0
 8003662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003664:	2300      	movs	r3, #0
 8003666:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003670:	2b00      	cmp	r3, #0
 8003672:	d041      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003678:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800367c:	d02a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800367e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003682:	d824      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003684:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003688:	d008      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800368a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800368e:	d81e      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003698:	d010      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800369a:	e018      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800369c:	4b86      	ldr	r3, [pc, #536]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4a85      	ldr	r2, [pc, #532]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a8:	e015      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fabb 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036ba:	e00c      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3320      	adds	r3, #32
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fba6 	bl	8003e14 <RCCEx_PLLSAI2_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036cc:	e003      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	74fb      	strb	r3, [r7, #19]
      break;
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036dc:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ea:	4973      	ldr	r1, [pc, #460]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036f2:	e001      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d041      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003708:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800370c:	d02a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800370e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003712:	d824      	bhi.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800371a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800371e:	d81e      	bhi.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003728:	d010      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800372a:	e018      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800372c:	4b62      	ldr	r3, [pc, #392]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a61      	ldr	r2, [pc, #388]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003738:	e015      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fa73 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800374a:	e00c      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3320      	adds	r3, #32
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fb5e 	bl	8003e14 <RCCEx_PLLSAI2_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800375c:	e003      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	74fb      	strb	r3, [r7, #19]
      break;
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800376c:	4b52      	ldr	r3, [pc, #328]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800377a:	494f      	ldr	r1, [pc, #316]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003782:	e001      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80a0 	beq.w	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b0:	4b41      	ldr	r3, [pc, #260]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	4a40      	ldr	r2, [pc, #256]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ba:	6593      	str	r3, [r2, #88]	; 0x58
 80037bc:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c8:	2301      	movs	r3, #1
 80037ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a3a      	ldr	r2, [pc, #232]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037d8:	f7fd fa10 	bl	8000bfc <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037de:	e009      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e0:	f7fd fa0c 	bl	8000bfc <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d902      	bls.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	74fb      	strb	r3, [r7, #19]
        break;
 80037f2:	e005      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ef      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d15c      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003806:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003810:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01f      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	429a      	cmp	r2, r3
 8003822:	d019      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003824:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003830:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d016      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003862:	f7fd f9cb 	bl	8000bfc <HAL_GetTick>
 8003866:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003868:	e00b      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386a:	f7fd f9c7 	bl	8000bfc <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	; 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d902      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	74fb      	strb	r3, [r7, #19]
            break;
 8003880:	e006      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ec      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10c      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a6:	4904      	ldr	r1, [pc, #16]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038ae:	e009      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	74bb      	strb	r3, [r7, #18]
 80038b4:	e006      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c4:	7c7b      	ldrb	r3, [r7, #17]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d105      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ca:	4b9e      	ldr	r3, [pc, #632]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	4a9d      	ldr	r2, [pc, #628]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038e2:	4b98      	ldr	r3, [pc, #608]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 0203 	bic.w	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	4994      	ldr	r1, [pc, #592]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003904:	4b8f      	ldr	r3, [pc, #572]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f023 020c 	bic.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	498c      	ldr	r1, [pc, #560]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003926:	4b87      	ldr	r3, [pc, #540]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	4983      	ldr	r1, [pc, #524]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003948:	4b7e      	ldr	r3, [pc, #504]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	497b      	ldr	r1, [pc, #492]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800396a:	4b76      	ldr	r3, [pc, #472]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003978:	4972      	ldr	r1, [pc, #456]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800398c:	4b6d      	ldr	r3, [pc, #436]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	496a      	ldr	r1, [pc, #424]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ae:	4b65      	ldr	r3, [pc, #404]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	4961      	ldr	r1, [pc, #388]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039d0:	4b5c      	ldr	r3, [pc, #368]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039de:	4959      	ldr	r1, [pc, #356]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f2:	4b54      	ldr	r3, [pc, #336]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	4950      	ldr	r1, [pc, #320]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a14:	4b4b      	ldr	r3, [pc, #300]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	4948      	ldr	r1, [pc, #288]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a36:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	493f      	ldr	r1, [pc, #252]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d028      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a58:	4b3a      	ldr	r3, [pc, #232]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a66:	4937      	ldr	r1, [pc, #220]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a76:	d106      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a78:	4b32      	ldr	r3, [pc, #200]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a31      	ldr	r2, [pc, #196]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a82:	60d3      	str	r3, [r2, #12]
 8003a84:	e011      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f8c8 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d028      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ab6:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	491f      	ldr	r1, [pc, #124]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003adc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae0:	60d3      	str	r3, [r2, #12]
 8003ae2:	e011      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2101      	movs	r1, #1
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f899 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003afe:	7cfb      	ldrb	r3, [r7, #19]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d02b      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b22:	4908      	ldr	r1, [pc, #32]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b32:	d109      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a02      	ldr	r2, [pc, #8]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b3e:	60d3      	str	r3, [r2, #12]
 8003b40:	e014      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3304      	adds	r3, #4
 8003b56:	2101      	movs	r1, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 f867 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d02f      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b86:	4928      	ldr	r1, [pc, #160]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f844 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d014      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bae:	7cfb      	ldrb	r3, [r7, #19]
 8003bb0:	74bb      	strb	r3, [r7, #18]
 8003bb2:	e011      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3320      	adds	r3, #32
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f925 	bl	8003e14 <RCCEx_PLLSAI2_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003be4:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf2:	490d      	ldr	r1, [pc, #52]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c16:	4904      	ldr	r1, [pc, #16]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000

08003c2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c3a:	4b75      	ldr	r3, [pc, #468]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d018      	beq.n	8003c78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c46:	4b72      	ldr	r3, [pc, #456]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0203 	and.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d10d      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
       ||
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c5e:	4b6c      	ldr	r3, [pc, #432]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d047      	beq.n	8003d02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	e044      	b.n	8003d02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d018      	beq.n	8003cb2 <RCCEx_PLLSAI1_Config+0x86>
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d825      	bhi.n	8003cd0 <RCCEx_PLLSAI1_Config+0xa4>
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d002      	beq.n	8003c8e <RCCEx_PLLSAI1_Config+0x62>
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d009      	beq.n	8003ca0 <RCCEx_PLLSAI1_Config+0x74>
 8003c8c:	e020      	b.n	8003cd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c8e:	4b60      	ldr	r3, [pc, #384]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11d      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9e:	e01a      	b.n	8003cd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ca0:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d116      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb0:	e013      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cb2:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cbe:	4b54      	ldr	r3, [pc, #336]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cce:	e006      	b.n	8003cde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd4:	e004      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cde:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10d      	bne.n	8003d02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	4944      	ldr	r1, [pc, #272]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d17d      	bne.n	8003e04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d08:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a40      	ldr	r2, [pc, #256]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fc ff72 	bl	8000bfc <HAL_GetTick>
 8003d18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d1a:	e009      	b.n	8003d30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d1c:	f7fc ff6e 	bl	8000bfc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d902      	bls.n	8003d30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d2e:	e005      	b.n	8003d3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ef      	bne.n	8003d1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d160      	bne.n	8003e04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d111      	bne.n	8003d6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6892      	ldr	r2, [r2, #8]
 8003d58:	0211      	lsls	r1, r2, #8
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68d2      	ldr	r2, [r2, #12]
 8003d5e:	0912      	lsrs	r2, r2, #4
 8003d60:	0452      	lsls	r2, r2, #17
 8003d62:	430a      	orrs	r2, r1
 8003d64:	492a      	ldr	r1, [pc, #168]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	610b      	str	r3, [r1, #16]
 8003d6a:	e027      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d112      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6892      	ldr	r2, [r2, #8]
 8003d82:	0211      	lsls	r1, r2, #8
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6912      	ldr	r2, [r2, #16]
 8003d88:	0852      	lsrs	r2, r2, #1
 8003d8a:	3a01      	subs	r2, #1
 8003d8c:	0552      	lsls	r2, r2, #21
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	491f      	ldr	r1, [pc, #124]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	610b      	str	r3, [r1, #16]
 8003d96:	e011      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003da0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6892      	ldr	r2, [r2, #8]
 8003da8:	0211      	lsls	r1, r2, #8
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6952      	ldr	r2, [r2, #20]
 8003dae:	0852      	lsrs	r2, r2, #1
 8003db0:	3a01      	subs	r2, #1
 8003db2:	0652      	lsls	r2, r2, #25
 8003db4:	430a      	orrs	r2, r1
 8003db6:	4916      	ldr	r1, [pc, #88]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dbc:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fc ff18 	bl	8000bfc <HAL_GetTick>
 8003dcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dce:	e009      	b.n	8003de4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dd0:	f7fc ff14 	bl	8000bfc <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d902      	bls.n	8003de4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	73fb      	strb	r3, [r7, #15]
          break;
 8003de2:	e005      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ef      	beq.n	8003dd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	4904      	ldr	r1, [pc, #16]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000

08003e14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e22:	4b6a      	ldr	r3, [pc, #424]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d018      	beq.n	8003e60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e2e:	4b67      	ldr	r3, [pc, #412]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0203 	and.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d10d      	bne.n	8003e5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
       ||
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e46:	4b61      	ldr	r3, [pc, #388]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
       ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d047      	beq.n	8003eea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	e044      	b.n	8003eea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d018      	beq.n	8003e9a <RCCEx_PLLSAI2_Config+0x86>
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d825      	bhi.n	8003eb8 <RCCEx_PLLSAI2_Config+0xa4>
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d002      	beq.n	8003e76 <RCCEx_PLLSAI2_Config+0x62>
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d009      	beq.n	8003e88 <RCCEx_PLLSAI2_Config+0x74>
 8003e74:	e020      	b.n	8003eb8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e76:	4b55      	ldr	r3, [pc, #340]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11d      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e86:	e01a      	b.n	8003ebe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d116      	bne.n	8003ec2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e98:	e013      	b.n	8003ec2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e9a:	4b4c      	ldr	r3, [pc, #304]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ea6:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eb6:	e006      	b.n	8003ec6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e004      	b.n	8003ec8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ec6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10d      	bne.n	8003eea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ece:	4b3f      	ldr	r3, [pc, #252]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	4939      	ldr	r1, [pc, #228]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d167      	bne.n	8003fc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ef0:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a35      	ldr	r2, [pc, #212]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fc fe7e 	bl	8000bfc <HAL_GetTick>
 8003f00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f02:	e009      	b.n	8003f18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f04:	f7fc fe7a 	bl	8000bfc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d902      	bls.n	8003f18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	73fb      	strb	r3, [r7, #15]
        break;
 8003f16:	e005      	b.n	8003f24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f18:	4b2c      	ldr	r3, [pc, #176]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ef      	bne.n	8003f04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d14a      	bne.n	8003fc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d111      	bne.n	8003f54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f30:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	0211      	lsls	r1, r2, #8
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68d2      	ldr	r2, [r2, #12]
 8003f46:	0912      	lsrs	r2, r2, #4
 8003f48:	0452      	lsls	r2, r2, #17
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	491f      	ldr	r1, [pc, #124]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	614b      	str	r3, [r1, #20]
 8003f52:	e011      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f54:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6892      	ldr	r2, [r2, #8]
 8003f64:	0211      	lsls	r1, r2, #8
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6912      	ldr	r2, [r2, #16]
 8003f6a:	0852      	lsrs	r2, r2, #1
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	0652      	lsls	r2, r2, #25
 8003f70:	430a      	orrs	r2, r1
 8003f72:	4916      	ldr	r1, [pc, #88]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f78:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a13      	ldr	r2, [pc, #76]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fc fe3a 	bl	8000bfc <HAL_GetTick>
 8003f88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f8a:	e009      	b.n	8003fa0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f8c:	f7fc fe36 	bl	8000bfc <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d902      	bls.n	8003fa0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f9e:	e005      	b.n	8003fac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0ef      	beq.n	8003f8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	4904      	ldr	r1, [pc, #16]	; (8003fcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e040      	b.n	8004064 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc fcc6 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	; 0x24
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fae0 	bl	80045dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f825 	bl	800406c <UART_SetConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e01b      	b.n	8004064 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fb5f 	bl	8004720 <UART_CheckIdleState>
 8004062:	4603      	mov	r3, r0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800406c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004070:	b08a      	sub	sp, #40	; 0x28
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	431a      	orrs	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4313      	orrs	r3, r2
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4ba4      	ldr	r3, [pc, #656]	; (800432c <UART_SetConfig+0x2c0>)
 800409c:	4013      	ands	r3, r2
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a99      	ldr	r2, [pc, #612]	; (8004330 <UART_SetConfig+0x2c4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d4:	4313      	orrs	r3, r2
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e8:	430a      	orrs	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a90      	ldr	r2, [pc, #576]	; (8004334 <UART_SetConfig+0x2c8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d126      	bne.n	8004144 <UART_SetConfig+0xd8>
 80040f6:	4b90      	ldr	r3, [pc, #576]	; (8004338 <UART_SetConfig+0x2cc>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b03      	cmp	r3, #3
 8004102:	d81b      	bhi.n	800413c <UART_SetConfig+0xd0>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0xa0>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800411d 	.word	0x0800411d
 8004110:	0800412d 	.word	0x0800412d
 8004114:	08004125 	.word	0x08004125
 8004118:	08004135 	.word	0x08004135
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004122:	e116      	b.n	8004352 <UART_SetConfig+0x2e6>
 8004124:	2302      	movs	r3, #2
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800412a:	e112      	b.n	8004352 <UART_SetConfig+0x2e6>
 800412c:	2304      	movs	r3, #4
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004132:	e10e      	b.n	8004352 <UART_SetConfig+0x2e6>
 8004134:	2308      	movs	r3, #8
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413a:	e10a      	b.n	8004352 <UART_SetConfig+0x2e6>
 800413c:	2310      	movs	r3, #16
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004142:	e106      	b.n	8004352 <UART_SetConfig+0x2e6>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a7c      	ldr	r2, [pc, #496]	; (800433c <UART_SetConfig+0x2d0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d138      	bne.n	80041c0 <UART_SetConfig+0x154>
 800414e:	4b7a      	ldr	r3, [pc, #488]	; (8004338 <UART_SetConfig+0x2cc>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b0c      	cmp	r3, #12
 800415a:	d82d      	bhi.n	80041b8 <UART_SetConfig+0x14c>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <UART_SetConfig+0xf8>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004199 	.word	0x08004199
 8004168:	080041b9 	.word	0x080041b9
 800416c:	080041b9 	.word	0x080041b9
 8004170:	080041b9 	.word	0x080041b9
 8004174:	080041a9 	.word	0x080041a9
 8004178:	080041b9 	.word	0x080041b9
 800417c:	080041b9 	.word	0x080041b9
 8004180:	080041b9 	.word	0x080041b9
 8004184:	080041a1 	.word	0x080041a1
 8004188:	080041b9 	.word	0x080041b9
 800418c:	080041b9 	.word	0x080041b9
 8004190:	080041b9 	.word	0x080041b9
 8004194:	080041b1 	.word	0x080041b1
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419e:	e0d8      	b.n	8004352 <UART_SetConfig+0x2e6>
 80041a0:	2302      	movs	r3, #2
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a6:	e0d4      	b.n	8004352 <UART_SetConfig+0x2e6>
 80041a8:	2304      	movs	r3, #4
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e0d0      	b.n	8004352 <UART_SetConfig+0x2e6>
 80041b0:	2308      	movs	r3, #8
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e0cc      	b.n	8004352 <UART_SetConfig+0x2e6>
 80041b8:	2310      	movs	r3, #16
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041be:	e0c8      	b.n	8004352 <UART_SetConfig+0x2e6>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a5e      	ldr	r2, [pc, #376]	; (8004340 <UART_SetConfig+0x2d4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d125      	bne.n	8004216 <UART_SetConfig+0x1aa>
 80041ca:	4b5b      	ldr	r3, [pc, #364]	; (8004338 <UART_SetConfig+0x2cc>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041d4:	2b30      	cmp	r3, #48	; 0x30
 80041d6:	d016      	beq.n	8004206 <UART_SetConfig+0x19a>
 80041d8:	2b30      	cmp	r3, #48	; 0x30
 80041da:	d818      	bhi.n	800420e <UART_SetConfig+0x1a2>
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d00a      	beq.n	80041f6 <UART_SetConfig+0x18a>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d814      	bhi.n	800420e <UART_SetConfig+0x1a2>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <UART_SetConfig+0x182>
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d008      	beq.n	80041fe <UART_SetConfig+0x192>
 80041ec:	e00f      	b.n	800420e <UART_SetConfig+0x1a2>
 80041ee:	2300      	movs	r3, #0
 80041f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f4:	e0ad      	b.n	8004352 <UART_SetConfig+0x2e6>
 80041f6:	2302      	movs	r3, #2
 80041f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fc:	e0a9      	b.n	8004352 <UART_SetConfig+0x2e6>
 80041fe:	2304      	movs	r3, #4
 8004200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004204:	e0a5      	b.n	8004352 <UART_SetConfig+0x2e6>
 8004206:	2308      	movs	r3, #8
 8004208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420c:	e0a1      	b.n	8004352 <UART_SetConfig+0x2e6>
 800420e:	2310      	movs	r3, #16
 8004210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004214:	e09d      	b.n	8004352 <UART_SetConfig+0x2e6>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a4a      	ldr	r2, [pc, #296]	; (8004344 <UART_SetConfig+0x2d8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d125      	bne.n	800426c <UART_SetConfig+0x200>
 8004220:	4b45      	ldr	r3, [pc, #276]	; (8004338 <UART_SetConfig+0x2cc>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800422a:	2bc0      	cmp	r3, #192	; 0xc0
 800422c:	d016      	beq.n	800425c <UART_SetConfig+0x1f0>
 800422e:	2bc0      	cmp	r3, #192	; 0xc0
 8004230:	d818      	bhi.n	8004264 <UART_SetConfig+0x1f8>
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d00a      	beq.n	800424c <UART_SetConfig+0x1e0>
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d814      	bhi.n	8004264 <UART_SetConfig+0x1f8>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <UART_SetConfig+0x1d8>
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d008      	beq.n	8004254 <UART_SetConfig+0x1e8>
 8004242:	e00f      	b.n	8004264 <UART_SetConfig+0x1f8>
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424a:	e082      	b.n	8004352 <UART_SetConfig+0x2e6>
 800424c:	2302      	movs	r3, #2
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004252:	e07e      	b.n	8004352 <UART_SetConfig+0x2e6>
 8004254:	2304      	movs	r3, #4
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425a:	e07a      	b.n	8004352 <UART_SetConfig+0x2e6>
 800425c:	2308      	movs	r3, #8
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004262:	e076      	b.n	8004352 <UART_SetConfig+0x2e6>
 8004264:	2310      	movs	r3, #16
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426a:	e072      	b.n	8004352 <UART_SetConfig+0x2e6>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a35      	ldr	r2, [pc, #212]	; (8004348 <UART_SetConfig+0x2dc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d12a      	bne.n	80042cc <UART_SetConfig+0x260>
 8004276:	4b30      	ldr	r3, [pc, #192]	; (8004338 <UART_SetConfig+0x2cc>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004284:	d01a      	beq.n	80042bc <UART_SetConfig+0x250>
 8004286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800428a:	d81b      	bhi.n	80042c4 <UART_SetConfig+0x258>
 800428c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004290:	d00c      	beq.n	80042ac <UART_SetConfig+0x240>
 8004292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004296:	d815      	bhi.n	80042c4 <UART_SetConfig+0x258>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <UART_SetConfig+0x238>
 800429c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a0:	d008      	beq.n	80042b4 <UART_SetConfig+0x248>
 80042a2:	e00f      	b.n	80042c4 <UART_SetConfig+0x258>
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e052      	b.n	8004352 <UART_SetConfig+0x2e6>
 80042ac:	2302      	movs	r3, #2
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b2:	e04e      	b.n	8004352 <UART_SetConfig+0x2e6>
 80042b4:	2304      	movs	r3, #4
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e04a      	b.n	8004352 <UART_SetConfig+0x2e6>
 80042bc:	2308      	movs	r3, #8
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e046      	b.n	8004352 <UART_SetConfig+0x2e6>
 80042c4:	2310      	movs	r3, #16
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	e042      	b.n	8004352 <UART_SetConfig+0x2e6>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a17      	ldr	r2, [pc, #92]	; (8004330 <UART_SetConfig+0x2c4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d13a      	bne.n	800434c <UART_SetConfig+0x2e0>
 80042d6:	4b18      	ldr	r3, [pc, #96]	; (8004338 <UART_SetConfig+0x2cc>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e4:	d01a      	beq.n	800431c <UART_SetConfig+0x2b0>
 80042e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ea:	d81b      	bhi.n	8004324 <UART_SetConfig+0x2b8>
 80042ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f0:	d00c      	beq.n	800430c <UART_SetConfig+0x2a0>
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f6:	d815      	bhi.n	8004324 <UART_SetConfig+0x2b8>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <UART_SetConfig+0x298>
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d008      	beq.n	8004314 <UART_SetConfig+0x2a8>
 8004302:	e00f      	b.n	8004324 <UART_SetConfig+0x2b8>
 8004304:	2300      	movs	r3, #0
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e022      	b.n	8004352 <UART_SetConfig+0x2e6>
 800430c:	2302      	movs	r3, #2
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e01e      	b.n	8004352 <UART_SetConfig+0x2e6>
 8004314:	2304      	movs	r3, #4
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e01a      	b.n	8004352 <UART_SetConfig+0x2e6>
 800431c:	2308      	movs	r3, #8
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e016      	b.n	8004352 <UART_SetConfig+0x2e6>
 8004324:	2310      	movs	r3, #16
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e012      	b.n	8004352 <UART_SetConfig+0x2e6>
 800432c:	efff69f3 	.word	0xefff69f3
 8004330:	40008000 	.word	0x40008000
 8004334:	40013800 	.word	0x40013800
 8004338:	40021000 	.word	0x40021000
 800433c:	40004400 	.word	0x40004400
 8004340:	40004800 	.word	0x40004800
 8004344:	40004c00 	.word	0x40004c00
 8004348:	40005000 	.word	0x40005000
 800434c:	2310      	movs	r3, #16
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a9f      	ldr	r2, [pc, #636]	; (80045d4 <UART_SetConfig+0x568>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d17a      	bne.n	8004452 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800435c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004360:	2b08      	cmp	r3, #8
 8004362:	d824      	bhi.n	80043ae <UART_SetConfig+0x342>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <UART_SetConfig+0x300>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	08004391 	.word	0x08004391
 8004370:	080043af 	.word	0x080043af
 8004374:	08004399 	.word	0x08004399
 8004378:	080043af 	.word	0x080043af
 800437c:	0800439f 	.word	0x0800439f
 8004380:	080043af 	.word	0x080043af
 8004384:	080043af 	.word	0x080043af
 8004388:	080043af 	.word	0x080043af
 800438c:	080043a7 	.word	0x080043a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004390:	f7ff f8d6 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8004394:	61f8      	str	r0, [r7, #28]
        break;
 8004396:	e010      	b.n	80043ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004398:	4b8f      	ldr	r3, [pc, #572]	; (80045d8 <UART_SetConfig+0x56c>)
 800439a:	61fb      	str	r3, [r7, #28]
        break;
 800439c:	e00d      	b.n	80043ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439e:	f7ff f837 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80043a2:	61f8      	str	r0, [r7, #28]
        break;
 80043a4:	e009      	b.n	80043ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043aa:	61fb      	str	r3, [r7, #28]
        break;
 80043ac:	e005      	b.n	80043ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80fb 	beq.w	80045b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d305      	bcc.n	80043de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d903      	bls.n	80043e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043e4:	e0e8      	b.n	80045b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2200      	movs	r2, #0
 80043ea:	461c      	mov	r4, r3
 80043ec:	4615      	mov	r5, r2
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	022b      	lsls	r3, r5, #8
 80043f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043fc:	0222      	lsls	r2, r4, #8
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	6849      	ldr	r1, [r1, #4]
 8004402:	0849      	lsrs	r1, r1, #1
 8004404:	2000      	movs	r0, #0
 8004406:	4688      	mov	r8, r1
 8004408:	4681      	mov	r9, r0
 800440a:	eb12 0a08 	adds.w	sl, r2, r8
 800440e:	eb43 0b09 	adc.w	fp, r3, r9
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004420:	4650      	mov	r0, sl
 8004422:	4659      	mov	r1, fp
 8004424:	f7fb fed0 	bl	80001c8 <__aeabi_uldivmod>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4613      	mov	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004436:	d308      	bcc.n	800444a <UART_SetConfig+0x3de>
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800443e:	d204      	bcs.n	800444a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e0b6      	b.n	80045b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004450:	e0b2      	b.n	80045b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445a:	d15e      	bne.n	800451a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800445c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004460:	2b08      	cmp	r3, #8
 8004462:	d828      	bhi.n	80044b6 <UART_SetConfig+0x44a>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x400>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	08004491 	.word	0x08004491
 8004470:	08004499 	.word	0x08004499
 8004474:	080044a1 	.word	0x080044a1
 8004478:	080044b7 	.word	0x080044b7
 800447c:	080044a7 	.word	0x080044a7
 8004480:	080044b7 	.word	0x080044b7
 8004484:	080044b7 	.word	0x080044b7
 8004488:	080044b7 	.word	0x080044b7
 800448c:	080044af 	.word	0x080044af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7ff f856 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8004494:	61f8      	str	r0, [r7, #28]
        break;
 8004496:	e014      	b.n	80044c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004498:	f7ff f868 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 800449c:	61f8      	str	r0, [r7, #28]
        break;
 800449e:	e010      	b.n	80044c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a0:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <UART_SetConfig+0x56c>)
 80044a2:	61fb      	str	r3, [r7, #28]
        break;
 80044a4:	e00d      	b.n	80044c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a6:	f7fe ffb3 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80044aa:	61f8      	str	r0, [r7, #28]
        break;
 80044ac:	e009      	b.n	80044c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	61fb      	str	r3, [r7, #28]
        break;
 80044b4:	e005      	b.n	80044c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d077      	beq.n	80045b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	005a      	lsls	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	441a      	add	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b0f      	cmp	r3, #15
 80044e2:	d916      	bls.n	8004512 <UART_SetConfig+0x4a6>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ea:	d212      	bcs.n	8004512 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f023 030f 	bic.w	r3, r3, #15
 80044f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	b29a      	uxth	r2, r3
 8004502:	8afb      	ldrh	r3, [r7, #22]
 8004504:	4313      	orrs	r3, r2
 8004506:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	8afa      	ldrh	r2, [r7, #22]
 800450e:	60da      	str	r2, [r3, #12]
 8004510:	e052      	b.n	80045b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004518:	e04e      	b.n	80045b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800451a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800451e:	2b08      	cmp	r3, #8
 8004520:	d827      	bhi.n	8004572 <UART_SetConfig+0x506>
 8004522:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <UART_SetConfig+0x4bc>)
 8004524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004528:	0800454d 	.word	0x0800454d
 800452c:	08004555 	.word	0x08004555
 8004530:	0800455d 	.word	0x0800455d
 8004534:	08004573 	.word	0x08004573
 8004538:	08004563 	.word	0x08004563
 800453c:	08004573 	.word	0x08004573
 8004540:	08004573 	.word	0x08004573
 8004544:	08004573 	.word	0x08004573
 8004548:	0800456b 	.word	0x0800456b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800454c:	f7fe fff8 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8004550:	61f8      	str	r0, [r7, #28]
        break;
 8004552:	e014      	b.n	800457e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004554:	f7ff f80a 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 8004558:	61f8      	str	r0, [r7, #28]
        break;
 800455a:	e010      	b.n	800457e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <UART_SetConfig+0x56c>)
 800455e:	61fb      	str	r3, [r7, #28]
        break;
 8004560:	e00d      	b.n	800457e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004562:	f7fe ff55 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8004566:	61f8      	str	r0, [r7, #28]
        break;
 8004568:	e009      	b.n	800457e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456e:	61fb      	str	r3, [r7, #28]
        break;
 8004570:	e005      	b.n	800457e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800457c:	bf00      	nop
    }

    if (pclk != 0U)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d019      	beq.n	80045b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	085a      	lsrs	r2, r3, #1
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b0f      	cmp	r3, #15
 800459c:	d909      	bls.n	80045b2 <UART_SetConfig+0x546>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a4:	d205      	bcs.n	80045b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	e002      	b.n	80045b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3728      	adds	r7, #40	; 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d2:	bf00      	nop
 80045d4:	40008000 	.word	0x40008000
 80045d8:	00f42400 	.word	0x00f42400

080045dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01a      	beq.n	80046f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046da:	d10a      	bne.n	80046f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b098      	sub	sp, #96	; 0x60
 8004724:	af02      	add	r7, sp, #8
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004730:	f7fc fa64 	bl	8000bfc <HAL_GetTick>
 8004734:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b08      	cmp	r3, #8
 8004742:	d12e      	bne.n	80047a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474c:	2200      	movs	r2, #0
 800474e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f88c 	bl	8004870 <UART_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d021      	beq.n	80047a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004772:	653b      	str	r3, [r7, #80]	; 0x50
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477c:	647b      	str	r3, [r7, #68]	; 0x44
 800477e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e6      	bne.n	800475e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e062      	b.n	8004868 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d149      	bne.n	8004844 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b8:	2200      	movs	r2, #0
 80047ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f856 	bl	8004870 <UART_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03c      	beq.n	8004844 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	623b      	str	r3, [r7, #32]
   return(result);
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
 80047ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e6      	bne.n	80047ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3308      	adds	r3, #8
 8004802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	60fb      	str	r3, [r7, #12]
   return(result);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481c:	61fa      	str	r2, [r7, #28]
 800481e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	69b9      	ldr	r1, [r7, #24]
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	e841 2300 	strex	r3, r2, [r1]
 8004828:	617b      	str	r3, [r7, #20]
   return(result);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e5      	bne.n	80047fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e011      	b.n	8004868 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3758      	adds	r7, #88	; 0x58
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004880:	e049      	b.n	8004916 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d045      	beq.n	8004916 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fc f9b7 	bl	8000bfc <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e048      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d031      	beq.n	8004916 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d110      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2208      	movs	r2, #8
 80048c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f838 	bl	800493e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2208      	movs	r2, #8
 80048d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e029      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f0:	d111      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f81e 	bl	800493e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e00f      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4013      	ands	r3, r2
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	bf0c      	ite	eq
 8004926:	2301      	moveq	r3, #1
 8004928:	2300      	movne	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	429a      	cmp	r2, r3
 8004932:	d0a6      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800493e:	b480      	push	{r7}
 8004940:	b095      	sub	sp, #84	; 0x54
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	643b      	str	r3, [r7, #64]	; 0x40
 8004966:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800496a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e6      	bne.n	8004946 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3308      	adds	r3, #8
 800497e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	61fb      	str	r3, [r7, #28]
   return(result);
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800499e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e5      	bne.n	8004978 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d118      	bne.n	80049e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 0310 	bic.w	r3, r3, #16
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6979      	ldr	r1, [r7, #20]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	613b      	str	r3, [r7, #16]
   return(result);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e6      	bne.n	80049b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049fa:	bf00      	nop
 80049fc:	3754      	adds	r7, #84	; 0x54
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <memset>:
 8004a06:	4402      	add	r2, r0
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d100      	bne.n	8004a10 <memset+0xa>
 8004a0e:	4770      	bx	lr
 8004a10:	f803 1b01 	strb.w	r1, [r3], #1
 8004a14:	e7f9      	b.n	8004a0a <memset+0x4>
	...

08004a18 <__libc_init_array>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4d0d      	ldr	r5, [pc, #52]	; (8004a50 <__libc_init_array+0x38>)
 8004a1c:	4c0d      	ldr	r4, [pc, #52]	; (8004a54 <__libc_init_array+0x3c>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	2600      	movs	r6, #0
 8004a24:	42a6      	cmp	r6, r4
 8004a26:	d109      	bne.n	8004a3c <__libc_init_array+0x24>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	; (8004a58 <__libc_init_array+0x40>)
 8004a2a:	4c0c      	ldr	r4, [pc, #48]	; (8004a5c <__libc_init_array+0x44>)
 8004a2c:	f000 f818 	bl	8004a60 <_init>
 8004a30:	1b64      	subs	r4, r4, r5
 8004a32:	10a4      	asrs	r4, r4, #2
 8004a34:	2600      	movs	r6, #0
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	d105      	bne.n	8004a46 <__libc_init_array+0x2e>
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a40:	4798      	blx	r3
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7ee      	b.n	8004a24 <__libc_init_array+0xc>
 8004a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4a:	4798      	blx	r3
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	e7f2      	b.n	8004a36 <__libc_init_array+0x1e>
 8004a50:	08004ac8 	.word	0x08004ac8
 8004a54:	08004ac8 	.word	0x08004ac8
 8004a58:	08004ac8 	.word	0x08004ac8
 8004a5c:	08004acc 	.word	0x08004acc

08004a60 <_init>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	bf00      	nop
 8004a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a66:	bc08      	pop	{r3}
 8004a68:	469e      	mov	lr, r3
 8004a6a:	4770      	bx	lr

08004a6c <_fini>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	bf00      	nop
 8004a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a72:	bc08      	pop	{r3}
 8004a74:	469e      	mov	lr, r3
 8004a76:	4770      	bx	lr
