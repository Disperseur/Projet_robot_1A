
Projet_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007828  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080079b8  080079b8  000089b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a38  08007a38  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007a38  08007a38  00008a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a40  08007a40  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a40  08007a40  00008a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a44  08007a44  00008a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007a48  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000074  08007abc  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08007abc  0000938c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b85  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bb  00000000  00000000  0001ec29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  000215e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f35  00000000  00000000  00022950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d6d  00000000  00000000  00023885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016581  00000000  00000000  0004c5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105fc0  00000000  00000000  00062b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168b33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005864  00000000  00000000  00168b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0016e3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079a0 	.word	0x080079a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080079a0 	.word	0x080079a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 ff19 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f895 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fa85 	bl	8000a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000572:	f000 fa53 	bl	8000a1c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000576:	f000 f999 	bl	80008ac <MX_TIM2_Init>
  MX_TIM6_Init();
 800057a:	f000 fa19 	bl	80009b0 <MX_TIM6_Init>
  MX_ADC1_Init();
 800057e:	f000 f8dd 	bl	800073c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); //demarrage scan des leds toutes les 10ms
 8000582:	483c      	ldr	r0, [pc, #240]	@ (8000674 <main+0x114>)
 8000584:	f004 fabc 	bl	8004b00 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //demarrage pwm moteur Gauche
 8000588:	2100      	movs	r1, #0
 800058a:	483b      	ldr	r0, [pc, #236]	@ (8000678 <main+0x118>)
 800058c:	f004 fb8a 	bl	8004ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //demarrage pwm moteur Droit
 8000590:	210c      	movs	r1, #12
 8000592:	4839      	ldr	r0, [pc, #228]	@ (8000678 <main+0x118>)
 8000594:	f004 fb86 	bl	8004ca4 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(Cmde_DirD_GPIO_Port, Cmde_DirD_Pin, 1); // avancer ou reculer ?
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800059e:	4837      	ldr	r0, [pc, #220]	@ (800067c <main+0x11c>)
 80005a0:	f002 ff06 	bl	80033b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Cmde_DirG_GPIO_Port, Cmde_DirG_Pin, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2104      	movs	r1, #4
 80005a8:	4835      	ldr	r0, [pc, #212]	@ (8000680 <main+0x120>)
 80005aa:	f002 ff01 	bl	80033b0 <HAL_GPIO_WritePin>

  SENS_MOTEUR_DROIT_AVANCE;
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b4:	4831      	ldr	r0, [pc, #196]	@ (800067c <main+0x11c>)
 80005b6:	f002 fefb 	bl	80033b0 <HAL_GPIO_WritePin>
  SENS_MOTEUR_GAUCHE_AVANCE;
 80005ba:	2201      	movs	r2, #1
 80005bc:	2104      	movs	r1, #4
 80005be:	4830      	ldr	r0, [pc, #192]	@ (8000680 <main+0x120>)
 80005c0:	f002 fef6 	bl	80033b0 <HAL_GPIO_WritePin>
  ARRET_MOTEUR_DROIT;
 80005c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005c8:	2200      	movs	r2, #0
 80005ca:	641a      	str	r2, [r3, #64]	@ 0x40
  ARRET_MOTEUR_GAUCHE;
 80005cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d0:	2200      	movs	r2, #0
 80005d2:	635a      	str	r2, [r3, #52]	@ 0x34
  while (1)
  {
//	  HAL_GPIO_WritePin(Cmde_led_IR2_GPIO_Port, Cmde_led_IR2_Pin, 1);
//	  while(1);

	  while(!start) {
 80005d4:	e007      	b.n	80005e6 <main+0x86>
		  // tant que l'on n'appuie pas sur le bouton de demarrage
		  ARRET_MOTEUR_DROIT;
 80005d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005da:	2200      	movs	r2, #0
 80005dc:	641a      	str	r2, [r3, #64]	@ 0x40
		  ARRET_MOTEUR_GAUCHE;
 80005de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005e2:	2200      	movs	r2, #0
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34
	  while(!start) {
 80005e6:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <main+0x124>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0f2      	beq.n	80005d6 <main+0x76>

	  }

	  //surveillance batterie
	  if (Vbatt < SEUIL_VBATT) HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, 1);
 80005f0:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <main+0x128>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f640 1239 	movw	r2, #2361	@ 0x939
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d806      	bhi.n	800060a <main+0xaa>
 80005fc:	2201      	movs	r2, #1
 80005fe:	2120      	movs	r1, #32
 8000600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000604:	f002 fed4 	bl	80033b0 <HAL_GPIO_WritePin>
 8000608:	e005      	b.n	8000616 <main+0xb6>
	  else HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2120      	movs	r1, #32
 800060e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000612:	f002 fecd 	bl	80033b0 <HAL_GPIO_WritePin>

	  //affichage batterie en console
	  char message[10];
	  sprintf(message, "%d\n", Vbatt);
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <main+0x128>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	491b      	ldr	r1, [pc, #108]	@ (800068c <main+0x12c>)
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fd1e 	bl	8007060 <siprintf>
	  HAL_UART_Transmit(&huart2, (const uint8_t*)message, sizeof(message), HAL_MAX_DELAY);
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	220a      	movs	r2, #10
 800062c:	4818      	ldr	r0, [pc, #96]	@ (8000690 <main+0x130>)
 800062e:	f005 fc6b 	bl	8005f08 <HAL_UART_Transmit>

	  //avancer tout droit
	  SENS_MOTEUR_DROIT_AVANCE;
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000638:	4810      	ldr	r0, [pc, #64]	@ (800067c <main+0x11c>)
 800063a:	f002 feb9 	bl	80033b0 <HAL_GPIO_WritePin>
	  SENS_MOTEUR_GAUCHE_AVANCE;
 800063e:	2201      	movs	r2, #1
 8000640:	2104      	movs	r1, #4
 8000642:	480f      	ldr	r0, [pc, #60]	@ (8000680 <main+0x120>)
 8000644:	f002 feb4 	bl	80033b0 <HAL_GPIO_WritePin>
	  DEMARRAGE_MOTEUR_DROIT;
 8000648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800064c:	f245 02b5 	movw	r2, #20661	@ 0x50b5
 8000650:	641a      	str	r2, [r3, #64]	@ 0x40
	  DEMARRAGE_MOTEUR_GAUCHE;
 8000652:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000656:	f245 02b5 	movw	r2, #20661	@ 0x50b5
 800065a:	635a      	str	r2, [r3, #52]	@ 0x34


	  if (mesures_IR) {
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <main+0x134>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0b6      	beq.n	80005d4 <main+0x74>
		  //arret moteurs

		  //correction de trajectoire
		  correction_trajectoire();
 8000666:	f000 fbb3 	bl	8000dd0 <correction_trajectoire>
		  //HAL_Delay(100);

		  //remise a zéro des flags leds IR
		  mesures_IR = 0;
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <main+0x134>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
  {
 8000670:	e7b0      	b.n	80005d4 <main+0x74>
 8000672:	bf00      	nop
 8000674:	20000140 	.word	0x20000140
 8000678:	200000f4 	.word	0x200000f4
 800067c:	48000800 	.word	0x48000800
 8000680:	48000400 	.word	0x48000400
 8000684:	20000238 	.word	0x20000238
 8000688:	20000010 	.word	0x20000010
 800068c:	080079b8 	.word	0x080079b8
 8000690:	2000018c 	.word	0x2000018c
 8000694:	20000214 	.word	0x20000214

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	@ 0x58
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	@ 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fcfa 	bl	80070a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006be:	f002 feb5 	bl	800342c <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c8:	f000 fbe6 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	2310      	movs	r3, #16
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006de:	2302      	movs	r3, #2
 80006e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006e6:	230a      	movs	r3, #10
 80006e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 feec 	bl	80034d8 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000706:	f000 fbc7 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	2104      	movs	r1, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fab4 	bl	8003c90 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072e:	f000 fbb3 	bl	8000e98 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3758      	adds	r7, #88	@ 0x58
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800075e:	4b4c      	ldr	r3, [pc, #304]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000760:	4a4c      	ldr	r2, [pc, #304]	@ (8000894 <MX_ADC1_Init+0x158>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b4a      	ldr	r3, [pc, #296]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b49      	ldr	r3, [pc, #292]	@ (8000890 <MX_ADC1_Init+0x154>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b47      	ldr	r3, [pc, #284]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000776:	4b46      	ldr	r3, [pc, #280]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000778:	2201      	movs	r2, #1
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b44      	ldr	r3, [pc, #272]	@ (8000890 <MX_ADC1_Init+0x154>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b43      	ldr	r3, [pc, #268]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000788:	4b41      	ldr	r3, [pc, #260]	@ (8000890 <MX_ADC1_Init+0x154>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 800078e:	4b40      	ldr	r3, [pc, #256]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000790:	2205      	movs	r2, #5
 8000792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b3e      	ldr	r3, [pc, #248]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <MX_ADC1_Init+0x154>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000890 <MX_ADC1_Init+0x154>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a8:	4b39      	ldr	r3, [pc, #228]	@ (8000890 <MX_ADC1_Init+0x154>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <MX_ADC1_Init+0x154>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b6:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <MX_ADC1_Init+0x154>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007be:	4834      	ldr	r0, [pc, #208]	@ (8000890 <MX_ADC1_Init+0x154>)
 80007c0:	f001 f882 	bl	80018c8 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ca:	f000 fb65 	bl	8000e98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	482d      	ldr	r0, [pc, #180]	@ (8000890 <MX_ADC1_Init+0x154>)
 80007da:	f002 f9ff 	bl	8002bdc <HAL_ADCEx_MultiModeConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e4:	f000 fb58 	bl	8000e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <MX_ADC1_Init+0x15c>)
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ec:	2306      	movs	r3, #6
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80007f0:	2307      	movs	r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f4:	237f      	movs	r3, #127	@ 0x7f
 80007f6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f8:	2304      	movs	r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4822      	ldr	r0, [pc, #136]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000806:	f001 fd19 	bl	800223c <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000810:	f000 fb42 	bl	8000e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000814:	4b21      	ldr	r3, [pc, #132]	@ (800089c <MX_ADC1_Init+0x160>)
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000818:	230c      	movs	r3, #12
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000822:	f001 fd0b 	bl	800223c <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800082c:	f000 fb34 	bl	8000e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_ADC1_Init+0x164>)
 8000832:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000834:	2312      	movs	r3, #18
 8000836:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4814      	ldr	r0, [pc, #80]	@ (8000890 <MX_ADC1_Init+0x154>)
 800083e:	f001 fcfd 	bl	800223c <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000848:	f000 fb26 	bl	8000e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_ADC1_Init+0x168>)
 800084e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000850:	2318      	movs	r3, #24
 8000852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <MX_ADC1_Init+0x154>)
 800085a:	f001 fcef 	bl	800223c <HAL_ADC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000864:	f000 fb18 	bl	8000e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_ADC1_Init+0x16c>)
 800086a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800086c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_ADC1_Init+0x154>)
 8000878:	f001 fce0 	bl	800223c <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8000882:	f000 fb09 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000090 	.word	0x20000090
 8000894:	50040000 	.word	0x50040000
 8000898:	0c900008 	.word	0x0c900008
 800089c:	10c00010 	.word	0x10c00010
 80008a0:	43210000 	.word	0x43210000
 80008a4:	36902000 	.word	0x36902000
 80008a8:	3ac04000 	.word	0x3ac04000

080008ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	@ 0x38
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008de:	4b32      	ldr	r3, [pc, #200]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 80008e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80008e6:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b2e      	ldr	r3, [pc, #184]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000-1;
 80008f2:	4b2d      	ldr	r3, [pc, #180]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 80008f4:	4a2d      	ldr	r2, [pc, #180]	@ (80009ac <MX_TIM2_Init+0x100>)
 80008f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008fe:	4b2a      	ldr	r3, [pc, #168]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000904:	4828      	ldr	r0, [pc, #160]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 8000906:	f004 f8a3 	bl	8004a50 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000910:	f000 fac2 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800091e:	4619      	mov	r1, r3
 8000920:	4821      	ldr	r0, [pc, #132]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 8000922:	f004 fcdb 	bl	80052dc <HAL_TIM_ConfigClockSource>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800092c:	f000 fab4 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000930:	481d      	ldr	r0, [pc, #116]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 8000932:	f004 f955 	bl	8004be0 <HAL_TIM_PWM_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800093c:	f000 faac 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4816      	ldr	r0, [pc, #88]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 8000950:	f005 f9e6 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800095a:	f000 fa9d 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095e:	2360      	movs	r3, #96	@ 0x60
 8000960:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	2200      	movs	r2, #0
 8000972:	4619      	mov	r1, r3
 8000974:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 8000976:	f004 fb9d 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000980:	f000 fa8a 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	220c      	movs	r2, #12
 8000988:	4619      	mov	r1, r3
 800098a:	4807      	ldr	r0, [pc, #28]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 800098c:	f004 fb92 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000996:	f000 fa7f 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800099a:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <MX_TIM2_Init+0xfc>)
 800099c:	f000 fb74 	bl	8001088 <HAL_TIM_MspPostInit>

}
 80009a0:	bf00      	nop
 80009a2:	3738      	adds	r7, #56	@ 0x38
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000f4 	.word	0x200000f4
 80009ac:	0001387f 	.word	0x0001387f

080009b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_TIM6_Init+0x64>)
 80009c2:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <MX_TIM6_Init+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 13-1;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_TIM6_Init+0x64>)
 80009c8:	220c      	movs	r2, #12
 80009ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_TIM6_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 61538;
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_TIM6_Init+0x64>)
 80009d4:	f24f 0262 	movw	r2, #61538	@ 0xf062
 80009d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_TIM6_Init+0x64>)
 80009dc:	2280      	movs	r2, #128	@ 0x80
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009e0:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <MX_TIM6_Init+0x64>)
 80009e2:	f004 f835 	bl	8004a50 <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009ec:	f000 fa54 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_TIM6_Init+0x64>)
 80009fe:	f005 f98f 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 fa46 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000140 	.word	0x20000140
 8000a18:	40001000 	.word	0x40001000

08000a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a22:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <MX_USART2_UART_Init+0x5c>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a60:	f005 fa04 	bl	8005e6c <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 fa15 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000018c 	.word	0x2000018c
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b45      	ldr	r3, [pc, #276]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	4a44      	ldr	r2, [pc, #272]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9e:	4b42      	ldr	r3, [pc, #264]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4a3e      	ldr	r2, [pc, #248]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b39      	ldr	r3, [pc, #228]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	4a38      	ldr	r2, [pc, #224]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ace:	4b36      	ldr	r3, [pc, #216]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b33      	ldr	r3, [pc, #204]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a32      	ldr	r2, [pc, #200]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b30      	ldr	r3, [pc, #192]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alert_batt_Pin|Cmde_led_IR3_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afc:	f002 fc58 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Cmde_DirG_Pin|Cmde_led_IR1_Pin|Cmde_led_IR4_Pin|Cmde_led_IR2_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f24d 0104 	movw	r1, #53252	@ 0xd004
 8000b06:	4829      	ldr	r0, [pc, #164]	@ (8000bac <MX_GPIO_Init+0x130>)
 8000b08:	f002 fc52 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cmde_DirD_GPIO_Port, Cmde_DirD_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b12:	4827      	ldr	r0, [pc, #156]	@ (8000bb0 <MX_GPIO_Init+0x134>)
 8000b14:	f002 fc4c 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Start_btn_Pin */
  GPIO_InitStruct.Pin = Start_btn_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_btn_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4820      	ldr	r0, [pc, #128]	@ (8000bb0 <MX_GPIO_Init+0x134>)
 8000b30:	f002 fa94 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : Alert_batt_Pin Cmde_led_IR3_Pin */
  GPIO_InitStruct.Pin = Alert_batt_Pin|Cmde_led_IR3_Pin;
 8000b34:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b50:	f002 fa84 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cmde_DirG_Pin Cmde_led_IR1_Pin Cmde_led_IR4_Pin Cmde_led_IR2_Pin */
  GPIO_InitStruct.Pin = Cmde_DirG_Pin|Cmde_led_IR1_Pin|Cmde_led_IR4_Pin|Cmde_led_IR2_Pin;
 8000b54:	f24d 0304 	movw	r3, #53252	@ 0xd004
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480f      	ldr	r0, [pc, #60]	@ (8000bac <MX_GPIO_Init+0x130>)
 8000b6e:	f002 fa75 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cmde_DirD_Pin */
  GPIO_InitStruct.Pin = Cmde_DirD_Pin;
 8000b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Cmde_DirD_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <MX_GPIO_Init+0x134>)
 8000b8c:	f002 fa66 	bl	800305c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2028      	movs	r0, #40	@ 0x28
 8000b96:	f002 f9ac 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b9a:	2028      	movs	r0, #40	@ 0x28
 8000b9c:	f002 f9c5 	bl	8002f2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	@ 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48000800 	.word	0x48000800

08000bb4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Start_btn_Pin) start ^= 1; //depart arret du robot
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bc4:	d107      	bne.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x22>
 8000bc6:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	f083 0301 	eor.w	r3, r3, #1
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000238 	.word	0x20000238

08000be8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a34      	ldr	r2, [pc, #208]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d161      	bne.n	8000cbc <HAL_TIM_PeriodElapsedCallback+0xd4>
		//callback machine d'etat
		switch (etat_courant) {
 8000bf8:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d858      	bhi.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8000c02:	a201      	add	r2, pc, #4	@ (adr r2, 8000c08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000c19 	.word	0x08000c19
 8000c0c:	08000c53 	.word	0x08000c53
 8000c10:	08000c67 	.word	0x08000c67
 8000c14:	08000ca1 	.word	0x08000ca1

			case ETEINDRE_LEDS:
				HAL_GPIO_WritePin(Cmde_led_IR1_GPIO_Port, Cmde_led_IR1_Pin, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1e:	482b      	ldr	r0, [pc, #172]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c20:	f002 fbc6 	bl	80033b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Cmde_led_IR2_GPIO_Port, Cmde_led_IR2_Pin, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c2a:	4828      	ldr	r0, [pc, #160]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c2c:	f002 fbc0 	bl	80033b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Cmde_led_IR3_GPIO_Port, Cmde_led_IR3_Pin, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3a:	f002 fbb9 	bl	80033b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Cmde_led_IR4_GPIO_Port, Cmde_led_IR4_Pin, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c44:	4821      	ldr	r0, [pc, #132]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c46:	f002 fbb3 	bl	80033b0 <HAL_GPIO_WritePin>

				etat_courant = BLANC;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
				break;
 8000c50:	e034      	b.n	8000cbc <HAL_TIM_PeriodElapsedCallback+0xd4>


			case BLANC:
				flag_blanc = 1;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 8000c58:	481e      	ldr	r0, [pc, #120]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000c5a:	f000 ff85 	bl	8001b68 <HAL_ADC_Start_IT>

				etat_courant = ALLUMER_LEDS;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	701a      	strb	r2, [r3, #0]
				break;
 8000c64:	e02a      	b.n	8000cbc <HAL_TIM_PeriodElapsedCallback+0xd4>



			case ALLUMER_LEDS:
				HAL_GPIO_WritePin(Cmde_led_IR1_GPIO_Port, Cmde_led_IR1_Pin, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6c:	4817      	ldr	r0, [pc, #92]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c6e:	f002 fb9f 	bl	80033b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Cmde_led_IR2_GPIO_Port, Cmde_led_IR2_Pin, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c78:	4814      	ldr	r0, [pc, #80]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c7a:	f002 fb99 	bl	80033b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Cmde_led_IR3_GPIO_Port, Cmde_led_IR3_Pin, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c88:	f002 fb92 	bl	80033b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Cmde_led_IR4_GPIO_Port, Cmde_led_IR4_Pin, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c92:	480e      	ldr	r0, [pc, #56]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c94:	f002 fb8c 	bl	80033b0 <HAL_GPIO_WritePin>

				etat_courant = MESURES;
 8000c98:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	701a      	strb	r2, [r3, #0]
				break;
 8000c9e:	e00d      	b.n	8000cbc <HAL_TIM_PeriodElapsedCallback+0xd4>



			case MESURES:
				flag_blanc = 0;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 8000ca6:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000ca8:	f000 ff5e 	bl	8001b68 <HAL_ADC_Start_IT>

				etat_courant = ETEINDRE_LEDS;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
				break;
 8000cb2:	e003      	b.n	8000cbc <HAL_TIM_PeriodElapsedCallback+0xd4>



			default:
				etat_courant = ETEINDRE_LEDS;
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
				break;
 8000cba:	bf00      	nop
		}
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000140 	.word	0x20000140
 8000cc8:	20000014 	.word	0x20000014
 8000ccc:	48000400 	.word	0x48000400
 8000cd0:	20000216 	.word	0x20000216
 8000cd4:	20000090 	.word	0x20000090

08000cd8 <HAL_ADC_ConvCpltCallback>:



//gestion des mesures
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a33      	ldr	r2, [pc, #204]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d15e      	bne.n	8000da6 <HAL_ADC_ConvCpltCallback+0xce>
		if (nb_conv < 4) {
 8000ce8:	4b32      	ldr	r3, [pc, #200]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d850      	bhi.n	8000d94 <HAL_ADC_ConvCpltCallback+0xbc>
			// scans des leds IR
			if (flag_blanc) {
 8000cf2:	4b31      	ldr	r3, [pc, #196]	@ (8000db8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00b      	beq.n	8000d14 <HAL_ADC_ConvCpltCallback+0x3c>
				blancs[nb_conv] = HAL_ADC_GetValue(&hadc1); //mesure du blanc
 8000cfc:	482c      	ldr	r0, [pc, #176]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000cfe:	f001 f861 	bl	8001dc4 <HAL_ADC_GetValue>
 8000d02:	4601      	mov	r1, r0
 8000d04:	4b2b      	ldr	r3, [pc, #172]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0xe4>)
 8000d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000d12:	e037      	b.n	8000d84 <HAL_ADC_ConvCpltCallback+0xac>
			}
			else {
				tbl_detection[nb_conv] = HAL_ADC_GetValue(&hadc1) - blancs[nb_conv]; //debug
 8000d14:	4826      	ldr	r0, [pc, #152]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000d16:	f001 f855 	bl	8001dc4 <HAL_ADC_GetValue>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a25      	ldr	r2, [pc, #148]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d1e:	7812      	ldrb	r2, [r2, #0]
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	4611      	mov	r1, r2
 8000d24:	4a25      	ldr	r2, [pc, #148]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0xe4>)
 8000d26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000d2a:	1a99      	subs	r1, r3, r2
 8000d2c:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				if ( (HAL_ADC_GetValue(&hadc1) - blancs[nb_conv]) < seuils_detection[nb_conv] ) {
 8000d3a:	481d      	ldr	r0, [pc, #116]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000d3c:	f001 f842 	bl	8001dc4 <HAL_ADC_GetValue>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0xe4>)
 8000d4c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000d50:	1a9b      	subs	r3, r3, r2
 8000d52:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0xec>)
 8000d5c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d20f      	bcs.n	8000d84 <HAL_ADC_ConvCpltCallback+0xac>
					mesures_IR |= 1 << nb_conv; //activation du flag
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	4093      	lsls	r3, r2
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000d82:	701a      	strb	r2, [r3, #0]
				}
			}


			nb_conv++;
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d90:	701a      	strb	r2, [r3, #0]
			//scan de la batterie
			Vbatt = HAL_ADC_GetValue(&hadc1);
			nb_conv = 0;
		}
	}
}
 8000d92:	e008      	b.n	8000da6 <HAL_ADC_ConvCpltCallback+0xce>
			Vbatt = HAL_ADC_GetValue(&hadc1);
 8000d94:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000d96:	f001 f815 	bl	8001dc4 <HAL_ADC_GetValue>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <HAL_ADC_ConvCpltCallback+0xf4>)
 8000d9e:	6013      	str	r3, [r2, #0]
			nb_conv = 0;
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000090 	.word	0x20000090
 8000db4:	20000215 	.word	0x20000215
 8000db8:	20000216 	.word	0x20000216
 8000dbc:	20000218 	.word	0x20000218
 8000dc0:	20000228 	.word	0x20000228
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000214 	.word	0x20000214
 8000dcc:	20000010 	.word	0x20000010

08000dd0 <correction_trajectoire>:



// fonction de correction de trajectoire
void correction_trajectoire(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	switch (mesures_IR) {
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <correction_trajectoire+0xbc>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b0d      	cmp	r3, #13
 8000ddc:	d02a      	beq.n	8000e34 <correction_trajectoire+0x64>
 8000dde:	2b0e      	cmp	r3, #14
 8000de0:	d151      	bne.n	8000e86 <correction_trajectoire+0xb6>
		case 0b1110:

			ARRET_MOTEUR_DROIT;
 8000de2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000de6:	2200      	movs	r2, #0
 8000de8:	641a      	str	r2, [r3, #64]	@ 0x40
			ARRET_MOTEUR_GAUCHE;
 8000dea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dee:	2200      	movs	r2, #0
 8000df0:	635a      	str	r2, [r3, #52]	@ 0x34

			// tourne a droite

			SENS_MOTEUR_DROIT_RECULE;
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df8:	4825      	ldr	r0, [pc, #148]	@ (8000e90 <correction_trajectoire+0xc0>)
 8000dfa:	f002 fad9 	bl	80033b0 <HAL_GPIO_WritePin>
			SENS_MOTEUR_GAUCHE_AVANCE;
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2104      	movs	r1, #4
 8000e02:	4824      	ldr	r0, [pc, #144]	@ (8000e94 <correction_trajectoire+0xc4>)
 8000e04:	f002 fad4 	bl	80033b0 <HAL_GPIO_WritePin>

			DEMARRAGE_MOTEUR_DROIT;
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e0c:	f245 02b5 	movw	r2, #20661	@ 0x50b5
 8000e10:	641a      	str	r2, [r3, #64]	@ 0x40
			DEMARRAGE_MOTEUR_GAUCHE;
 8000e12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e16:	f245 02b5 	movw	r2, #20661	@ 0x50b5
 8000e1a:	635a      	str	r2, [r3, #52]	@ 0x34

			HAL_Delay(200);
 8000e1c:	20c8      	movs	r0, #200	@ 0xc8
 8000e1e:	f000 fb39 	bl	8001494 <HAL_Delay>

			ARRET_MOTEUR_DROIT;
 8000e22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e26:	2200      	movs	r2, #0
 8000e28:	641a      	str	r2, [r3, #64]	@ 0x40
			ARRET_MOTEUR_GAUCHE;
 8000e2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e2e:	2200      	movs	r2, #0
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34



			break;
 8000e32:	e029      	b.n	8000e88 <correction_trajectoire+0xb8>

		case 0b1101:
			ARRET_MOTEUR_DROIT;
 8000e34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e38:	2200      	movs	r2, #0
 8000e3a:	641a      	str	r2, [r3, #64]	@ 0x40
			ARRET_MOTEUR_GAUCHE;
 8000e3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e40:	2200      	movs	r2, #0
 8000e42:	635a      	str	r2, [r3, #52]	@ 0x34

			// tourne a gauche
			SENS_MOTEUR_DROIT_AVANCE;
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e4a:	4811      	ldr	r0, [pc, #68]	@ (8000e90 <correction_trajectoire+0xc0>)
 8000e4c:	f002 fab0 	bl	80033b0 <HAL_GPIO_WritePin>
			SENS_MOTEUR_GAUCHE_RECULE;
 8000e50:	2200      	movs	r2, #0
 8000e52:	2104      	movs	r1, #4
 8000e54:	480f      	ldr	r0, [pc, #60]	@ (8000e94 <correction_trajectoire+0xc4>)
 8000e56:	f002 faab 	bl	80033b0 <HAL_GPIO_WritePin>

			DEMARRAGE_MOTEUR_DROIT;
 8000e5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e5e:	f245 02b5 	movw	r2, #20661	@ 0x50b5
 8000e62:	641a      	str	r2, [r3, #64]	@ 0x40
			DEMARRAGE_MOTEUR_GAUCHE;
 8000e64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e68:	f245 02b5 	movw	r2, #20661	@ 0x50b5
 8000e6c:	635a      	str	r2, [r3, #52]	@ 0x34

			HAL_Delay(200);
 8000e6e:	20c8      	movs	r0, #200	@ 0xc8
 8000e70:	f000 fb10 	bl	8001494 <HAL_Delay>

			ARRET_MOTEUR_DROIT;
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e78:	2200      	movs	r2, #0
 8000e7a:	641a      	str	r2, [r3, #64]	@ 0x40
			ARRET_MOTEUR_GAUCHE;
 8000e7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e80:	2200      	movs	r2, #0
 8000e82:	635a      	str	r2, [r3, #52]	@ 0x34


			break;
 8000e84:	e000      	b.n	8000e88 <correction_trajectoire+0xb8>



		default:
			//HAL_Delay(1000);
			break;
 8000e86:	bf00      	nop
	}
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000214 	.word	0x20000214
 8000e90:	48000800 	.word	0x48000800
 8000e94:	48000400 	.word	0x48000400

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <Error_Handler+0x8>

08000ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0ac      	sub	sp, #176	@ 0xb0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2288      	movs	r2, #136	@ 0x88
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f006 f8c7 	bl	80070a0 <memset>
  if(hadc->Instance==ADC1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a38      	ldr	r2, [pc, #224]	@ (8000ff8 <HAL_ADC_MspInit+0x10c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d169      	bne.n	8000ff0 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f20:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f32:	2308      	movs	r3, #8
 8000f34:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f36:	2307      	movs	r3, #7
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 f8c3 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000f58:	f7ff ff9e 	bl	8000e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f60:	4a26      	ldr	r2, [pc, #152]	@ (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f78:	4a20      	ldr	r2, [pc, #128]	@ (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f90:	4a1a      	ldr	r2, [pc, #104]	@ (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <HAL_ADC_MspInit+0x110>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fa4:	233c      	movs	r3, #60	@ 0x3c
 8000fa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000faa:	230b      	movs	r3, #11
 8000fac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4810      	ldr	r0, [pc, #64]	@ (8001000 <HAL_ADC_MspInit+0x114>)
 8000fbe:	f002 f84d 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fc8:	230b      	movs	r3, #11
 8000fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480a      	ldr	r0, [pc, #40]	@ (8001004 <HAL_ADC_MspInit+0x118>)
 8000fdc:	f002 f83e 	bl	800305c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2012      	movs	r0, #18
 8000fe6:	f001 ff84 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fea:	2012      	movs	r0, #18
 8000fec:	f001 ff9d 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	37b0      	adds	r7, #176	@ 0xb0
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	50040000 	.word	0x50040000
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000800 	.word	0x48000800
 8001004:	48000400 	.word	0x48000400

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001018:	d114      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_TIM_Base_MspInit+0x78>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	4a18      	ldr	r2, [pc, #96]	@ (8001080 <HAL_TIM_Base_MspInit+0x78>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6593      	str	r3, [r2, #88]	@ 0x58
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <HAL_TIM_Base_MspInit+0x78>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	201c      	movs	r0, #28
 8001038:	f001 ff5b 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103c:	201c      	movs	r0, #28
 800103e:	f001 ff74 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001042:	e018      	b.n	8001076 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <HAL_TIM_Base_MspInit+0x7c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d113      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <HAL_TIM_Base_MspInit+0x78>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <HAL_TIM_Base_MspInit+0x78>)
 8001054:	f043 0310 	orr.w	r3, r3, #16
 8001058:	6593      	str	r3, [r2, #88]	@ 0x58
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <HAL_TIM_Base_MspInit+0x78>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2036      	movs	r0, #54	@ 0x36
 800106c:	f001 ff41 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001070:	2036      	movs	r0, #54	@ 0x36
 8001072:	f001 ff5a 	bl	8002f2a <HAL_NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	40001000 	.word	0x40001000

08001088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010a8:	d13a      	bne.n	8001120 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <HAL_TIM_MspPostInit+0xa0>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <HAL_TIM_MspPostInit+0xa0>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <HAL_TIM_MspPostInit+0xa0>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <HAL_TIM_MspPostInit+0xa0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <HAL_TIM_MspPostInit+0xa0>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <HAL_TIM_MspPostInit+0xa0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ec:	2301      	movs	r3, #1
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <HAL_TIM_MspPostInit+0xa4>)
 80010f8:	f001 ffb0 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800110e:	2301      	movs	r3, #1
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111c:	f001 ff9e 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	@ 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000
 800112c:	48000400 	.word	0x48000400

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ac      	sub	sp, #176	@ 0xb0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2288      	movs	r2, #136	@ 0x88
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f005 ffa5 	bl	80070a0 <memset>
  if(huart->Instance==USART2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a25      	ldr	r2, [pc, #148]	@ (80011f0 <HAL_UART_MspInit+0xc0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d143      	bne.n	80011e8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001164:	2300      	movs	r3, #0
 8001166:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f002 ffb3 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001178:	f7ff fe8e 	bl	8000e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800117c:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <HAL_UART_MspInit+0xc4>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	4a1c      	ldr	r2, [pc, #112]	@ (80011f4 <HAL_UART_MspInit+0xc4>)
 8001182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001186:	6593      	str	r3, [r2, #88]	@ 0x58
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <HAL_UART_MspInit+0xc4>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <HAL_UART_MspInit+0xc4>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	4a16      	ldr	r2, [pc, #88]	@ (80011f4 <HAL_UART_MspInit+0xc4>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_UART_MspInit+0xc4>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ac:	230c      	movs	r3, #12
 80011ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c4:	2307      	movs	r3, #7
 80011c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d4:	f001 ff42 	bl	800305c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2026      	movs	r0, #38	@ 0x26
 80011de:	f001 fe88 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011e2:	2026      	movs	r0, #38	@ 0x26
 80011e4:	f001 fea1 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	37b0      	adds	r7, #176	@ 0xb0
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40004400 	.word	0x40004400
 80011f4:	40021000 	.word	0x40021000

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <NMI_Handler+0x4>

08001200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <MemManage_Handler+0x4>

08001210 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <UsageFault_Handler+0x4>

08001220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124e:	f000 f901 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <ADC1_2_IRQHandler+0x10>)
 800125e:	f000 fdbf 	bl	8001de0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000090 	.word	0x20000090

0800126c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <TIM2_IRQHandler+0x10>)
 8001272:	f003 fe1d 	bl	8004eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000f4 	.word	0x200000f4

08001280 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <USART2_IRQHandler+0x10>)
 8001286:	f004 fec9 	bl	800601c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000018c 	.word	0x2000018c

08001294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Start_btn_Pin);
 8001298:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800129c:	f002 f8a0 	bl	80033e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <TIM6_DAC_IRQHandler+0x10>)
 80012aa:	f003 fe01 	bl	8004eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000140 	.word	0x20000140

080012b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c0:	4a14      	ldr	r2, [pc, #80]	@ (8001314 <_sbrk+0x5c>)
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <_sbrk+0x60>)
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <_sbrk+0x64>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <_sbrk+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e8:	f005 fee2 	bl	80070b0 <__errno>
 80012ec:	4603      	mov	r3, r0
 80012ee:	220c      	movs	r2, #12
 80012f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	e009      	b.n	800130c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a05      	ldr	r2, [pc, #20]	@ (800131c <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20018000 	.word	0x20018000
 8001318:	00000400 	.word	0x00000400
 800131c:	2000023c 	.word	0x2000023c
 8001320:	20000390 	.word	0x20000390

08001324 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <SystemInit+0x20>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <SystemInit+0x20>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800134c:	f7ff ffea 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LoopForever+0x6>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <LoopForever+0xe>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	@ (8001394 <LoopForever+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f005 fea1 	bl	80070bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137a:	f7ff f8f1 	bl	8000560 <main>

0800137e <LoopForever>:

LoopForever:
    b LoopForever
 800137e:	e7fe      	b.n	800137e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001380:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800138c:	08007a48 	.word	0x08007a48
  ldr r2, =_sbss
 8001390:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001394:	2000038c 	.word	0x2000038c

08001398 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC3_IRQHandler>
	...

0800139c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <HAL_Init+0x3c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_Init+0x3c>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f001 fd92 	bl	8002edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f80f 	bl	80013dc <HAL_InitTick>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	e001      	b.n	80013ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013ca:	f7ff fd6b 	bl	8000ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <HAL_InitTick+0x6c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d023      	beq.n	8001438 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <HAL_InitTick+0x70>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <HAL_InitTick+0x6c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fd9d 	bl	8002f46 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10f      	bne.n	8001432 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d809      	bhi.n	800142c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f001 fd67 	bl	8002ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001424:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <HAL_InitTick+0x74>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e007      	b.n	800143c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	e004      	b.n	800143c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e001      	b.n	800143c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000020 	.word	0x20000020
 800144c:	20000018 	.word	0x20000018
 8001450:	2000001c 	.word	0x2000001c

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000020 	.word	0x20000020
 8001478:	20000240 	.word	0x20000240

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000240 	.word	0x20000240

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000020 	.word	0x20000020

080014dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	609a      	str	r2, [r3, #8]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3360      	adds	r3, #96	@ 0x60
 8001556:	461a      	mov	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <LL_ADC_SetOffset+0x44>)
 8001566:	4013      	ands	r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	4313      	orrs	r3, r2
 8001574:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	03fff000 	.word	0x03fff000

0800158c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3360      	adds	r3, #96	@ 0x60
 800159a:	461a      	mov	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3360      	adds	r3, #96	@ 0x60
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3330      	adds	r3, #48	@ 0x30
 8001624:	461a      	mov	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	4413      	add	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	211f      	movs	r1, #31
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	401a      	ands	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	0e9b      	lsrs	r3, r3, #26
 800164c:	f003 011f 	and.w	r1, r3, #31
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	431a      	orrs	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001660:	bf00      	nop
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001678:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001692:	b480      	push	{r7}
 8001694:	b087      	sub	sp, #28
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3314      	adds	r3, #20
 80016a2:	461a      	mov	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	0e5b      	lsrs	r3, r3, #25
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	0d1b      	lsrs	r3, r3, #20
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	2107      	movs	r1, #7
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	401a      	ands	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	0d1b      	lsrs	r3, r3, #20
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	431a      	orrs	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016dc:	bf00      	nop
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001700:	43db      	mvns	r3, r3
 8001702:	401a      	ands	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0318 	and.w	r3, r3, #24
 800170a:	4908      	ldr	r1, [pc, #32]	@ (800172c <LL_ADC_SetChannelSingleDiff+0x44>)
 800170c:	40d9      	lsrs	r1, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	400b      	ands	r3, r1
 8001712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001716:	431a      	orrs	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	0007ffff 	.word	0x0007ffff

08001730 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 031f 	and.w	r3, r3, #31
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001778:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6093      	str	r3, [r2, #8]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800179c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017a0:	d101      	bne.n	80017a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80017c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017f0:	d101      	bne.n	80017f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001814:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <LL_ADC_IsEnabled+0x18>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <LL_ADC_IsEnabled+0x1a>
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001862:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001866:	f043 0204 	orr.w	r2, r3, #4
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b04      	cmp	r3, #4
 800188c:	d101      	bne.n	8001892 <LL_ADC_REG_IsConversionOngoing+0x18>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d101      	bne.n	80018b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e130      	b.n	8001b44 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fafb 	bl	8000eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff3f 	bl	800178c <LL_ADC_IsDeepPowerDownEnabled>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d004      	beq.n	800191e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff25 	bl	8001768 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff5a 	bl	80017dc <LL_ADC_IsInternalRegulatorEnabled>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d115      	bne.n	800195a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff3e 	bl	80017b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001938:	4b84      	ldr	r3, [pc, #528]	@ (8001b4c <HAL_ADC_Init+0x284>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	099b      	lsrs	r3, r3, #6
 800193e:	4a84      	ldr	r2, [pc, #528]	@ (8001b50 <HAL_ADC_Init+0x288>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	3301      	adds	r3, #1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800194c:	e002      	b.n	8001954 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3b01      	subs	r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f9      	bne.n	800194e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff3c 	bl	80017dc <LL_ADC_IsInternalRegulatorEnabled>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10d      	bne.n	8001986 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196e:	f043 0210 	orr.w	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff75 	bl	800187a <LL_ADC_REG_IsConversionOngoing>
 8001990:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 80c9 	bne.w	8001b32 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 80c5 	bne.w	8001b32 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019b0:	f043 0202 	orr.w	r2, r3, #2
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff35 	bl	800182c <LL_ADC_IsEnabled>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d115      	bne.n	80019f4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019c8:	4862      	ldr	r0, [pc, #392]	@ (8001b54 <HAL_ADC_Init+0x28c>)
 80019ca:	f7ff ff2f 	bl	800182c <LL_ADC_IsEnabled>
 80019ce:	4604      	mov	r4, r0
 80019d0:	4861      	ldr	r0, [pc, #388]	@ (8001b58 <HAL_ADC_Init+0x290>)
 80019d2:	f7ff ff2b 	bl	800182c <LL_ADC_IsEnabled>
 80019d6:	4603      	mov	r3, r0
 80019d8:	431c      	orrs	r4, r3
 80019da:	4860      	ldr	r0, [pc, #384]	@ (8001b5c <HAL_ADC_Init+0x294>)
 80019dc:	f7ff ff26 	bl	800182c <LL_ADC_IsEnabled>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4323      	orrs	r3, r4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4619      	mov	r1, r3
 80019ee:	485c      	ldr	r0, [pc, #368]	@ (8001b60 <HAL_ADC_Init+0x298>)
 80019f0:	f7ff fd74 	bl	80014dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e5b      	ldrb	r3, [r3, #25]
 80019f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a04:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a0a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a12:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d106      	bne.n	8001a30 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	3b01      	subs	r3, #1
 8001a28:	045b      	lsls	r3, r3, #17
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	4b44      	ldr	r3, [pc, #272]	@ (8001b64 <HAL_ADC_Init+0x29c>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff1b 	bl	80018a0 <LL_ADC_INJ_IsConversionOngoing>
 8001a6a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d13d      	bne.n	8001aee <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d13a      	bne.n	8001aee <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a7c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a84:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a94:	f023 0302 	bic.w	r3, r3, #2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	69b9      	ldr	r1, [r7, #24]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d118      	bne.n	8001ade <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ac2:	4311      	orrs	r1, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ac8:	4311      	orrs	r1, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	611a      	str	r2, [r3, #16]
 8001adc:	e007      	b.n	8001aee <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d10c      	bne.n	8001b10 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	f023 010f 	bic.w	r1, r3, #15
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	1e5a      	subs	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b0e:	e007      	b.n	8001b20 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 020f 	bic.w	r2, r2, #15
 8001b1e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b24:	f023 0303 	bic.w	r3, r3, #3
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b30:	e007      	b.n	8001b42 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b36:	f043 0210 	orr.w	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3724      	adds	r7, #36	@ 0x24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	20000018 	.word	0x20000018
 8001b50:	053e2d63 	.word	0x053e2d63
 8001b54:	50040000 	.word	0x50040000
 8001b58:	50040100 	.word	0x50040100
 8001b5c:	50040200 	.word	0x50040200
 8001b60:	50040300 	.word	0x50040300
 8001b64:	fff0c007 	.word	0xfff0c007

08001b68 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b70:	4891      	ldr	r0, [pc, #580]	@ (8001db8 <HAL_ADC_Start_IT+0x250>)
 8001b72:	f7ff fddd 	bl	8001730 <LL_ADC_GetMultimode>
 8001b76:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fe7c 	bl	800187a <LL_ADC_REG_IsConversionOngoing>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 8110 	bne.w	8001daa <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_Start_IT+0x30>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e10b      	b.n	8001db0 <HAL_ADC_Start_IT+0x248>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 ff3d 	bl	8002a20 <ADC_Enable>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 80f7 	bne.w	8001da0 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7c      	ldr	r2, [pc, #496]	@ (8001dbc <HAL_ADC_Start_IT+0x254>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d002      	beq.n	8001bd6 <HAL_ADC_Start_IT+0x6e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	e000      	b.n	8001bd8 <HAL_ADC_Start_IT+0x70>
 8001bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8001dc0 <HAL_ADC_Start_IT+0x258>)
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d002      	beq.n	8001be6 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	f023 0206 	bic.w	r2, r3, #6
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c0a:	e002      	b.n	8001c12 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	221c      	movs	r2, #28
 8001c18:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 021c 	bic.w	r2, r2, #28
 8001c30:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d108      	bne.n	8001c4c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0208 	orr.w	r2, r2, #8
 8001c48:	605a      	str	r2, [r3, #4]
          break;
 8001c4a:	e008      	b.n	8001c5e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0204 	orr.w	r2, r2, #4
 8001c5a:	605a      	str	r2, [r3, #4]
          break;
 8001c5c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d107      	bne.n	8001c76 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0210 	orr.w	r2, r2, #16
 8001c74:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a50      	ldr	r2, [pc, #320]	@ (8001dbc <HAL_ADC_Start_IT+0x254>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d002      	beq.n	8001c86 <HAL_ADC_Start_IT+0x11e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e000      	b.n	8001c88 <HAL_ADC_Start_IT+0x120>
 8001c86:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc0 <HAL_ADC_Start_IT+0x258>)
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d008      	beq.n	8001ca2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d002      	beq.n	8001ca2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b09      	cmp	r3, #9
 8001ca0:	d13a      	bne.n	8001d18 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d02d      	beq.n	8001d0c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d110      	bne.n	8001cea <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0220 	bic.w	r2, r2, #32
 8001cd6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ce6:	605a      	str	r2, [r3, #4]
              break;
 8001ce8:	e010      	b.n	8001d0c <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cf8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0220 	orr.w	r2, r2, #32
 8001d08:	605a      	str	r2, [r3, #4]
              break;
 8001d0a:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fd9e 	bl	8001852 <LL_ADC_REG_StartConversion>
 8001d16:	e04a      	b.n	8001dae <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a24      	ldr	r2, [pc, #144]	@ (8001dbc <HAL_ADC_Start_IT+0x254>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d002      	beq.n	8001d34 <HAL_ADC_Start_IT+0x1cc>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	e000      	b.n	8001d36 <HAL_ADC_Start_IT+0x1ce>
 8001d34:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <HAL_ADC_Start_IT+0x258>)
 8001d36:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d034      	beq.n	8001dae <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d110      	bne.n	8001d7e <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0220 	bic.w	r2, r2, #32
 8001d6a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d7a:	605a      	str	r2, [r3, #4]
              break;
 8001d7c:	e017      	b.n	8001dae <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d8c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0220 	orr.w	r2, r2, #32
 8001d9c:	605a      	str	r2, [r3, #4]
              break;
 8001d9e:	e006      	b.n	8001dae <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001da8:	e001      	b.n	8001dae <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
 8001dac:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	50040300 	.word	0x50040300
 8001dbc:	50040100 	.word	0x50040100
 8001dc0:	50040000 	.word	0x50040000

08001dc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	@ 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dfc:	4882      	ldr	r0, [pc, #520]	@ (8002008 <HAL_ADC_IRQHandler+0x228>)
 8001dfe:	f7ff fc97 	bl	8001730 <LL_ADC_GetMultimode>
 8001e02:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d017      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x5e>
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fec9 	bl	8002bc8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x72>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10a      	bne.n	8001e68 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8083 	beq.w	8001f64 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d07d      	beq.n	8001f64 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e78:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fbb2 	bl	80015ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d062      	beq.n	8001f56 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a5d      	ldr	r2, [pc, #372]	@ (800200c <HAL_ADC_IRQHandler+0x22c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d002      	beq.n	8001ea0 <HAL_ADC_IRQHandler+0xc0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e000      	b.n	8001ea2 <HAL_ADC_IRQHandler+0xc2>
 8001ea0:	4b5b      	ldr	r3, [pc, #364]	@ (8002010 <HAL_ADC_IRQHandler+0x230>)
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d008      	beq.n	8001ebc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d002      	beq.n	8001ebc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d104      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	e00c      	b.n	8001ee0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a50      	ldr	r2, [pc, #320]	@ (800200c <HAL_ADC_IRQHandler+0x22c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d002      	beq.n	8001ed6 <HAL_ADC_IRQHandler+0xf6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e000      	b.n	8001ed8 <HAL_ADC_IRQHandler+0xf8>
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8002010 <HAL_ADC_IRQHandler+0x230>)
 8001ed8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d135      	bne.n	8001f56 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d12e      	bne.n	8001f56 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fcbc 	bl	800187a <LL_ADC_REG_IsConversionOngoing>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d11a      	bne.n	8001f3e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 020c 	bic.w	r2, r2, #12
 8001f16:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d112      	bne.n	8001f56 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f3c:	e00b      	b.n	8001f56 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f42:	f043 0210 	orr.w	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe febe 	bl	8000cd8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	220c      	movs	r2, #12
 8001f62:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <HAL_ADC_IRQHandler+0x198>
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f003 0320 	and.w	r3, r3, #32
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 809f 	beq.w	80020c2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8099 	beq.w	80020c2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fb5d 	bl	800166c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001fb2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fb18 	bl	80015ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fbe:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a11      	ldr	r2, [pc, #68]	@ (800200c <HAL_ADC_IRQHandler+0x22c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d002      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x1f0>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e000      	b.n	8001fd2 <HAL_ADC_IRQHandler+0x1f2>
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002010 <HAL_ADC_IRQHandler+0x230>)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d008      	beq.n	8001fec <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d002      	beq.n	8001fec <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	d104      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	e013      	b.n	800201e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a04      	ldr	r2, [pc, #16]	@ (800200c <HAL_ADC_IRQHandler+0x22c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d009      	beq.n	8002014 <HAL_ADC_IRQHandler+0x234>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	e007      	b.n	8002016 <HAL_ADC_IRQHandler+0x236>
 8002006:	bf00      	nop
 8002008:	50040300 	.word	0x50040300
 800200c:	50040100 	.word	0x50040100
 8002010:	50040000 	.word	0x50040000
 8002014:	4b7d      	ldr	r3, [pc, #500]	@ (800220c <HAL_ADC_IRQHandler+0x42c>)
 8002016:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d047      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_ADC_IRQHandler+0x25e>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d03f      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d13a      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002048:	2b40      	cmp	r3, #64	@ 0x40
 800204a:	d133      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d12e      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fc20 	bl	80018a0 <LL_ADC_INJ_IsConversionOngoing>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11a      	bne.n	800209c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002074:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d112      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	@ 0x54
 800209a:	e00b      	b.n	80020b4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a0:	f043 0210 	orr.w	r2, r3, #16
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fd5f 	bl	8002b78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2260      	movs	r2, #96	@ 0x60
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d011      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x310>
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f896 	bl	8002214 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <HAL_ADC_IRQHandler+0x340>
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fd45 	bl	8002ba0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002126:	2b00      	cmp	r3, #0
 8002128:	d012      	beq.n	8002150 <HAL_ADC_IRQHandler+0x370>
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00d      	beq.n	8002150 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002138:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fd37 	bl	8002bb4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800214e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d036      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x3e8>
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d031      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800216c:	2301      	movs	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002170:	e014      	b.n	800219c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002178:	4825      	ldr	r0, [pc, #148]	@ (8002210 <HAL_ADC_IRQHandler+0x430>)
 800217a:	f7ff fae7 	bl	800174c <LL_ADC_GetMultiDMATransfer>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00b      	beq.n	800219c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002184:	2301      	movs	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
 8002188:	e008      	b.n	800219c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10e      	bne.n	80021c0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f834 	bl	8002228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2210      	movs	r2, #16
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d018      	beq.n	8002204 <HAL_ADC_IRQHandler+0x424>
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	f043 0208 	orr.w	r2, r3, #8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021fc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fcc4 	bl	8002b8c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002204:	bf00      	nop
 8002206:	3728      	adds	r7, #40	@ 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	50040000 	.word	0x50040000
 8002210:	50040300 	.word	0x50040300

08002214 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b0b6      	sub	sp, #216	@ 0xd8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x22>
 800225a:	2302      	movs	r3, #2
 800225c:	e3c9      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x7b6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fb05 	bl	800187a <LL_ADC_REG_IsConversionOngoing>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 83aa 	bne.w	80029cc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b05      	cmp	r3, #5
 8002286:	d824      	bhi.n	80022d2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	3b02      	subs	r3, #2
 800228e:	2b03      	cmp	r3, #3
 8002290:	d81b      	bhi.n	80022ca <HAL_ADC_ConfigChannel+0x8e>
 8002292:	a201      	add	r2, pc, #4	@ (adr r2, 8002298 <HAL_ADC_ConfigChannel+0x5c>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022b1 	.word	0x080022b1
 80022a0:	080022b9 	.word	0x080022b9
 80022a4:	080022c1 	.word	0x080022c1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022a8:	230c      	movs	r3, #12
 80022aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022ae:	e010      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80022b0:	2312      	movs	r3, #18
 80022b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022b6:	e00c      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80022b8:	2318      	movs	r3, #24
 80022ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022be:	e008      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80022c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022c8:	e003      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80022ca:	2306      	movs	r3, #6
 80022cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022d0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80022e0:	f7ff f998 	bl	8001614 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fac6 	bl	800187a <LL_ADC_REG_IsConversionOngoing>
 80022ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fad2 	bl	80018a0 <LL_ADC_INJ_IsConversionOngoing>
 80022fc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002300:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 81a4 	bne.w	8002652 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800230a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 819f 	bne.w	8002652 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	461a      	mov	r2, r3
 8002322:	f7ff f9b6 	bl	8001692 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	08db      	lsrs	r3, r3, #3
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d00a      	beq.n	800235e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6919      	ldr	r1, [r3, #16]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002358:	f7ff f8f4 	bl	8001544 <LL_ADC_SetOffset>
 800235c:	e179      	b.n	8002652 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff f911 	bl	800158c <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10a      	bne.n	800238a <HAL_ADC_ConfigChannel+0x14e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f906 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	e01e      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x18c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f8fb 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e004      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80023bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1a4>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	e018      	b.n	8002412 <HAL_ADC_ConfigChannel+0x1d6>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80023f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80023fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e004      	b.n	8002412 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002408:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002412:	429a      	cmp	r2, r3
 8002414:	d106      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f8ca 	bl	80015b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f8ae 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x214>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff f8a3 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	f003 021f 	and.w	r2, r3, #31
 800244e:	e01e      	b.n	800248e <HAL_ADC_ConfigChannel+0x252>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f898 	bl	800158c <LL_ADC_GetOffsetChannel>
 800245c:	4603      	mov	r3, r0
 800245e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800246e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002472:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800247e:	2320      	movs	r3, #32
 8002480:	e004      	b.n	800248c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x26a>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0e9b      	lsrs	r3, r3, #26
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	e018      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x29c>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80024ca:	2320      	movs	r3, #32
 80024cc:	e004      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80024ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024d8:	429a      	cmp	r2, r3
 80024da:	d106      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2200      	movs	r2, #0
 80024e2:	2101      	movs	r1, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f867 	bl	80015b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2102      	movs	r1, #2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f84b 	bl	800158c <LL_ADC_GetOffsetChannel>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x2da>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2102      	movs	r1, #2
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f840 	bl	800158c <LL_ADC_GetOffsetChannel>
 800250c:	4603      	mov	r3, r0
 800250e:	0e9b      	lsrs	r3, r3, #26
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	e01e      	b.n	8002554 <HAL_ADC_ConfigChannel+0x318>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2102      	movs	r1, #2
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff f835 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800253c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002544:	2320      	movs	r3, #32
 8002546:	e004      	b.n	8002552 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_ADC_ConfigChannel+0x330>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0e9b      	lsrs	r3, r3, #26
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	e014      	b.n	8002596 <HAL_ADC_ConfigChannel+0x35a>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800257a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800257c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002580:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e004      	b.n	8002596 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800258c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002596:	429a      	cmp	r2, r3
 8002598:	d106      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	2102      	movs	r1, #2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f808 	bl	80015b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2103      	movs	r1, #3
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe ffec 	bl	800158c <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x398>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2103      	movs	r1, #3
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe ffe1 	bl	800158c <LL_ADC_GetOffsetChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	f003 021f 	and.w	r2, r3, #31
 80025d2:	e017      	b.n	8002604 <HAL_ADC_ConfigChannel+0x3c8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2103      	movs	r1, #3
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe ffd6 	bl	800158c <LL_ADC_GetOffsetChannel>
 80025e0:	4603      	mov	r3, r0
 80025e2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ee:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80025f6:	2320      	movs	r3, #32
 80025f8:	e003      	b.n	8002602 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80025fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <HAL_ADC_ConfigChannel+0x3e0>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	e011      	b.n	8002640 <HAL_ADC_ConfigChannel+0x404>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800262a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800262c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800262e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002638:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	2103      	movs	r1, #3
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe ffb3 	bl	80015b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f8e8 	bl	800182c <LL_ADC_IsEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 8140 	bne.w	80028e4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6819      	ldr	r1, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	461a      	mov	r2, r3
 8002672:	f7ff f839 	bl	80016e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	4a8f      	ldr	r2, [pc, #572]	@ (80028b8 <HAL_ADC_ConfigChannel+0x67c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	f040 8131 	bne.w	80028e4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10b      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x46e>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0e9b      	lsrs	r3, r3, #26
 8002698:	3301      	adds	r3, #1
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2b09      	cmp	r3, #9
 80026a0:	bf94      	ite	ls
 80026a2:	2301      	movls	r3, #1
 80026a4:	2300      	movhi	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e019      	b.n	80026de <HAL_ADC_ConfigChannel+0x4a2>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e003      	b.n	80026ce <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80026c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	bf94      	ite	ls
 80026d8:	2301      	movls	r3, #1
 80026da:	2300      	movhi	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d079      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d107      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x4c2>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0e9b      	lsrs	r3, r3, #26
 80026f4:	3301      	adds	r3, #1
 80026f6:	069b      	lsls	r3, r3, #26
 80026f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026fc:	e015      	b.n	800272a <HAL_ADC_ConfigChannel+0x4ee>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800270c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800270e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002716:	2320      	movs	r3, #32
 8002718:	e003      	b.n	8002722 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800271a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	3301      	adds	r3, #1
 8002724:	069b      	lsls	r3, r3, #26
 8002726:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_ADC_ConfigChannel+0x50e>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	3301      	adds	r3, #1
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2101      	movs	r1, #1
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	e017      	b.n	800277a <HAL_ADC_ConfigChannel+0x53e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800275a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800275c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	ea42 0103 	orr.w	r1, r2, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x564>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	3301      	adds	r3, #1
 8002792:	f003 021f 	and.w	r2, r3, #31
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	051b      	lsls	r3, r3, #20
 800279e:	e018      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x596>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80027b8:	2320      	movs	r3, #32
 80027ba:	e003      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80027bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	f003 021f 	and.w	r2, r3, #31
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d2:	430b      	orrs	r3, r1
 80027d4:	e081      	b.n	80028da <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x5b6>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	069b      	lsls	r3, r3, #26
 80027ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027f0:	e015      	b.n	800281e <HAL_ADC_ConfigChannel+0x5e2>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e003      	b.n	8002816 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	069b      	lsls	r3, r3, #26
 800281a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_ADC_ConfigChannel+0x602>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	e017      	b.n	800286e <HAL_ADC_ConfigChannel+0x632>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	61bb      	str	r3, [r7, #24]
  return result;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e003      	b.n	8002862 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2101      	movs	r1, #1
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	ea42 0103 	orr.w	r1, r2, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10d      	bne.n	800289a <HAL_ADC_ConfigChannel+0x65e>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	3301      	adds	r3, #1
 8002886:	f003 021f 	and.w	r2, r3, #31
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	3b1e      	subs	r3, #30
 8002892:	051b      	lsls	r3, r3, #20
 8002894:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002898:	e01e      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x69c>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	60fb      	str	r3, [r7, #12]
  return result;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e006      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x688>
 80028b6:	bf00      	nop
 80028b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	f003 021f 	and.w	r2, r3, #31
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	3b1e      	subs	r3, #30
 80028d2:	051b      	lsls	r3, r3, #20
 80028d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028de:	4619      	mov	r1, r3
 80028e0:	f7fe fed7 	bl	8001692 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b44      	ldr	r3, [pc, #272]	@ (80029fc <HAL_ADC_ConfigChannel+0x7c0>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d07a      	beq.n	80029e6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f0:	4843      	ldr	r0, [pc, #268]	@ (8002a00 <HAL_ADC_ConfigChannel+0x7c4>)
 80028f2:	f7fe fe19 	bl	8001528 <LL_ADC_GetCommonPathInternalCh>
 80028f6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a41      	ldr	r2, [pc, #260]	@ (8002a04 <HAL_ADC_ConfigChannel+0x7c8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d12c      	bne.n	800295e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002904:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d126      	bne.n	800295e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3c      	ldr	r2, [pc, #240]	@ (8002a08 <HAL_ADC_ConfigChannel+0x7cc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_ADC_ConfigChannel+0x6e8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a0c <HAL_ADC_ConfigChannel+0x7d0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d15d      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002924:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002928:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800292c:	4619      	mov	r1, r3
 800292e:	4834      	ldr	r0, [pc, #208]	@ (8002a00 <HAL_ADC_ConfigChannel+0x7c4>)
 8002930:	f7fe fde7 	bl	8001502 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002934:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <HAL_ADC_ConfigChannel+0x7d4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	4a36      	ldr	r2, [pc, #216]	@ (8002a14 <HAL_ADC_ConfigChannel+0x7d8>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800294e:	e002      	b.n	8002956 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	3b01      	subs	r3, #1
 8002954:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f9      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800295c:	e040      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a2d      	ldr	r2, [pc, #180]	@ (8002a18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d118      	bne.n	800299a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800296c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d112      	bne.n	800299a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a23      	ldr	r2, [pc, #140]	@ (8002a08 <HAL_ADC_ConfigChannel+0x7cc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x74c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a22      	ldr	r2, [pc, #136]	@ (8002a0c <HAL_ADC_ConfigChannel+0x7d0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d12d      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800298c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002990:	4619      	mov	r1, r3
 8002992:	481b      	ldr	r0, [pc, #108]	@ (8002a00 <HAL_ADC_ConfigChannel+0x7c4>)
 8002994:	f7fe fdb5 	bl	8001502 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002998:	e024      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a1c <HAL_ADC_ConfigChannel+0x7e0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d120      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d11a      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a14      	ldr	r2, [pc, #80]	@ (8002a08 <HAL_ADC_ConfigChannel+0x7cc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d115      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029c2:	4619      	mov	r1, r3
 80029c4:	480e      	ldr	r0, [pc, #56]	@ (8002a00 <HAL_ADC_ConfigChannel+0x7c4>)
 80029c6:	f7fe fd9c 	bl	8001502 <LL_ADC_SetCommonPathInternalCh>
 80029ca:	e00c      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80029de:	e002      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	37d8      	adds	r7, #216	@ 0xd8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	80080000 	.word	0x80080000
 8002a00:	50040300 	.word	0x50040300
 8002a04:	c7520000 	.word	0xc7520000
 8002a08:	50040000 	.word	0x50040000
 8002a0c:	50040200 	.word	0x50040200
 8002a10:	20000018 	.word	0x20000018
 8002a14:	053e2d63 	.word	0x053e2d63
 8002a18:	cb840000 	.word	0xcb840000
 8002a1c:	80000001 	.word	0x80000001

08002a20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe fefb 	bl	800182c <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d169      	bne.n	8002b10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <ADC_Enable+0xfc>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	f043 0210 	orr.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e055      	b.n	8002b12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe feca 	bl	8001804 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a70:	482b      	ldr	r0, [pc, #172]	@ (8002b20 <ADC_Enable+0x100>)
 8002a72:	f7fe fd59 	bl	8001528 <LL_ADC_GetCommonPathInternalCh>
 8002a76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a80:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <ADC_Enable+0x104>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	099b      	lsrs	r3, r3, #6
 8002a86:	4a28      	ldr	r2, [pc, #160]	@ (8002b28 <ADC_Enable+0x108>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a9a:	e002      	b.n	8002aa2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f9      	bne.n	8002a9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fce8 	bl	800147c <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aae:	e028      	b.n	8002b02 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe feb9 	bl	800182c <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fe9d 	bl	8001804 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aca:	f7fe fcd7 	bl	800147c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d914      	bls.n	8002b02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d00d      	beq.n	8002b02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	f043 0210 	orr.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e007      	b.n	8002b12 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d1cf      	bne.n	8002ab0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	8000003f 	.word	0x8000003f
 8002b20:	50040300 	.word	0x50040300
 8002b24:	20000018 	.word	0x20000018
 8002b28:	053e2d63 	.word	0x053e2d63

08002b2c <LL_ADC_IsEnabled>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <LL_ADC_IsEnabled+0x18>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <LL_ADC_IsEnabled+0x1a>
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d101      	bne.n	8002b6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b09f      	sub	sp, #124	@ 0x7c
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e093      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c02:	2300      	movs	r3, #0
 8002c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c06:	2300      	movs	r3, #0
 8002c08:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a47      	ldr	r2, [pc, #284]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d102      	bne.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c14:	4b46      	ldr	r3, [pc, #280]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	e001      	b.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e072      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff87 	bl	8002b52 <LL_ADC_REG_IsConversionOngoing>
 8002c44:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff81 	bl	8002b52 <LL_ADC_REG_IsConversionOngoing>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d154      	bne.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d151      	bne.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c5c:	4b35      	ldr	r3, [pc, #212]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d02c      	beq.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c7a:	035b      	lsls	r3, r3, #13
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c84:	4829      	ldr	r0, [pc, #164]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c86:	f7ff ff51 	bl	8002b2c <LL_ADC_IsEnabled>
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	4828      	ldr	r0, [pc, #160]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c8e:	f7ff ff4d 	bl	8002b2c <LL_ADC_IsEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	431c      	orrs	r4, r3
 8002c96:	4828      	ldr	r0, [pc, #160]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c98:	f7ff ff48 	bl	8002b2c <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d137      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cac:	f023 030f 	bic.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	6811      	ldr	r1, [r2, #0]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cbe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc0:	e028      	b.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ccc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cce:	4817      	ldr	r0, [pc, #92]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cd0:	f7ff ff2c 	bl	8002b2c <LL_ADC_IsEnabled>
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	4816      	ldr	r0, [pc, #88]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cd8:	f7ff ff28 	bl	8002b2c <LL_ADC_IsEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	431c      	orrs	r4, r3
 8002ce0:	4815      	ldr	r0, [pc, #84]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ce2:	f7ff ff23 	bl	8002b2c <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4323      	orrs	r3, r4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d112      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cf6:	f023 030f 	bic.w	r3, r3, #15
 8002cfa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cfc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfe:	e009      	b.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d12:	e000      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d1e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	377c      	adds	r7, #124	@ 0x7c
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	50040000 	.word	0x50040000
 8002d30:	50040100 	.word	0x50040100
 8002d34:	50040300 	.word	0x50040300
 8002d38:	50040200 	.word	0x50040200

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4907      	ldr	r1, [pc, #28]	@ (8002dd8 <__NVIC_EnableIRQ+0x38>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	db0a      	blt.n	8002e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	490c      	ldr	r1, [pc, #48]	@ (8002e28 <__NVIC_SetPriority+0x4c>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e04:	e00a      	b.n	8002e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4908      	ldr	r1, [pc, #32]	@ (8002e2c <__NVIC_SetPriority+0x50>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3b04      	subs	r3, #4
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	761a      	strb	r2, [r3, #24]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	@ 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	bf28      	it	cs
 8002e4e:	2304      	movcs	r3, #4
 8002e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d902      	bls.n	8002e60 <NVIC_EncodePriority+0x30>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3b03      	subs	r3, #3
 8002e5e:	e000      	b.n	8002e62 <NVIC_EncodePriority+0x32>
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	f04f 31ff 	mov.w	r1, #4294967295
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	4313      	orrs	r3, r2
         );
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	@ 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ea8:	d301      	bcc.n	8002eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00f      	b.n	8002ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed8 <SysTick_Config+0x40>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	f7ff ff8e 	bl	8002ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <SysTick_Config+0x40>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec6:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <SysTick_Config+0x40>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000e010 	.word	0xe000e010

08002edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff29 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f04:	f7ff ff3e 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	6978      	ldr	r0, [r7, #20]
 8002f10:	f7ff ff8e 	bl	8002e30 <NVIC_EncodePriority>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff5d 	bl	8002ddc <__NVIC_SetPriority>
}
 8002f22:	bf00      	nop
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff31 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ffa2 	bl	8002e98 <SysTick_Config>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d008      	beq.n	8002f88 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e022      	b.n	8002fce <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 020e 	bic.w	r2, r2, #14
 8002f96:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	f003 021c 	and.w	r2, r3, #28
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d005      	beq.n	8002ffe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e029      	b.n	8003052 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 020e 	bic.w	r2, r2, #14
 800300c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003022:	f003 021c 	and.w	r2, r3, #28
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f202 	lsl.w	r2, r1, r2
 8003030:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
    }
  }
  return status;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306a:	e17f      	b.n	800336c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8171 	beq.w	8003366 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d005      	beq.n	800309c <HAL_GPIO_Init+0x40>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d130      	bne.n	80030fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030d2:	2201      	movs	r2, #1
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	f003 0201 	and.w	r2, r3, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b03      	cmp	r3, #3
 8003108:	d118      	bne.n	800313c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003110:	2201      	movs	r2, #1
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	f003 0201 	and.w	r2, r3, #1
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b03      	cmp	r3, #3
 8003146:	d017      	beq.n	8003178 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d123      	bne.n	80031cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	08da      	lsrs	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3208      	adds	r2, #8
 80031c6:	6939      	ldr	r1, [r7, #16]
 80031c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0203 	and.w	r2, r3, #3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80ac 	beq.w	8003366 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	4b5f      	ldr	r3, [pc, #380]	@ (800338c <HAL_GPIO_Init+0x330>)
 8003210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003212:	4a5e      	ldr	r2, [pc, #376]	@ (800338c <HAL_GPIO_Init+0x330>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6613      	str	r3, [r2, #96]	@ 0x60
 800321a:	4b5c      	ldr	r3, [pc, #368]	@ (800338c <HAL_GPIO_Init+0x330>)
 800321c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003226:	4a5a      	ldr	r2, [pc, #360]	@ (8003390 <HAL_GPIO_Init+0x334>)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	3302      	adds	r3, #2
 800322e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003232:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	220f      	movs	r2, #15
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003250:	d025      	beq.n	800329e <HAL_GPIO_Init+0x242>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4f      	ldr	r2, [pc, #316]	@ (8003394 <HAL_GPIO_Init+0x338>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01f      	beq.n	800329a <HAL_GPIO_Init+0x23e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4e      	ldr	r2, [pc, #312]	@ (8003398 <HAL_GPIO_Init+0x33c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d019      	beq.n	8003296 <HAL_GPIO_Init+0x23a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4d      	ldr	r2, [pc, #308]	@ (800339c <HAL_GPIO_Init+0x340>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_GPIO_Init+0x236>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4c      	ldr	r2, [pc, #304]	@ (80033a0 <HAL_GPIO_Init+0x344>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00d      	beq.n	800328e <HAL_GPIO_Init+0x232>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4b      	ldr	r2, [pc, #300]	@ (80033a4 <HAL_GPIO_Init+0x348>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_GPIO_Init+0x22e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4a      	ldr	r2, [pc, #296]	@ (80033a8 <HAL_GPIO_Init+0x34c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_GPIO_Init+0x22a>
 8003282:	2306      	movs	r3, #6
 8003284:	e00c      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 8003286:	2307      	movs	r3, #7
 8003288:	e00a      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 800328a:	2305      	movs	r3, #5
 800328c:	e008      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 800328e:	2304      	movs	r3, #4
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 8003292:	2303      	movs	r3, #3
 8003294:	e004      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 8003296:	2302      	movs	r3, #2
 8003298:	e002      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 800329e:	2300      	movs	r3, #0
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	f002 0203 	and.w	r2, r2, #3
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	4093      	lsls	r3, r2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032b0:	4937      	ldr	r1, [pc, #220]	@ (8003390 <HAL_GPIO_Init+0x334>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032be:	4b3b      	ldr	r3, [pc, #236]	@ (80033ac <HAL_GPIO_Init+0x350>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032e2:	4a32      	ldr	r2, [pc, #200]	@ (80033ac <HAL_GPIO_Init+0x350>)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032e8:	4b30      	ldr	r3, [pc, #192]	@ (80033ac <HAL_GPIO_Init+0x350>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800330c:	4a27      	ldr	r2, [pc, #156]	@ (80033ac <HAL_GPIO_Init+0x350>)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003312:	4b26      	ldr	r3, [pc, #152]	@ (80033ac <HAL_GPIO_Init+0x350>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003336:	4a1d      	ldr	r2, [pc, #116]	@ (80033ac <HAL_GPIO_Init+0x350>)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800333c:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <HAL_GPIO_Init+0x350>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003360:	4a12      	ldr	r2, [pc, #72]	@ (80033ac <HAL_GPIO_Init+0x350>)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3301      	adds	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	f47f ae78 	bne.w	800306c <HAL_GPIO_Init+0x10>
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	40010000 	.word	0x40010000
 8003394:	48000400 	.word	0x48000400
 8003398:	48000800 	.word	0x48000800
 800339c:	48000c00 	.word	0x48000c00
 80033a0:	48001000 	.word	0x48001000
 80033a4:	48001400 	.word	0x48001400
 80033a8:	48001800 	.word	0x48001800
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
 80033bc:	4613      	mov	r3, r2
 80033be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c0:	787b      	ldrb	r3, [r7, #1]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033cc:	e002      	b.n	80033d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033ea:	4b08      	ldr	r3, [pc, #32]	@ (800340c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f6:	4a05      	ldr	r2, [pc, #20]	@ (800340c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fbd8 	bl	8000bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40010400 	.word	0x40010400

08003410 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <HAL_PWREx_GetVoltageRange+0x18>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40007000 	.word	0x40007000

0800342c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800343a:	d130      	bne.n	800349e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800343c:	4b23      	ldr	r3, [pc, #140]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003448:	d038      	beq.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800344a:	4b20      	ldr	r3, [pc, #128]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003452:	4a1e      	ldr	r2, [pc, #120]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003454:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003458:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800345a:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2232      	movs	r2, #50	@ 0x32
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	4a1b      	ldr	r2, [pc, #108]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	0c9b      	lsrs	r3, r3, #18
 800346c:	3301      	adds	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003470:	e002      	b.n	8003478 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3b01      	subs	r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003478:	4b14      	ldr	r3, [pc, #80]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003484:	d102      	bne.n	800348c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f2      	bne.n	8003472 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800348c:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003498:	d110      	bne.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e00f      	b.n	80034be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800349e:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034aa:	d007      	beq.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034b4:	4a05      	ldr	r2, [pc, #20]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40007000 	.word	0x40007000
 80034d0:	20000018 	.word	0x20000018
 80034d4:	431bde83 	.word	0x431bde83

080034d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e3ca      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ea:	4b97      	ldr	r3, [pc, #604]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f4:	4b94      	ldr	r3, [pc, #592]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80e4 	beq.w	80036d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_RCC_OscConfig+0x4a>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b0c      	cmp	r3, #12
 8003516:	f040 808b 	bne.w	8003630 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b01      	cmp	r3, #1
 800351e:	f040 8087 	bne.w	8003630 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003522:	4b89      	ldr	r3, [pc, #548]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RCC_OscConfig+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e3a2      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1a      	ldr	r2, [r3, #32]
 800353e:	4b82      	ldr	r3, [pc, #520]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <HAL_RCC_OscConfig+0x7c>
 800354a:	4b7f      	ldr	r3, [pc, #508]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003552:	e005      	b.n	8003560 <HAL_RCC_OscConfig+0x88>
 8003554:	4b7c      	ldr	r3, [pc, #496]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003560:	4293      	cmp	r3, r2
 8003562:	d223      	bcs.n	80035ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fd55 	bl	8004018 <RCC_SetFlashLatencyFromMSIRange>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e383      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003578:	4b73      	ldr	r3, [pc, #460]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a72      	ldr	r2, [pc, #456]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800357e:	f043 0308 	orr.w	r3, r3, #8
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b70      	ldr	r3, [pc, #448]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	496d      	ldr	r1, [pc, #436]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003596:	4b6c      	ldr	r3, [pc, #432]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	4968      	ldr	r1, [pc, #416]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
 80035aa:	e025      	b.n	80035f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ac:	4b66      	ldr	r3, [pc, #408]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a65      	ldr	r2, [pc, #404]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80035b2:	f043 0308 	orr.w	r3, r3, #8
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b63      	ldr	r3, [pc, #396]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4960      	ldr	r1, [pc, #384]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	495b      	ldr	r1, [pc, #364]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fd15 	bl	8004018 <RCC_SetFlashLatencyFromMSIRange>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e343      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035f8:	f000 fc4a 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b52      	ldr	r3, [pc, #328]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	4950      	ldr	r1, [pc, #320]	@ (800374c <HAL_RCC_OscConfig+0x274>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
 8003614:	4a4e      	ldr	r2, [pc, #312]	@ (8003750 <HAL_RCC_OscConfig+0x278>)
 8003616:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003618:	4b4e      	ldr	r3, [pc, #312]	@ (8003754 <HAL_RCC_OscConfig+0x27c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd fedd 	bl	80013dc <HAL_InitTick>
 8003622:	4603      	mov	r3, r0
 8003624:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d052      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	e327      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d032      	beq.n	800369e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003638:	4b43      	ldr	r3, [pc, #268]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a42      	ldr	r2, [pc, #264]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003644:	f7fd ff1a 	bl	800147c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800364c:	f7fd ff16 	bl	800147c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e310      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800365e:	4b3a      	ldr	r3, [pc, #232]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800366a:	4b37      	ldr	r3, [pc, #220]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a36      	ldr	r2, [pc, #216]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003670:	f043 0308 	orr.w	r3, r3, #8
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b34      	ldr	r3, [pc, #208]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4931      	ldr	r1, [pc, #196]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003688:	4b2f      	ldr	r3, [pc, #188]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	492c      	ldr	r1, [pc, #176]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	e01a      	b.n	80036d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800369e:	4b2a      	ldr	r3, [pc, #168]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a29      	ldr	r2, [pc, #164]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036aa:	f7fd fee7 	bl	800147c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036b2:	f7fd fee3 	bl	800147c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e2dd      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036c4:	4b20      	ldr	r3, [pc, #128]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x1da>
 80036d0:	e000      	b.n	80036d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d074      	beq.n	80037ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d005      	beq.n	80036f2 <HAL_RCC_OscConfig+0x21a>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	d10e      	bne.n	800370a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d10b      	bne.n	800370a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f2:	4b15      	ldr	r3, [pc, #84]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d064      	beq.n	80037c8 <HAL_RCC_OscConfig+0x2f0>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d160      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e2ba      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003712:	d106      	bne.n	8003722 <HAL_RCC_OscConfig+0x24a>
 8003714:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0b      	ldr	r2, [pc, #44]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800371a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	e026      	b.n	8003770 <HAL_RCC_OscConfig+0x298>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800372a:	d115      	bne.n	8003758 <HAL_RCC_OscConfig+0x280>
 800372c:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a05      	ldr	r2, [pc, #20]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 8003732:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b03      	ldr	r3, [pc, #12]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a02      	ldr	r2, [pc, #8]	@ (8003748 <HAL_RCC_OscConfig+0x270>)
 800373e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	e014      	b.n	8003770 <HAL_RCC_OscConfig+0x298>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	080079bc 	.word	0x080079bc
 8003750:	20000018 	.word	0x20000018
 8003754:	2000001c 	.word	0x2000001c
 8003758:	4ba0      	ldr	r3, [pc, #640]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a9f      	ldr	r2, [pc, #636]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b9d      	ldr	r3, [pc, #628]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a9c      	ldr	r2, [pc, #624]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800376e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fe80 	bl	800147c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003780:	f7fd fe7c 	bl	800147c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	@ 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e276      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003792:	4b92      	ldr	r3, [pc, #584]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x2a8>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd fe6c 	bl	800147c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fd fe68 	bl	800147c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	@ 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e262      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ba:	4b88      	ldr	r3, [pc, #544]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x2d0>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d060      	beq.n	8003898 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_OscConfig+0x310>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d119      	bne.n	8003816 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d116      	bne.n	8003816 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e8:	4b7c      	ldr	r3, [pc, #496]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_OscConfig+0x328>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e23f      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	4b76      	ldr	r3, [pc, #472]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	4973      	ldr	r1, [pc, #460]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003814:	e040      	b.n	8003898 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d023      	beq.n	8003866 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800381e:	4b6f      	ldr	r3, [pc, #444]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6e      	ldr	r2, [pc, #440]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382a:	f7fd fe27 	bl	800147c <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003832:	f7fd fe23 	bl	800147c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e21d      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003844:	4b65      	ldr	r3, [pc, #404]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4b62      	ldr	r3, [pc, #392]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	495f      	ldr	r1, [pc, #380]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
 8003864:	e018      	b.n	8003898 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003866:	4b5d      	ldr	r3, [pc, #372]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a5c      	ldr	r2, [pc, #368]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 800386c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fd fe03 	bl	800147c <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387a:	f7fd fdff 	bl	800147c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e1f9      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800388c:	4b53      	ldr	r3, [pc, #332]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f0      	bne.n	800387a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d03c      	beq.n	800391e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ac:	4b4b      	ldr	r3, [pc, #300]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b2:	4a4a      	ldr	r2, [pc, #296]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fd fdde 	bl	800147c <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c4:	f7fd fdda 	bl	800147c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e1d4      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038d6:	4b41      	ldr	r3, [pc, #260]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80038d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ef      	beq.n	80038c4 <HAL_RCC_OscConfig+0x3ec>
 80038e4:	e01b      	b.n	800391e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e6:	4b3d      	ldr	r3, [pc, #244]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80038e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ec:	4a3b      	ldr	r2, [pc, #236]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fd fdc1 	bl	800147c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fe:	f7fd fdbd 	bl	800147c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1b7      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003910:	4b32      	ldr	r3, [pc, #200]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ef      	bne.n	80038fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80a6 	beq.w	8003a78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392c:	2300      	movs	r3, #0
 800392e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003930:	4b2a      	ldr	r3, [pc, #168]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10d      	bne.n	8003958 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393c:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003940:	4a26      	ldr	r2, [pc, #152]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003946:	6593      	str	r3, [r2, #88]	@ 0x58
 8003948:	4b24      	ldr	r3, [pc, #144]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003954:	2301      	movs	r3, #1
 8003956:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003958:	4b21      	ldr	r3, [pc, #132]	@ (80039e0 <HAL_RCC_OscConfig+0x508>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d118      	bne.n	8003996 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003964:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <HAL_RCC_OscConfig+0x508>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_RCC_OscConfig+0x508>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800396e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003970:	f7fd fd84 	bl	800147c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003978:	f7fd fd80 	bl	800147c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e17a      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398a:	4b15      	ldr	r3, [pc, #84]	@ (80039e0 <HAL_RCC_OscConfig+0x508>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d108      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4d8>
 800399e:	4b0f      	ldr	r3, [pc, #60]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a4:	4a0d      	ldr	r2, [pc, #52]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ae:	e029      	b.n	8003a04 <HAL_RCC_OscConfig+0x52c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d115      	bne.n	80039e4 <HAL_RCC_OscConfig+0x50c>
 80039b8:	4b08      	ldr	r3, [pc, #32]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039be:	4a07      	ldr	r2, [pc, #28]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039c8:	4b04      	ldr	r3, [pc, #16]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ce:	4a03      	ldr	r2, [pc, #12]	@ (80039dc <HAL_RCC_OscConfig+0x504>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039d8:	e014      	b.n	8003a04 <HAL_RCC_OscConfig+0x52c>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40007000 	.word	0x40007000
 80039e4:	4b9c      	ldr	r3, [pc, #624]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ea:	4a9b      	ldr	r2, [pc, #620]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039f4:	4b98      	ldr	r3, [pc, #608]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fa:	4a97      	ldr	r2, [pc, #604]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d016      	beq.n	8003a3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fd fd36 	bl	800147c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7fd fd32 	bl	800147c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e12a      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ed      	beq.n	8003a14 <HAL_RCC_OscConfig+0x53c>
 8003a38:	e015      	b.n	8003a66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fd fd1f 	bl	800147c <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a40:	e00a      	b.n	8003a58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a42:	f7fd fd1b 	bl	800147c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e113      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a58:	4b7f      	ldr	r3, [pc, #508]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ed      	bne.n	8003a42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a66:	7ffb      	ldrb	r3, [r7, #31]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6c:	4b7a      	ldr	r3, [pc, #488]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	4a79      	ldr	r2, [pc, #484]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80fe 	beq.w	8003c7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	f040 80d0 	bne.w	8003c2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a8c:	4b72      	ldr	r3, [pc, #456]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 0203 	and.w	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d130      	bne.n	8003b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d127      	bne.n	8003b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d11f      	bne.n	8003b02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003acc:	2a07      	cmp	r2, #7
 8003ace:	bf14      	ite	ne
 8003ad0:	2201      	movne	r2, #1
 8003ad2:	2200      	moveq	r2, #0
 8003ad4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d113      	bne.n	8003b02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d109      	bne.n	8003b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d06e      	beq.n	8003be0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d069      	beq.n	8003bdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b08:	4b53      	ldr	r3, [pc, #332]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b14:	4b50      	ldr	r3, [pc, #320]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0ad      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b24:	4b4c      	ldr	r3, [pc, #304]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a4b      	ldr	r2, [pc, #300]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b30:	f7fd fca4 	bl	800147c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fd fca0 	bl	800147c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e09a      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4a:	4b43      	ldr	r3, [pc, #268]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b56:	4b40      	ldr	r3, [pc, #256]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	4b40      	ldr	r3, [pc, #256]	@ (8003c5c <HAL_RCC_OscConfig+0x784>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b66:	3a01      	subs	r2, #1
 8003b68:	0112      	lsls	r2, r2, #4
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b70:	0212      	lsls	r2, r2, #8
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b78:	0852      	lsrs	r2, r2, #1
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0552      	lsls	r2, r2, #21
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b84:	0852      	lsrs	r2, r2, #1
 8003b86:	3a01      	subs	r2, #1
 8003b88:	0652      	lsls	r2, r2, #25
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b90:	0912      	lsrs	r2, r2, #4
 8003b92:	0452      	lsls	r2, r2, #17
 8003b94:	430a      	orrs	r2, r1
 8003b96:	4930      	ldr	r1, [pc, #192]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a2a      	ldr	r2, [pc, #168]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bb4:	f7fd fc62 	bl	800147c <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fd fc5e 	bl	800147c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e058      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	4b22      	ldr	r3, [pc, #136]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bda:	e050      	b.n	8003c7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e04f      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d148      	bne.n	8003c7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bec:	4b1a      	ldr	r3, [pc, #104]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf8:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a16      	ldr	r2, [pc, #88]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c04:	f7fd fc3a 	bl	800147c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fd fc36 	bl	800147c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e030      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x734>
 8003c2a:	e028      	b.n	8003c7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d023      	beq.n	8003c7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a08      	ldr	r2, [pc, #32]	@ (8003c58 <HAL_RCC_OscConfig+0x780>)
 8003c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fd fc1d 	bl	800147c <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c44:	e00c      	b.n	8003c60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fd fc19 	bl	800147c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d905      	bls.n	8003c60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e013      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c60:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <HAL_RCC_OscConfig+0x7b0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ec      	bne.n	8003c46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c6c:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <HAL_RCC_OscConfig+0x7b0>)
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	4905      	ldr	r1, [pc, #20]	@ (8003c88 <HAL_RCC_OscConfig+0x7b0>)
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_RCC_OscConfig+0x7b4>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	60cb      	str	r3, [r1, #12]
 8003c78:	e001      	b.n	8003c7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	feeefffc 	.word	0xfeeefffc

08003c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0e7      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b75      	ldr	r3, [pc, #468]	@ (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d910      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b72      	ldr	r3, [pc, #456]	@ (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 0207 	bic.w	r2, r3, #7
 8003cba:	4970      	ldr	r1, [pc, #448]	@ (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0cf      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d010      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b66      	ldr	r3, [pc, #408]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d908      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b63      	ldr	r3, [pc, #396]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4960      	ldr	r1, [pc, #384]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d04c      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b5a      	ldr	r3, [pc, #360]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d121      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0a6      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2e:	4b54      	ldr	r3, [pc, #336]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d115      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e09a      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d46:	4b4e      	ldr	r3, [pc, #312]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e08e      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d56:	4b4a      	ldr	r3, [pc, #296]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e086      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d66:	4b46      	ldr	r3, [pc, #280]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4943      	ldr	r1, [pc, #268]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d78:	f7fd fb80 	bl	800147c <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d80:	f7fd fb7c 	bl	800147c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e06e      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	4b3a      	ldr	r3, [pc, #232]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 020c 	and.w	r2, r3, #12
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1eb      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d010      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	4b31      	ldr	r3, [pc, #196]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d208      	bcs.n	8003dd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	492b      	ldr	r1, [pc, #172]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd6:	4b29      	ldr	r3, [pc, #164]	@ (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d210      	bcs.n	8003e06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de4:	4b25      	ldr	r3, [pc, #148]	@ (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 0207 	bic.w	r2, r3, #7
 8003dec:	4923      	ldr	r1, [pc, #140]	@ (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df4:	4b21      	ldr	r3, [pc, #132]	@ (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e036      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e12:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	4918      	ldr	r1, [pc, #96]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4910      	ldr	r1, [pc, #64]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e44:	f000 f824 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	490b      	ldr	r1, [pc, #44]	@ (8003e84 <HAL_RCC_ClockConfig+0x1f4>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	4a09      	ldr	r2, [pc, #36]	@ (8003e88 <HAL_RCC_ClockConfig+0x1f8>)
 8003e62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e64:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <HAL_RCC_ClockConfig+0x1fc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fd fab7 	bl	80013dc <HAL_InitTick>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e72:	7afb      	ldrb	r3, [r7, #11]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	40021000 	.word	0x40021000
 8003e84:	080079bc 	.word	0x080079bc
 8003e88:	20000018 	.word	0x20000018
 8003e8c:	2000001c 	.word	0x2000001c

08003e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	@ 0x24
 8003e94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d121      	bne.n	8003f02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d11e      	bne.n	8003f02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ec4:	4b34      	ldr	r3, [pc, #208]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ed0:	4b31      	ldr	r3, [pc, #196]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e005      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003eec:	4a2b      	ldr	r2, [pc, #172]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d102      	bne.n	8003f0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f08:	4b25      	ldr	r3, [pc, #148]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	e004      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f14:	4b23      	ldr	r3, [pc, #140]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d134      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d003      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0xac>
 8003f34:	e005      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f36:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f38:	617b      	str	r3, [r7, #20]
      break;
 8003f3a:	e005      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f3c:	4b19      	ldr	r3, [pc, #100]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f3e:	617b      	str	r3, [r7, #20]
      break;
 8003f40:	e002      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	617b      	str	r3, [r7, #20]
      break;
 8003f46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f48:	4b13      	ldr	r3, [pc, #76]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	3301      	adds	r3, #1
 8003f54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f56:	4b10      	ldr	r3, [pc, #64]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	fb03 f202 	mul.w	r2, r3, r2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	0e5b      	lsrs	r3, r3, #25
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f88:	69bb      	ldr	r3, [r7, #24]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3724      	adds	r7, #36	@ 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	080079d4 	.word	0x080079d4
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	007a1200 	.word	0x007a1200

08003fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	@ (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000018 	.word	0x20000018

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fc4:	f7ff fff0 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4904      	ldr	r1, [pc, #16]	@ (8003fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	080079cc 	.word	0x080079cc

08003fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ff0:	f7ff ffda 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0adb      	lsrs	r3, r3, #11
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4904      	ldr	r1, [pc, #16]	@ (8004014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	080079cc 	.word	0x080079cc

08004018 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004024:	4b2a      	ldr	r3, [pc, #168]	@ (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004030:	f7ff f9ee 	bl	8003410 <HAL_PWREx_GetVoltageRange>
 8004034:	6178      	str	r0, [r7, #20]
 8004036:	e014      	b.n	8004062 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b25      	ldr	r3, [pc, #148]	@ (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	4a24      	ldr	r2, [pc, #144]	@ (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004042:	6593      	str	r3, [r2, #88]	@ 0x58
 8004044:	4b22      	ldr	r3, [pc, #136]	@ (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004050:	f7ff f9de 	bl	8003410 <HAL_PWREx_GetVoltageRange>
 8004054:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004056:	4b1e      	ldr	r3, [pc, #120]	@ (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	4a1d      	ldr	r2, [pc, #116]	@ (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800405c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004060:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004068:	d10b      	bne.n	8004082 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b80      	cmp	r3, #128	@ 0x80
 800406e:	d919      	bls.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2ba0      	cmp	r3, #160	@ 0xa0
 8004074:	d902      	bls.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004076:	2302      	movs	r3, #2
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	e013      	b.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800407c:	2301      	movs	r3, #1
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	e010      	b.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b80      	cmp	r3, #128	@ 0x80
 8004086:	d902      	bls.n	800408e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004088:	2303      	movs	r3, #3
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	e00a      	b.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b80      	cmp	r3, #128	@ 0x80
 8004092:	d102      	bne.n	800409a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004094:	2302      	movs	r3, #2
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e004      	b.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b70      	cmp	r3, #112	@ 0x70
 800409e:	d101      	bne.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040a0:	2301      	movs	r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 0207 	bic.w	r2, r3, #7
 80040ac:	4909      	ldr	r1, [pc, #36]	@ (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040b4:	4b07      	ldr	r3, [pc, #28]	@ (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40022000 	.word	0x40022000

080040d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040e0:	2300      	movs	r3, #0
 80040e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040e4:	2300      	movs	r3, #0
 80040e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d041      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040fc:	d02a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004102:	d824      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004104:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004108:	d008      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800410a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800410e:	d81e      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004114:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004118:	d010      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800411a:	e018      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800411c:	4b86      	ldr	r3, [pc, #536]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a85      	ldr	r2, [pc, #532]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004126:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004128:	e015      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3304      	adds	r3, #4
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fabb 	bl	80046ac <RCCEx_PLLSAI1_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800413a:	e00c      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3320      	adds	r3, #32
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fba6 	bl	8004894 <RCCEx_PLLSAI2_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	74fb      	strb	r3, [r7, #19]
      break;
 8004152:	e000      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800415c:	4b76      	ldr	r3, [pc, #472]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004162:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800416a:	4973      	ldr	r1, [pc, #460]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004172:	e001      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d041      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004188:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800418c:	d02a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800418e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004192:	d824      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004198:	d008      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800419a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800419e:	d81e      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041a8:	d010      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041aa:	e018      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041ac:	4b62      	ldr	r3, [pc, #392]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a61      	ldr	r2, [pc, #388]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041b8:	e015      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fa73 	bl	80046ac <RCCEx_PLLSAI1_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041ca:	e00c      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3320      	adds	r3, #32
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fb5e 	bl	8004894 <RCCEx_PLLSAI2_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	74fb      	strb	r3, [r7, #19]
      break;
 80041e2:	e000      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ec:	4b52      	ldr	r3, [pc, #328]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041fa:	494f      	ldr	r1, [pc, #316]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004202:	e001      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80a0 	beq.w	8004356 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800421a:	4b47      	ldr	r3, [pc, #284]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00d      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004230:	4b41      	ldr	r3, [pc, #260]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004234:	4a40      	ldr	r2, [pc, #256]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800423a:	6593      	str	r3, [r2, #88]	@ 0x58
 800423c:	4b3e      	ldr	r3, [pc, #248]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004248:	2301      	movs	r3, #1
 800424a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424c:	4b3b      	ldr	r3, [pc, #236]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3a      	ldr	r2, [pc, #232]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004256:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004258:	f7fd f910 	bl	800147c <HAL_GetTick>
 800425c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800425e:	e009      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004260:	f7fd f90c 	bl	800147c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d902      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	74fb      	strb	r3, [r7, #19]
        break;
 8004272:	e005      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004274:	4b31      	ldr	r3, [pc, #196]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0ef      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d15c      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004286:	4b2c      	ldr	r3, [pc, #176]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004290:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01f      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d019      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a4:	4b24      	ldr	r3, [pc, #144]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b0:	4b21      	ldr	r3, [pc, #132]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b6:	4a20      	ldr	r2, [pc, #128]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042d0:	4a19      	ldr	r2, [pc, #100]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fd f8cb 	bl	800147c <HAL_GetTick>
 80042e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e8:	e00b      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fd f8c7 	bl	800147c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d902      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004300:	e006      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004302:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ec      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10c      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004316:	4b08      	ldr	r3, [pc, #32]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004326:	4904      	ldr	r1, [pc, #16]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800432e:	e009      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	74bb      	strb	r3, [r7, #18]
 8004334:	e006      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004344:	7c7b      	ldrb	r3, [r7, #17]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d105      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434a:	4b9e      	ldr	r3, [pc, #632]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	4a9d      	ldr	r2, [pc, #628]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004354:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004362:	4b98      	ldr	r3, [pc, #608]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004368:	f023 0203 	bic.w	r2, r3, #3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	4994      	ldr	r1, [pc, #592]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004384:	4b8f      	ldr	r3, [pc, #572]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438a:	f023 020c 	bic.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004392:	498c      	ldr	r1, [pc, #560]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a6:	4b87      	ldr	r3, [pc, #540]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	4983      	ldr	r1, [pc, #524]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c8:	4b7e      	ldr	r3, [pc, #504]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	497b      	ldr	r1, [pc, #492]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ea:	4b76      	ldr	r3, [pc, #472]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f8:	4972      	ldr	r1, [pc, #456]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800440c:	4b6d      	ldr	r3, [pc, #436]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004412:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	496a      	ldr	r1, [pc, #424]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442e:	4b65      	ldr	r3, [pc, #404]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443c:	4961      	ldr	r1, [pc, #388]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004450:	4b5c      	ldr	r3, [pc, #368]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445e:	4959      	ldr	r1, [pc, #356]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004472:	4b54      	ldr	r3, [pc, #336]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004480:	4950      	ldr	r1, [pc, #320]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004494:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a2:	4948      	ldr	r1, [pc, #288]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044b6:	4b43      	ldr	r3, [pc, #268]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c4:	493f      	ldr	r1, [pc, #252]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d028      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d8:	4b3a      	ldr	r3, [pc, #232]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e6:	4937      	ldr	r1, [pc, #220]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044f6:	d106      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f8:	4b32      	ldr	r3, [pc, #200]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a31      	ldr	r2, [pc, #196]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004502:	60d3      	str	r3, [r2, #12]
 8004504:	e011      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800450a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800450e:	d10c      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	2101      	movs	r1, #1
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f8c8 	bl	80046ac <RCCEx_PLLSAI1_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004526:	7cfb      	ldrb	r3, [r7, #19]
 8004528:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d028      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004536:	4b23      	ldr	r3, [pc, #140]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004544:	491f      	ldr	r1, [pc, #124]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004550:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004554:	d106      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004556:	4b1b      	ldr	r3, [pc, #108]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	4a1a      	ldr	r2, [pc, #104]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004560:	60d3      	str	r3, [r2, #12]
 8004562:	e011      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800456c:	d10c      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f899 	bl	80046ac <RCCEx_PLLSAI1_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02b      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004594:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a2:	4908      	ldr	r1, [pc, #32]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045b2:	d109      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b4:	4b03      	ldr	r3, [pc, #12]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a02      	ldr	r2, [pc, #8]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045be:	60d3      	str	r3, [r2, #12]
 80045c0:	e014      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2101      	movs	r1, #1
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f867 	bl	80046ac <RCCEx_PLLSAI1_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045e2:	7cfb      	ldrb	r3, [r7, #19]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d02f      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045f8:	4b2b      	ldr	r3, [pc, #172]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004606:	4928      	ldr	r1, [pc, #160]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004616:	d10d      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f844 	bl	80046ac <RCCEx_PLLSAI1_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d014      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	74bb      	strb	r3, [r7, #18]
 8004632:	e011      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800463c:	d10c      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3320      	adds	r3, #32
 8004642:	2102      	movs	r1, #2
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f925 	bl	8004894 <RCCEx_PLLSAI2_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800464e:	7cfb      	ldrb	r3, [r7, #19]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004664:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004672:	490d      	ldr	r1, [pc, #52]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004686:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004696:	4904      	ldr	r1, [pc, #16]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800469e:	7cbb      	ldrb	r3, [r7, #18]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021000 	.word	0x40021000

080046ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ba:	4b75      	ldr	r3, [pc, #468]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046c6:	4b72      	ldr	r3, [pc, #456]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0203 	and.w	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d10d      	bne.n	80046f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
       ||
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046de:	4b6c      	ldr	r3, [pc, #432]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
       ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d047      	beq.n	8004782 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
 80046f6:	e044      	b.n	8004782 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d018      	beq.n	8004732 <RCCEx_PLLSAI1_Config+0x86>
 8004700:	2b03      	cmp	r3, #3
 8004702:	d825      	bhi.n	8004750 <RCCEx_PLLSAI1_Config+0xa4>
 8004704:	2b01      	cmp	r3, #1
 8004706:	d002      	beq.n	800470e <RCCEx_PLLSAI1_Config+0x62>
 8004708:	2b02      	cmp	r3, #2
 800470a:	d009      	beq.n	8004720 <RCCEx_PLLSAI1_Config+0x74>
 800470c:	e020      	b.n	8004750 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800470e:	4b60      	ldr	r3, [pc, #384]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11d      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471e:	e01a      	b.n	8004756 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004720:	4b5b      	ldr	r3, [pc, #364]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004728:	2b00      	cmp	r3, #0
 800472a:	d116      	bne.n	800475a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004730:	e013      	b.n	800475a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004732:	4b57      	ldr	r3, [pc, #348]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800473e:	4b54      	ldr	r3, [pc, #336]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800474e:	e006      	b.n	800475e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e004      	b.n	8004760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004756:	bf00      	nop
 8004758:	e002      	b.n	8004760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800475e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10d      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004766:	4b4a      	ldr	r3, [pc, #296]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6819      	ldr	r1, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	430b      	orrs	r3, r1
 800477c:	4944      	ldr	r1, [pc, #272]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d17d      	bne.n	8004884 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004788:	4b41      	ldr	r3, [pc, #260]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a40      	ldr	r2, [pc, #256]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004794:	f7fc fe72 	bl	800147c <HAL_GetTick>
 8004798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800479a:	e009      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800479c:	f7fc fe6e 	bl	800147c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d902      	bls.n	80047b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	73fb      	strb	r3, [r7, #15]
        break;
 80047ae:	e005      	b.n	80047bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047b0:	4b37      	ldr	r3, [pc, #220]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ef      	bne.n	800479c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d160      	bne.n	8004884 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d111      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c8:	4b31      	ldr	r3, [pc, #196]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6892      	ldr	r2, [r2, #8]
 80047d8:	0211      	lsls	r1, r2, #8
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68d2      	ldr	r2, [r2, #12]
 80047de:	0912      	lsrs	r2, r2, #4
 80047e0:	0452      	lsls	r2, r2, #17
 80047e2:	430a      	orrs	r2, r1
 80047e4:	492a      	ldr	r1, [pc, #168]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	610b      	str	r3, [r1, #16]
 80047ea:	e027      	b.n	800483c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d112      	bne.n	8004818 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f2:	4b27      	ldr	r3, [pc, #156]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80047fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6892      	ldr	r2, [r2, #8]
 8004802:	0211      	lsls	r1, r2, #8
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6912      	ldr	r2, [r2, #16]
 8004808:	0852      	lsrs	r2, r2, #1
 800480a:	3a01      	subs	r2, #1
 800480c:	0552      	lsls	r2, r2, #21
 800480e:	430a      	orrs	r2, r1
 8004810:	491f      	ldr	r1, [pc, #124]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	610b      	str	r3, [r1, #16]
 8004816:	e011      	b.n	800483c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004818:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004820:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6892      	ldr	r2, [r2, #8]
 8004828:	0211      	lsls	r1, r2, #8
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6952      	ldr	r2, [r2, #20]
 800482e:	0852      	lsrs	r2, r2, #1
 8004830:	3a01      	subs	r2, #1
 8004832:	0652      	lsls	r2, r2, #25
 8004834:	430a      	orrs	r2, r1
 8004836:	4916      	ldr	r1, [pc, #88]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004838:	4313      	orrs	r3, r2
 800483a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800483c:	4b14      	ldr	r3, [pc, #80]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a13      	ldr	r2, [pc, #76]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004842:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004846:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7fc fe18 	bl	800147c <HAL_GetTick>
 800484c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800484e:	e009      	b.n	8004864 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004850:	f7fc fe14 	bl	800147c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d902      	bls.n	8004864 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	73fb      	strb	r3, [r7, #15]
          break;
 8004862:	e005      	b.n	8004870 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004864:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ef      	beq.n	8004850 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004876:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	4904      	ldr	r1, [pc, #16]	@ (8004890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004880:	4313      	orrs	r3, r2
 8004882:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000

08004894 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048a2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d018      	beq.n	80048e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048ae:	4b67      	ldr	r3, [pc, #412]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0203 	and.w	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d10d      	bne.n	80048da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
       ||
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048c6:	4b61      	ldr	r3, [pc, #388]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
       ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d047      	beq.n	800496a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
 80048de:	e044      	b.n	800496a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d018      	beq.n	800491a <RCCEx_PLLSAI2_Config+0x86>
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d825      	bhi.n	8004938 <RCCEx_PLLSAI2_Config+0xa4>
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d002      	beq.n	80048f6 <RCCEx_PLLSAI2_Config+0x62>
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d009      	beq.n	8004908 <RCCEx_PLLSAI2_Config+0x74>
 80048f4:	e020      	b.n	8004938 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048f6:	4b55      	ldr	r3, [pc, #340]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11d      	bne.n	800493e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004906:	e01a      	b.n	800493e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004908:	4b50      	ldr	r3, [pc, #320]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d116      	bne.n	8004942 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004918:	e013      	b.n	8004942 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800491a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10f      	bne.n	8004946 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004926:	4b49      	ldr	r3, [pc, #292]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004936:	e006      	b.n	8004946 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      break;
 800493c:	e004      	b.n	8004948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004946:	bf00      	nop
    }

    if(status == HAL_OK)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800494e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	430b      	orrs	r3, r1
 8004964:	4939      	ldr	r1, [pc, #228]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004966:	4313      	orrs	r3, r2
 8004968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d167      	bne.n	8004a40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004970:	4b36      	ldr	r3, [pc, #216]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a35      	ldr	r2, [pc, #212]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800497a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497c:	f7fc fd7e 	bl	800147c <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004982:	e009      	b.n	8004998 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004984:	f7fc fd7a 	bl	800147c <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d902      	bls.n	8004998 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	73fb      	strb	r3, [r7, #15]
        break;
 8004996:	e005      	b.n	80049a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004998:	4b2c      	ldr	r3, [pc, #176]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ef      	bne.n	8004984 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d14a      	bne.n	8004a40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d111      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049b0:	4b26      	ldr	r3, [pc, #152]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80049b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6892      	ldr	r2, [r2, #8]
 80049c0:	0211      	lsls	r1, r2, #8
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68d2      	ldr	r2, [r2, #12]
 80049c6:	0912      	lsrs	r2, r2, #4
 80049c8:	0452      	lsls	r2, r2, #17
 80049ca:	430a      	orrs	r2, r1
 80049cc:	491f      	ldr	r1, [pc, #124]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	614b      	str	r3, [r1, #20]
 80049d2:	e011      	b.n	80049f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049d4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6892      	ldr	r2, [r2, #8]
 80049e4:	0211      	lsls	r1, r2, #8
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6912      	ldr	r2, [r2, #16]
 80049ea:	0852      	lsrs	r2, r2, #1
 80049ec:	3a01      	subs	r2, #1
 80049ee:	0652      	lsls	r2, r2, #25
 80049f0:	430a      	orrs	r2, r1
 80049f2:	4916      	ldr	r1, [pc, #88]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049f8:	4b14      	ldr	r3, [pc, #80]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a13      	ldr	r2, [pc, #76]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fc fd3a 	bl	800147c <HAL_GetTick>
 8004a08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a0a:	e009      	b.n	8004a20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a0c:	f7fc fd36 	bl	800147c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d902      	bls.n	8004a20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a1e:	e005      	b.n	8004a2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a20:	4b0a      	ldr	r3, [pc, #40]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0ef      	beq.n	8004a0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	4904      	ldr	r1, [pc, #16]	@ (8004a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000

08004a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e049      	b.n	8004af6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc fac6 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f000 fd16 	bl	80054c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e04f      	b.n	8004bb8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a23      	ldr	r2, [pc, #140]	@ (8004bc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b42:	d018      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1e      	ldr	r2, [pc, #120]	@ (8004bcc <HAL_TIM_Base_Start_IT+0xcc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a19      	ldr	r2, [pc, #100]	@ (8004bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d115      	bne.n	8004ba2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	4b17      	ldr	r3, [pc, #92]	@ (8004bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b06      	cmp	r3, #6
 8004b86:	d015      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0xb4>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8e:	d011      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	e008      	b.n	8004bb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e000      	b.n	8004bb6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	00010007 	.word	0x00010007

08004be0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e049      	b.n	8004c86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f841 	bl	8004c8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 fc4e 	bl	80054c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_TIM_PWM_Start+0x24>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e03c      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d109      	bne.n	8004ce2 <HAL_TIM_PWM_Start+0x3e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	bf14      	ite	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	2300      	moveq	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	e02f      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d109      	bne.n	8004cfc <HAL_TIM_PWM_Start+0x58>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e022      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d109      	bne.n	8004d16 <HAL_TIM_PWM_Start+0x72>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	e015      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d109      	bne.n	8004d30 <HAL_TIM_PWM_Start+0x8c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e008      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e09c      	b.n	8004e84 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_PWM_Start+0xb6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d58:	e023      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_PWM_Start+0xc6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d68:	e01b      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Start+0xd6>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d78:	e013      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Start+0xe6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d88:	e00b      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Start+0xf6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d98:	e003      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2201      	movs	r2, #1
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 ff92 	bl	8005cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a35      	ldr	r2, [pc, #212]	@ (8004e8c <HAL_TIM_PWM_Start+0x1e8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x13e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a34      	ldr	r2, [pc, #208]	@ (8004e90 <HAL_TIM_PWM_Start+0x1ec>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00e      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x13e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a32      	ldr	r2, [pc, #200]	@ (8004e94 <HAL_TIM_PWM_Start+0x1f0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x13e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a31      	ldr	r2, [pc, #196]	@ (8004e98 <HAL_TIM_PWM_Start+0x1f4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x13e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8004e9c <HAL_TIM_PWM_Start+0x1f8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_PWM_Start+0x142>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_TIM_PWM_Start+0x144>
 8004de6:	2300      	movs	r3, #0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a22      	ldr	r2, [pc, #136]	@ (8004e8c <HAL_TIM_PWM_Start+0x1e8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0e:	d018      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a22      	ldr	r2, [pc, #136]	@ (8004ea0 <HAL_TIM_PWM_Start+0x1fc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a21      	ldr	r2, [pc, #132]	@ (8004ea4 <HAL_TIM_PWM_Start+0x200>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea8 <HAL_TIM_PWM_Start+0x204>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a17      	ldr	r2, [pc, #92]	@ (8004e90 <HAL_TIM_PWM_Start+0x1ec>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a15      	ldr	r2, [pc, #84]	@ (8004e94 <HAL_TIM_PWM_Start+0x1f0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d115      	bne.n	8004e6e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	4b18      	ldr	r3, [pc, #96]	@ (8004eac <HAL_TIM_PWM_Start+0x208>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b06      	cmp	r3, #6
 8004e52:	d015      	beq.n	8004e80 <HAL_TIM_PWM_Start+0x1dc>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e5a:	d011      	beq.n	8004e80 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	e008      	b.n	8004e80 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e000      	b.n	8004e82 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	40013400 	.word	0x40013400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	00010007 	.word	0x00010007

08004eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01b      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0202 	mvn.w	r2, #2
 8004ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fac1 	bl	8005482 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fab3 	bl	800546e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fac4 	bl	8005496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d020      	beq.n	8004f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01b      	beq.n	8004f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0204 	mvn.w	r2, #4
 8004f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa9b 	bl	8005482 <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa8d 	bl	800546e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fa9e 	bl	8005496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d020      	beq.n	8004fac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01b      	beq.n	8004fac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0208 	mvn.w	r2, #8
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2204      	movs	r2, #4
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa75 	bl	8005482 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fa67 	bl	800546e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fa78 	bl	8005496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d020      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01b      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0210 	mvn.w	r2, #16
 8004fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2208      	movs	r2, #8
 8004fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fa4f 	bl	8005482 <HAL_TIM_IC_CaptureCallback>
 8004fe4:	e005      	b.n	8004ff2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa41 	bl	800546e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fa52 	bl	8005496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00c      	beq.n	800501c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0201 	mvn.w	r2, #1
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fb fde6 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 ff02 	bl	8005e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00c      	beq.n	8005064 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005050:	2b00      	cmp	r3, #0
 8005052:	d007      	beq.n	8005064 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800505c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fefa 	bl	8005e58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa11 	bl	80054aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00c      	beq.n	80050ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0220 	mvn.w	r2, #32
 80050a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fec2 	bl	8005e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e0ff      	b.n	80052d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b14      	cmp	r3, #20
 80050de:	f200 80f0 	bhi.w	80052c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050e2:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	0800513d 	.word	0x0800513d
 80050ec:	080052c3 	.word	0x080052c3
 80050f0:	080052c3 	.word	0x080052c3
 80050f4:	080052c3 	.word	0x080052c3
 80050f8:	0800517d 	.word	0x0800517d
 80050fc:	080052c3 	.word	0x080052c3
 8005100:	080052c3 	.word	0x080052c3
 8005104:	080052c3 	.word	0x080052c3
 8005108:	080051bf 	.word	0x080051bf
 800510c:	080052c3 	.word	0x080052c3
 8005110:	080052c3 	.word	0x080052c3
 8005114:	080052c3 	.word	0x080052c3
 8005118:	080051ff 	.word	0x080051ff
 800511c:	080052c3 	.word	0x080052c3
 8005120:	080052c3 	.word	0x080052c3
 8005124:	080052c3 	.word	0x080052c3
 8005128:	08005241 	.word	0x08005241
 800512c:	080052c3 	.word	0x080052c3
 8005130:	080052c3 	.word	0x080052c3
 8005134:	080052c3 	.word	0x080052c3
 8005138:	08005281 	.word	0x08005281
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fa56 	bl	80055f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0208 	orr.w	r2, r2, #8
 8005156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0204 	bic.w	r2, r2, #4
 8005166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6999      	ldr	r1, [r3, #24]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	619a      	str	r2, [r3, #24]
      break;
 800517a:	e0a5      	b.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fac6 	bl	8005714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6999      	ldr	r1, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	021a      	lsls	r2, r3, #8
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	619a      	str	r2, [r3, #24]
      break;
 80051bc:	e084      	b.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fb2f 	bl	8005828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0208 	orr.w	r2, r2, #8
 80051d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0204 	bic.w	r2, r2, #4
 80051e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69d9      	ldr	r1, [r3, #28]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	61da      	str	r2, [r3, #28]
      break;
 80051fc:	e064      	b.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fb97 	bl	8005938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69d9      	ldr	r1, [r3, #28]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	021a      	lsls	r2, r3, #8
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	61da      	str	r2, [r3, #28]
      break;
 800523e:	e043      	b.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fbe0 	bl	8005a0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0208 	orr.w	r2, r2, #8
 800525a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0204 	bic.w	r2, r2, #4
 800526a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800527e:	e023      	b.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fc24 	bl	8005ad4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800529a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	021a      	lsls	r2, r3, #8
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052c0:	e002      	b.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
      break;
 80052c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop

080052dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_TIM_ConfigClockSource+0x1c>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e0b6      	b.n	8005466 <HAL_TIM_ConfigClockSource+0x18a>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005316:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800531a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005334:	d03e      	beq.n	80053b4 <HAL_TIM_ConfigClockSource+0xd8>
 8005336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800533a:	f200 8087 	bhi.w	800544c <HAL_TIM_ConfigClockSource+0x170>
 800533e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005342:	f000 8086 	beq.w	8005452 <HAL_TIM_ConfigClockSource+0x176>
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534a:	d87f      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x170>
 800534c:	2b70      	cmp	r3, #112	@ 0x70
 800534e:	d01a      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0xaa>
 8005350:	2b70      	cmp	r3, #112	@ 0x70
 8005352:	d87b      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x170>
 8005354:	2b60      	cmp	r3, #96	@ 0x60
 8005356:	d050      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x11e>
 8005358:	2b60      	cmp	r3, #96	@ 0x60
 800535a:	d877      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x170>
 800535c:	2b50      	cmp	r3, #80	@ 0x50
 800535e:	d03c      	beq.n	80053da <HAL_TIM_ConfigClockSource+0xfe>
 8005360:	2b50      	cmp	r3, #80	@ 0x50
 8005362:	d873      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x170>
 8005364:	2b40      	cmp	r3, #64	@ 0x40
 8005366:	d058      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x13e>
 8005368:	2b40      	cmp	r3, #64	@ 0x40
 800536a:	d86f      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x170>
 800536c:	2b30      	cmp	r3, #48	@ 0x30
 800536e:	d064      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x15e>
 8005370:	2b30      	cmp	r3, #48	@ 0x30
 8005372:	d86b      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x170>
 8005374:	2b20      	cmp	r3, #32
 8005376:	d060      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x15e>
 8005378:	2b20      	cmp	r3, #32
 800537a:	d867      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x170>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d05c      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x15e>
 8005380:	2b10      	cmp	r3, #16
 8005382:	d05a      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x15e>
 8005384:	e062      	b.n	800544c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005396:	f000 fc7d 	bl	8005c94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	609a      	str	r2, [r3, #8]
      break;
 80053b2:	e04f      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c4:	f000 fc66 	bl	8005c94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053d6:	609a      	str	r2, [r3, #8]
      break;
 80053d8:	e03c      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	461a      	mov	r2, r3
 80053e8:	f000 fbda 	bl	8005ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2150      	movs	r1, #80	@ 0x50
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fc33 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 80053f8:	e02c      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005406:	461a      	mov	r2, r3
 8005408:	f000 fbf9 	bl	8005bfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2160      	movs	r1, #96	@ 0x60
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fc23 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005418:	e01c      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	461a      	mov	r2, r3
 8005428:	f000 fbba 	bl	8005ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2140      	movs	r1, #64	@ 0x40
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fc13 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005438:	e00c      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f000 fc0a 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 800544a:	e003      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      break;
 8005450:	e000      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a40      	ldr	r2, [pc, #256]	@ (80055d4 <TIM_Base_SetConfig+0x114>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <TIM_Base_SetConfig+0x40>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054de:	d00f      	beq.n	8005500 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a3d      	ldr	r2, [pc, #244]	@ (80055d8 <TIM_Base_SetConfig+0x118>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a3c      	ldr	r2, [pc, #240]	@ (80055dc <TIM_Base_SetConfig+0x11c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a3b      	ldr	r2, [pc, #236]	@ (80055e0 <TIM_Base_SetConfig+0x120>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a3a      	ldr	r2, [pc, #232]	@ (80055e4 <TIM_Base_SetConfig+0x124>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d108      	bne.n	8005512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2f      	ldr	r2, [pc, #188]	@ (80055d4 <TIM_Base_SetConfig+0x114>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d01f      	beq.n	800555a <TIM_Base_SetConfig+0x9a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005520:	d01b      	beq.n	800555a <TIM_Base_SetConfig+0x9a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2c      	ldr	r2, [pc, #176]	@ (80055d8 <TIM_Base_SetConfig+0x118>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d017      	beq.n	800555a <TIM_Base_SetConfig+0x9a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a2b      	ldr	r2, [pc, #172]	@ (80055dc <TIM_Base_SetConfig+0x11c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <TIM_Base_SetConfig+0x9a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2a      	ldr	r2, [pc, #168]	@ (80055e0 <TIM_Base_SetConfig+0x120>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00f      	beq.n	800555a <TIM_Base_SetConfig+0x9a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a29      	ldr	r2, [pc, #164]	@ (80055e4 <TIM_Base_SetConfig+0x124>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00b      	beq.n	800555a <TIM_Base_SetConfig+0x9a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a28      	ldr	r2, [pc, #160]	@ (80055e8 <TIM_Base_SetConfig+0x128>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <TIM_Base_SetConfig+0x9a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a27      	ldr	r2, [pc, #156]	@ (80055ec <TIM_Base_SetConfig+0x12c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_Base_SetConfig+0x9a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a26      	ldr	r2, [pc, #152]	@ (80055f0 <TIM_Base_SetConfig+0x130>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d108      	bne.n	800556c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a10      	ldr	r2, [pc, #64]	@ (80055d4 <TIM_Base_SetConfig+0x114>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00f      	beq.n	80055b8 <TIM_Base_SetConfig+0xf8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a12      	ldr	r2, [pc, #72]	@ (80055e4 <TIM_Base_SetConfig+0x124>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00b      	beq.n	80055b8 <TIM_Base_SetConfig+0xf8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a11      	ldr	r2, [pc, #68]	@ (80055e8 <TIM_Base_SetConfig+0x128>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <TIM_Base_SetConfig+0xf8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a10      	ldr	r2, [pc, #64]	@ (80055ec <TIM_Base_SetConfig+0x12c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_Base_SetConfig+0xf8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a0f      	ldr	r2, [pc, #60]	@ (80055f0 <TIM_Base_SetConfig+0x130>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d103      	bne.n	80055c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	615a      	str	r2, [r3, #20]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40013400 	.word	0x40013400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40014400 	.word	0x40014400
 80055f0:	40014800 	.word	0x40014800

080055f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	f023 0201 	bic.w	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 0302 	bic.w	r3, r3, #2
 8005640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a2c      	ldr	r2, [pc, #176]	@ (8005700 <TIM_OC1_SetConfig+0x10c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_OC1_SetConfig+0x80>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a2b      	ldr	r2, [pc, #172]	@ (8005704 <TIM_OC1_SetConfig+0x110>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_OC1_SetConfig+0x80>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a2a      	ldr	r2, [pc, #168]	@ (8005708 <TIM_OC1_SetConfig+0x114>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_OC1_SetConfig+0x80>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a29      	ldr	r2, [pc, #164]	@ (800570c <TIM_OC1_SetConfig+0x118>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC1_SetConfig+0x80>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a28      	ldr	r2, [pc, #160]	@ (8005710 <TIM_OC1_SetConfig+0x11c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d10c      	bne.n	800568e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0308 	bic.w	r3, r3, #8
 800567a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f023 0304 	bic.w	r3, r3, #4
 800568c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1b      	ldr	r2, [pc, #108]	@ (8005700 <TIM_OC1_SetConfig+0x10c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00f      	beq.n	80056b6 <TIM_OC1_SetConfig+0xc2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1a      	ldr	r2, [pc, #104]	@ (8005704 <TIM_OC1_SetConfig+0x110>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00b      	beq.n	80056b6 <TIM_OC1_SetConfig+0xc2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a19      	ldr	r2, [pc, #100]	@ (8005708 <TIM_OC1_SetConfig+0x114>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d007      	beq.n	80056b6 <TIM_OC1_SetConfig+0xc2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a18      	ldr	r2, [pc, #96]	@ (800570c <TIM_OC1_SetConfig+0x118>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d003      	beq.n	80056b6 <TIM_OC1_SetConfig+0xc2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a17      	ldr	r2, [pc, #92]	@ (8005710 <TIM_OC1_SetConfig+0x11c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d111      	bne.n	80056da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	621a      	str	r2, [r3, #32]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40012c00 	.word	0x40012c00
 8005704:	40013400 	.word	0x40013400
 8005708:	40014000 	.word	0x40014000
 800570c:	40014400 	.word	0x40014400
 8005710:	40014800 	.word	0x40014800

08005714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f023 0210 	bic.w	r2, r3, #16
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0320 	bic.w	r3, r3, #32
 8005762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a28      	ldr	r2, [pc, #160]	@ (8005814 <TIM_OC2_SetConfig+0x100>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_OC2_SetConfig+0x6c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a27      	ldr	r2, [pc, #156]	@ (8005818 <TIM_OC2_SetConfig+0x104>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10d      	bne.n	800579c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a1d      	ldr	r2, [pc, #116]	@ (8005814 <TIM_OC2_SetConfig+0x100>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_OC2_SetConfig+0xb0>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005818 <TIM_OC2_SetConfig+0x104>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_OC2_SetConfig+0xb0>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a1b      	ldr	r2, [pc, #108]	@ (800581c <TIM_OC2_SetConfig+0x108>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_OC2_SetConfig+0xb0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005820 <TIM_OC2_SetConfig+0x10c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC2_SetConfig+0xb0>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a19      	ldr	r2, [pc, #100]	@ (8005824 <TIM_OC2_SetConfig+0x110>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d113      	bne.n	80057ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800

08005828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a27      	ldr	r2, [pc, #156]	@ (8005924 <TIM_OC3_SetConfig+0xfc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d003      	beq.n	8005892 <TIM_OC3_SetConfig+0x6a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a26      	ldr	r2, [pc, #152]	@ (8005928 <TIM_OC3_SetConfig+0x100>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d10d      	bne.n	80058ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005924 <TIM_OC3_SetConfig+0xfc>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00f      	beq.n	80058d6 <TIM_OC3_SetConfig+0xae>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005928 <TIM_OC3_SetConfig+0x100>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00b      	beq.n	80058d6 <TIM_OC3_SetConfig+0xae>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <TIM_OC3_SetConfig+0x104>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d007      	beq.n	80058d6 <TIM_OC3_SetConfig+0xae>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a19      	ldr	r2, [pc, #100]	@ (8005930 <TIM_OC3_SetConfig+0x108>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_OC3_SetConfig+0xae>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a18      	ldr	r2, [pc, #96]	@ (8005934 <TIM_OC3_SetConfig+0x10c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d113      	bne.n	80058fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40013400 	.word	0x40013400
 800592c:	40014000 	.word	0x40014000
 8005930:	40014400 	.word	0x40014400
 8005934:	40014800 	.word	0x40014800

08005938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	031b      	lsls	r3, r3, #12
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a18      	ldr	r2, [pc, #96]	@ (80059f8 <TIM_OC4_SetConfig+0xc0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00f      	beq.n	80059bc <TIM_OC4_SetConfig+0x84>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a17      	ldr	r2, [pc, #92]	@ (80059fc <TIM_OC4_SetConfig+0xc4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_OC4_SetConfig+0x84>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a16      	ldr	r2, [pc, #88]	@ (8005a00 <TIM_OC4_SetConfig+0xc8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_OC4_SetConfig+0x84>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a15      	ldr	r2, [pc, #84]	@ (8005a04 <TIM_OC4_SetConfig+0xcc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC4_SetConfig+0x84>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a14      	ldr	r2, [pc, #80]	@ (8005a08 <TIM_OC4_SetConfig+0xd0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d109      	bne.n	80059d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	019b      	lsls	r3, r3, #6
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40013400 	.word	0x40013400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800

08005a0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	041b      	lsls	r3, r3, #16
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a17      	ldr	r2, [pc, #92]	@ (8005ac0 <TIM_OC5_SetConfig+0xb4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_OC5_SetConfig+0x7a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a16      	ldr	r2, [pc, #88]	@ (8005ac4 <TIM_OC5_SetConfig+0xb8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_OC5_SetConfig+0x7a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a15      	ldr	r2, [pc, #84]	@ (8005ac8 <TIM_OC5_SetConfig+0xbc>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_OC5_SetConfig+0x7a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a14      	ldr	r2, [pc, #80]	@ (8005acc <TIM_OC5_SetConfig+0xc0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_OC5_SetConfig+0x7a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a13      	ldr	r2, [pc, #76]	@ (8005ad0 <TIM_OC5_SetConfig+0xc4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d109      	bne.n	8005a9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40013400 	.word	0x40013400
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40014400 	.word	0x40014400
 8005ad0:	40014800 	.word	0x40014800

08005ad4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	051b      	lsls	r3, r3, #20
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a18      	ldr	r2, [pc, #96]	@ (8005b8c <TIM_OC6_SetConfig+0xb8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00f      	beq.n	8005b50 <TIM_OC6_SetConfig+0x7c>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <TIM_OC6_SetConfig+0xbc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <TIM_OC6_SetConfig+0x7c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a16      	ldr	r2, [pc, #88]	@ (8005b94 <TIM_OC6_SetConfig+0xc0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_OC6_SetConfig+0x7c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a15      	ldr	r2, [pc, #84]	@ (8005b98 <TIM_OC6_SetConfig+0xc4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_OC6_SetConfig+0x7c>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a14      	ldr	r2, [pc, #80]	@ (8005b9c <TIM_OC6_SetConfig+0xc8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d109      	bne.n	8005b64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	029b      	lsls	r3, r3, #10
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40013400 	.word	0x40013400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800

08005ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0201 	bic.w	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 030a 	bic.w	r3, r3, #10
 8005bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b087      	sub	sp, #28
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f023 0210 	bic.w	r2, r3, #16
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	031b      	lsls	r3, r3, #12
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f043 0307 	orr.w	r3, r3, #7
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	609a      	str	r2, [r3, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	609a      	str	r2, [r3, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1a      	ldr	r2, [r3, #32]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e068      	b.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2d      	ldr	r2, [pc, #180]	@ (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d108      	bne.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01d      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005daa:	d018      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1a      	ldr	r2, [pc, #104]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00e      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a18      	ldr	r2, [pc, #96]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a13      	ldr	r2, [pc, #76]	@ (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a14      	ldr	r2, [pc, #80]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d10c      	bne.n	8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40013400 	.word	0x40013400
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00
 8005e2c:	40014000 	.word	0x40014000

08005e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e040      	b.n	8005f00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fb f94e 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2224      	movs	r2, #36	@ 0x24
 8005e98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fe74 	bl	8006ba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fbb9 	bl	8006630 <UART_SetConfig>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e01b      	b.n	8005f00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fef3 	bl	8006ce4 <UART_CheckIdleState>
 8005efe:	4603      	mov	r3, r0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	@ 0x28
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	4613      	mov	r3, r2
 8005f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d177      	bne.n	8006010 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_UART_Transmit+0x24>
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e070      	b.n	8006012 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2221      	movs	r2, #33	@ 0x21
 8005f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f3e:	f7fb fa9d 	bl	800147c <HAL_GetTick>
 8005f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	88fa      	ldrh	r2, [r7, #6]
 8005f48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	88fa      	ldrh	r2, [r7, #6]
 8005f50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5c:	d108      	bne.n	8005f70 <HAL_UART_Transmit+0x68>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d104      	bne.n	8005f70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	e003      	b.n	8005f78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f78:	e02f      	b.n	8005fda <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2200      	movs	r2, #0
 8005f82:	2180      	movs	r1, #128	@ 0x80
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 ff55 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e03b      	b.n	8006012 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	881a      	ldrh	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fac:	b292      	uxth	r2, r2
 8005fae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	e007      	b.n	8005fc8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1c9      	bne.n	8005f7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2140      	movs	r1, #64	@ 0x40
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 ff1f 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e005      	b.n	8006012 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	e000      	b.n	8006012 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006010:	2302      	movs	r3, #2
  }
}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b0ba      	sub	sp, #232	@ 0xe8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006042:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006046:	f640 030f 	movw	r3, #2063	@ 0x80f
 800604a:	4013      	ands	r3, r2
 800604c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006054:	2b00      	cmp	r3, #0
 8006056:	d115      	bne.n	8006084 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00f      	beq.n	8006084 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 82ae 	beq.w	80065d6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	4798      	blx	r3
      }
      return;
 8006082:	e2a8      	b.n	80065d6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8117 	beq.w	80062bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800608e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800609a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800609e:	4b85      	ldr	r3, [pc, #532]	@ (80062b4 <HAL_UART_IRQHandler+0x298>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 810a 	beq.w	80062bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d011      	beq.n	80060d8 <HAL_UART_IRQHandler+0xbc>
 80060b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2201      	movs	r2, #1
 80060c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ce:	f043 0201 	orr.w	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d011      	beq.n	8006108 <HAL_UART_IRQHandler+0xec>
 80060e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2202      	movs	r2, #2
 80060f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060fe:	f043 0204 	orr.w	r2, r3, #4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d011      	beq.n	8006138 <HAL_UART_IRQHandler+0x11c>
 8006114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2204      	movs	r2, #4
 8006126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800612e:	f043 0202 	orr.w	r2, r3, #2
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d017      	beq.n	8006174 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006154:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2208      	movs	r2, #8
 8006162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800616a:	f043 0208 	orr.w	r2, r3, #8
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800617c:	2b00      	cmp	r3, #0
 800617e:	d012      	beq.n	80061a6 <HAL_UART_IRQHandler+0x18a>
 8006180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006184:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00c      	beq.n	80061a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8214 	beq.w	80065da <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00d      	beq.n	80061da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d007      	beq.n	80061da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ee:	2b40      	cmp	r3, #64	@ 0x40
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d04f      	beq.n	800629e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fe7f 	bl	8006f02 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620e:	2b40      	cmp	r3, #64	@ 0x40
 8006210:	d141      	bne.n	8006296 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3308      	adds	r3, #8
 8006218:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800622c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800623e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800624a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1d9      	bne.n	8006212 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006262:	2b00      	cmp	r3, #0
 8006264:	d013      	beq.n	800628e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800626a:	4a13      	ldr	r2, [pc, #76]	@ (80062b8 <HAL_UART_IRQHandler+0x29c>)
 800626c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006272:	4618      	mov	r0, r3
 8006274:	f7fc feb1 	bl	8002fda <HAL_DMA_Abort_IT>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d017      	beq.n	80062ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006288:	4610      	mov	r0, r2
 800628a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	e00f      	b.n	80062ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f9b8 	bl	8006604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	e00b      	b.n	80062ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f9b4 	bl	8006604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629c:	e007      	b.n	80062ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f9b0 	bl	8006604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80062ac:	e195      	b.n	80065da <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ae:	bf00      	nop
    return;
 80062b0:	e193      	b.n	80065da <HAL_UART_IRQHandler+0x5be>
 80062b2:	bf00      	nop
 80062b4:	04000120 	.word	0x04000120
 80062b8:	08006fcb 	.word	0x08006fcb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	f040 814e 	bne.w	8006562 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8147 	beq.w	8006562 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8140 	beq.w	8006562 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2210      	movs	r2, #16
 80062e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	f040 80b8 	bne.w	800646a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006306:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 8167 	beq.w	80065de <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800631a:	429a      	cmp	r2, r3
 800631c:	f080 815f 	bcs.w	80065de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006326:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	f040 8086 	bne.w	8006448 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006350:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006358:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006366:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800636a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006372:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800637e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1da      	bne.n	800633c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3308      	adds	r3, #8
 80063a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e1      	bne.n	8006386 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3308      	adds	r3, #8
 80063c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3308      	adds	r3, #8
 80063e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e3      	bne.n	80063c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006418:	f023 0310 	bic.w	r3, r3, #16
 800641c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800642a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800642c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006430:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e4      	bne.n	8006408 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006442:	4618      	mov	r0, r3
 8006444:	f7fc fd8b 	bl	8002f5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800645a:	b29b      	uxth	r3, r3
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	b29b      	uxth	r3, r3
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8d8 	bl	8006618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006468:	e0b9      	b.n	80065de <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006476:	b29b      	uxth	r3, r3
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80ab 	beq.w	80065e2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800648c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80a6 	beq.w	80065e2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e4      	bne.n	8006496 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	623b      	str	r3, [r7, #32]
   return(result);
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80064f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f8:	e841 2300 	strex	r3, r2, [r1]
 80064fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e3      	bne.n	80064cc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	60fb      	str	r3, [r7, #12]
   return(result);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f023 0310 	bic.w	r3, r3, #16
 800652c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	69b9      	ldr	r1, [r7, #24]
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	617b      	str	r3, [r7, #20]
   return(result);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e4      	bne.n	8006518 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2202      	movs	r2, #2
 8006552:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f85c 	bl	8006618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006560:	e03f      	b.n	80065e2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00e      	beq.n	800658c <HAL_UART_IRQHandler+0x570>
 800656e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006582:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fd60 	bl	800704a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800658a:	e02d      	b.n	80065e8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00e      	beq.n	80065b6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01c      	beq.n	80065e6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
    }
    return;
 80065b4:	e017      	b.n	80065e6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d012      	beq.n	80065e8 <HAL_UART_IRQHandler+0x5cc>
 80065c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fd11 	bl	8006ff6 <UART_EndTransmit_IT>
    return;
 80065d4:	e008      	b.n	80065e8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80065d6:	bf00      	nop
 80065d8:	e006      	b.n	80065e8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80065da:	bf00      	nop
 80065dc:	e004      	b.n	80065e8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80065de:	bf00      	nop
 80065e0:	e002      	b.n	80065e8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80065e2:	bf00      	nop
 80065e4:	e000      	b.n	80065e8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80065e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80065e8:	37e8      	adds	r7, #232	@ 0xe8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop

080065f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006634:	b08a      	sub	sp, #40	@ 0x28
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	431a      	orrs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	431a      	orrs	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	4313      	orrs	r3, r2
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4ba4      	ldr	r3, [pc, #656]	@ (80068f0 <UART_SetConfig+0x2c0>)
 8006660:	4013      	ands	r3, r2
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006668:	430b      	orrs	r3, r1
 800666a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a99      	ldr	r2, [pc, #612]	@ (80068f4 <UART_SetConfig+0x2c4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d004      	beq.n	800669c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006698:	4313      	orrs	r3, r2
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ac:	430a      	orrs	r2, r1
 80066ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a90      	ldr	r2, [pc, #576]	@ (80068f8 <UART_SetConfig+0x2c8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d126      	bne.n	8006708 <UART_SetConfig+0xd8>
 80066ba:	4b90      	ldr	r3, [pc, #576]	@ (80068fc <UART_SetConfig+0x2cc>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d81b      	bhi.n	8006700 <UART_SetConfig+0xd0>
 80066c8:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <UART_SetConfig+0xa0>)
 80066ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ce:	bf00      	nop
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	080066f9 	.word	0x080066f9
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e6:	e116      	b.n	8006916 <UART_SetConfig+0x2e6>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ee:	e112      	b.n	8006916 <UART_SetConfig+0x2e6>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f6:	e10e      	b.n	8006916 <UART_SetConfig+0x2e6>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fe:	e10a      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006706:	e106      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a7c      	ldr	r2, [pc, #496]	@ (8006900 <UART_SetConfig+0x2d0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d138      	bne.n	8006784 <UART_SetConfig+0x154>
 8006712:	4b7a      	ldr	r3, [pc, #488]	@ (80068fc <UART_SetConfig+0x2cc>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b0c      	cmp	r3, #12
 800671e:	d82d      	bhi.n	800677c <UART_SetConfig+0x14c>
 8006720:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <UART_SetConfig+0xf8>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	0800675d 	.word	0x0800675d
 800672c:	0800677d 	.word	0x0800677d
 8006730:	0800677d 	.word	0x0800677d
 8006734:	0800677d 	.word	0x0800677d
 8006738:	0800676d 	.word	0x0800676d
 800673c:	0800677d 	.word	0x0800677d
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800677d 	.word	0x0800677d
 8006748:	08006765 	.word	0x08006765
 800674c:	0800677d 	.word	0x0800677d
 8006750:	0800677d 	.word	0x0800677d
 8006754:	0800677d 	.word	0x0800677d
 8006758:	08006775 	.word	0x08006775
 800675c:	2300      	movs	r3, #0
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006762:	e0d8      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006764:	2302      	movs	r3, #2
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676a:	e0d4      	b.n	8006916 <UART_SetConfig+0x2e6>
 800676c:	2304      	movs	r3, #4
 800676e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006772:	e0d0      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006774:	2308      	movs	r3, #8
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677a:	e0cc      	b.n	8006916 <UART_SetConfig+0x2e6>
 800677c:	2310      	movs	r3, #16
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006782:	e0c8      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a5e      	ldr	r2, [pc, #376]	@ (8006904 <UART_SetConfig+0x2d4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d125      	bne.n	80067da <UART_SetConfig+0x1aa>
 800678e:	4b5b      	ldr	r3, [pc, #364]	@ (80068fc <UART_SetConfig+0x2cc>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006794:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006798:	2b30      	cmp	r3, #48	@ 0x30
 800679a:	d016      	beq.n	80067ca <UART_SetConfig+0x19a>
 800679c:	2b30      	cmp	r3, #48	@ 0x30
 800679e:	d818      	bhi.n	80067d2 <UART_SetConfig+0x1a2>
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d00a      	beq.n	80067ba <UART_SetConfig+0x18a>
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d814      	bhi.n	80067d2 <UART_SetConfig+0x1a2>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <UART_SetConfig+0x182>
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d008      	beq.n	80067c2 <UART_SetConfig+0x192>
 80067b0:	e00f      	b.n	80067d2 <UART_SetConfig+0x1a2>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067b8:	e0ad      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067ba:	2302      	movs	r3, #2
 80067bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c0:	e0a9      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067c2:	2304      	movs	r3, #4
 80067c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c8:	e0a5      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067ca:	2308      	movs	r3, #8
 80067cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d0:	e0a1      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067d2:	2310      	movs	r3, #16
 80067d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d8:	e09d      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a4a      	ldr	r2, [pc, #296]	@ (8006908 <UART_SetConfig+0x2d8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d125      	bne.n	8006830 <UART_SetConfig+0x200>
 80067e4:	4b45      	ldr	r3, [pc, #276]	@ (80068fc <UART_SetConfig+0x2cc>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80067f0:	d016      	beq.n	8006820 <UART_SetConfig+0x1f0>
 80067f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067f4:	d818      	bhi.n	8006828 <UART_SetConfig+0x1f8>
 80067f6:	2b80      	cmp	r3, #128	@ 0x80
 80067f8:	d00a      	beq.n	8006810 <UART_SetConfig+0x1e0>
 80067fa:	2b80      	cmp	r3, #128	@ 0x80
 80067fc:	d814      	bhi.n	8006828 <UART_SetConfig+0x1f8>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <UART_SetConfig+0x1d8>
 8006802:	2b40      	cmp	r3, #64	@ 0x40
 8006804:	d008      	beq.n	8006818 <UART_SetConfig+0x1e8>
 8006806:	e00f      	b.n	8006828 <UART_SetConfig+0x1f8>
 8006808:	2300      	movs	r3, #0
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800680e:	e082      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006810:	2302      	movs	r3, #2
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006816:	e07e      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006818:	2304      	movs	r3, #4
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800681e:	e07a      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006820:	2308      	movs	r3, #8
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006826:	e076      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006828:	2310      	movs	r3, #16
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682e:	e072      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a35      	ldr	r2, [pc, #212]	@ (800690c <UART_SetConfig+0x2dc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d12a      	bne.n	8006890 <UART_SetConfig+0x260>
 800683a:	4b30      	ldr	r3, [pc, #192]	@ (80068fc <UART_SetConfig+0x2cc>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006848:	d01a      	beq.n	8006880 <UART_SetConfig+0x250>
 800684a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800684e:	d81b      	bhi.n	8006888 <UART_SetConfig+0x258>
 8006850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006854:	d00c      	beq.n	8006870 <UART_SetConfig+0x240>
 8006856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800685a:	d815      	bhi.n	8006888 <UART_SetConfig+0x258>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <UART_SetConfig+0x238>
 8006860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006864:	d008      	beq.n	8006878 <UART_SetConfig+0x248>
 8006866:	e00f      	b.n	8006888 <UART_SetConfig+0x258>
 8006868:	2300      	movs	r3, #0
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800686e:	e052      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006870:	2302      	movs	r3, #2
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006876:	e04e      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006878:	2304      	movs	r3, #4
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800687e:	e04a      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006880:	2308      	movs	r3, #8
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006886:	e046      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006888:	2310      	movs	r3, #16
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688e:	e042      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <UART_SetConfig+0x2c4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d13a      	bne.n	8006910 <UART_SetConfig+0x2e0>
 800689a:	4b18      	ldr	r3, [pc, #96]	@ (80068fc <UART_SetConfig+0x2cc>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a8:	d01a      	beq.n	80068e0 <UART_SetConfig+0x2b0>
 80068aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068ae:	d81b      	bhi.n	80068e8 <UART_SetConfig+0x2b8>
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b4:	d00c      	beq.n	80068d0 <UART_SetConfig+0x2a0>
 80068b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ba:	d815      	bhi.n	80068e8 <UART_SetConfig+0x2b8>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <UART_SetConfig+0x298>
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c4:	d008      	beq.n	80068d8 <UART_SetConfig+0x2a8>
 80068c6:	e00f      	b.n	80068e8 <UART_SetConfig+0x2b8>
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ce:	e022      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068d0:	2302      	movs	r3, #2
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d6:	e01e      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068d8:	2304      	movs	r3, #4
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068de:	e01a      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068e0:	2308      	movs	r3, #8
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e6:	e016      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ee:	e012      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068f0:	efff69f3 	.word	0xefff69f3
 80068f4:	40008000 	.word	0x40008000
 80068f8:	40013800 	.word	0x40013800
 80068fc:	40021000 	.word	0x40021000
 8006900:	40004400 	.word	0x40004400
 8006904:	40004800 	.word	0x40004800
 8006908:	40004c00 	.word	0x40004c00
 800690c:	40005000 	.word	0x40005000
 8006910:	2310      	movs	r3, #16
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a9f      	ldr	r2, [pc, #636]	@ (8006b98 <UART_SetConfig+0x568>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d17a      	bne.n	8006a16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006920:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006924:	2b08      	cmp	r3, #8
 8006926:	d824      	bhi.n	8006972 <UART_SetConfig+0x342>
 8006928:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <UART_SetConfig+0x300>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006955 	.word	0x08006955
 8006934:	08006973 	.word	0x08006973
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006973 	.word	0x08006973
 8006940:	08006963 	.word	0x08006963
 8006944:	08006973 	.word	0x08006973
 8006948:	08006973 	.word	0x08006973
 800694c:	08006973 	.word	0x08006973
 8006950:	0800696b 	.word	0x0800696b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fd fb34 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8006958:	61f8      	str	r0, [r7, #28]
        break;
 800695a:	e010      	b.n	800697e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800695c:	4b8f      	ldr	r3, [pc, #572]	@ (8006b9c <UART_SetConfig+0x56c>)
 800695e:	61fb      	str	r3, [r7, #28]
        break;
 8006960:	e00d      	b.n	800697e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006962:	f7fd fa95 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8006966:	61f8      	str	r0, [r7, #28]
        break;
 8006968:	e009      	b.n	800697e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800696e:	61fb      	str	r3, [r7, #28]
        break;
 8006970:	e005      	b.n	800697e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800697c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80fb 	beq.w	8006b7c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	4413      	add	r3, r2
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	429a      	cmp	r2, r3
 8006994:	d305      	bcc.n	80069a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d903      	bls.n	80069aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069a8:	e0e8      	b.n	8006b7c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	2200      	movs	r2, #0
 80069ae:	461c      	mov	r4, r3
 80069b0:	4615      	mov	r5, r2
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	022b      	lsls	r3, r5, #8
 80069bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069c0:	0222      	lsls	r2, r4, #8
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	6849      	ldr	r1, [r1, #4]
 80069c6:	0849      	lsrs	r1, r1, #1
 80069c8:	2000      	movs	r0, #0
 80069ca:	4688      	mov	r8, r1
 80069cc:	4681      	mov	r9, r0
 80069ce:	eb12 0a08 	adds.w	sl, r2, r8
 80069d2:	eb43 0b09 	adc.w	fp, r3, r9
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	603b      	str	r3, [r7, #0]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e4:	4650      	mov	r0, sl
 80069e6:	4659      	mov	r1, fp
 80069e8:	f7f9 fc42 	bl	8000270 <__aeabi_uldivmod>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4613      	mov	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069fa:	d308      	bcc.n	8006a0e <UART_SetConfig+0x3de>
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a02:	d204      	bcs.n	8006a0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	60da      	str	r2, [r3, #12]
 8006a0c:	e0b6      	b.n	8006b7c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a14:	e0b2      	b.n	8006b7c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a1e:	d15e      	bne.n	8006ade <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d828      	bhi.n	8006a7a <UART_SetConfig+0x44a>
 8006a28:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <UART_SetConfig+0x400>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	08006a7b 	.word	0x08006a7b
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a7b 	.word	0x08006a7b
 8006a48:	08006a7b 	.word	0x08006a7b
 8006a4c:	08006a7b 	.word	0x08006a7b
 8006a50:	08006a73 	.word	0x08006a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7fd fab4 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8006a58:	61f8      	str	r0, [r7, #28]
        break;
 8006a5a:	e014      	b.n	8006a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7fd fac6 	bl	8003fec <HAL_RCC_GetPCLK2Freq>
 8006a60:	61f8      	str	r0, [r7, #28]
        break;
 8006a62:	e010      	b.n	8006a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a64:	4b4d      	ldr	r3, [pc, #308]	@ (8006b9c <UART_SetConfig+0x56c>)
 8006a66:	61fb      	str	r3, [r7, #28]
        break;
 8006a68:	e00d      	b.n	8006a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6a:	f7fd fa11 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8006a6e:	61f8      	str	r0, [r7, #28]
        break;
 8006a70:	e009      	b.n	8006a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a76:	61fb      	str	r3, [r7, #28]
        break;
 8006a78:	e005      	b.n	8006a86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d077      	beq.n	8006b7c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005a      	lsls	r2, r3, #1
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	441a      	add	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b0f      	cmp	r3, #15
 8006aa6:	d916      	bls.n	8006ad6 <UART_SetConfig+0x4a6>
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aae:	d212      	bcs.n	8006ad6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f023 030f 	bic.w	r3, r3, #15
 8006ab8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	8afb      	ldrh	r3, [r7, #22]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	8afa      	ldrh	r2, [r7, #22]
 8006ad2:	60da      	str	r2, [r3, #12]
 8006ad4:	e052      	b.n	8006b7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006adc:	e04e      	b.n	8006b7c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ade:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d827      	bhi.n	8006b36 <UART_SetConfig+0x506>
 8006ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <UART_SetConfig+0x4bc>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b37 	.word	0x08006b37
 8006afc:	08006b27 	.word	0x08006b27
 8006b00:	08006b37 	.word	0x08006b37
 8006b04:	08006b37 	.word	0x08006b37
 8006b08:	08006b37 	.word	0x08006b37
 8006b0c:	08006b2f 	.word	0x08006b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fd fa56 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8006b14:	61f8      	str	r0, [r7, #28]
        break;
 8006b16:	e014      	b.n	8006b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fd fa68 	bl	8003fec <HAL_RCC_GetPCLK2Freq>
 8006b1c:	61f8      	str	r0, [r7, #28]
        break;
 8006b1e:	e010      	b.n	8006b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b20:	4b1e      	ldr	r3, [pc, #120]	@ (8006b9c <UART_SetConfig+0x56c>)
 8006b22:	61fb      	str	r3, [r7, #28]
        break;
 8006b24:	e00d      	b.n	8006b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b26:	f7fd f9b3 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8006b2a:	61f8      	str	r0, [r7, #28]
        break;
 8006b2c:	e009      	b.n	8006b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b32:	61fb      	str	r3, [r7, #28]
        break;
 8006b34:	e005      	b.n	8006b42 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b40:	bf00      	nop
    }

    if (pclk != 0U)
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d019      	beq.n	8006b7c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	085a      	lsrs	r2, r3, #1
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d909      	bls.n	8006b76 <UART_SetConfig+0x546>
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b68:	d205      	bcs.n	8006b76 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60da      	str	r2, [r3, #12]
 8006b74:	e002      	b.n	8006b7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3728      	adds	r7, #40	@ 0x28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b96:	bf00      	nop
 8006b98:	40008000 	.word	0x40008000
 8006b9c:	00f42400 	.word	0x00f42400

08006ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01a      	beq.n	8006cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c9e:	d10a      	bne.n	8006cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	605a      	str	r2, [r3, #4]
  }
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b098      	sub	sp, #96	@ 0x60
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cf4:	f7fa fbc2 	bl	800147c <HAL_GetTick>
 8006cf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d12e      	bne.n	8006d66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d10:	2200      	movs	r2, #0
 8006d12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f88c 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d021      	beq.n	8006d66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e6      	bne.n	8006d22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e062      	b.n	8006e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d149      	bne.n	8006e08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f856 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d03c      	beq.n	8006e08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e6      	bne.n	8006d8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006de0:	61fa      	str	r2, [r7, #28]
 8006de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	69b9      	ldr	r1, [r7, #24]
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	617b      	str	r3, [r7, #20]
   return(result);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e5      	bne.n	8006dc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e011      	b.n	8006e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3758      	adds	r7, #88	@ 0x58
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	4613      	mov	r3, r2
 8006e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e44:	e049      	b.n	8006eda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d045      	beq.n	8006eda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4e:	f7fa fb15 	bl	800147c <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d302      	bcc.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e048      	b.n	8006efa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d031      	beq.n	8006eda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d110      	bne.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2208      	movs	r2, #8
 8006e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f838 	bl	8006f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2208      	movs	r2, #8
 8006e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e029      	b.n	8006efa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eb4:	d111      	bne.n	8006eda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f81e 	bl	8006f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e00f      	b.n	8006efa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	bf0c      	ite	eq
 8006eea:	2301      	moveq	r3, #1
 8006eec:	2300      	movne	r3, #0
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d0a6      	beq.n	8006e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b095      	sub	sp, #84	@ 0x54
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e6      	bne.n	8006f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e5      	bne.n	8006f3c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d118      	bne.n	8006faa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f023 0310 	bic.w	r3, r3, #16
 8006f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f96:	61bb      	str	r3, [r7, #24]
 8006f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	6979      	ldr	r1, [r7, #20]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1e6      	bne.n	8006f78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006fbe:	bf00      	nop
 8006fc0:	3754      	adds	r7, #84	@ 0x54
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7ff fb0b 	bl	8006604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b088      	sub	sp, #32
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	60bb      	str	r3, [r7, #8]
   return(result);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6979      	ldr	r1, [r7, #20]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	613b      	str	r3, [r7, #16]
   return(result);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e6      	bne.n	8006ffe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fad7 	bl	80065f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007042:	bf00      	nop
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
	...

08007060 <siprintf>:
 8007060:	b40e      	push	{r1, r2, r3}
 8007062:	b500      	push	{lr}
 8007064:	b09c      	sub	sp, #112	@ 0x70
 8007066:	ab1d      	add	r3, sp, #116	@ 0x74
 8007068:	9002      	str	r0, [sp, #8]
 800706a:	9006      	str	r0, [sp, #24]
 800706c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007070:	4809      	ldr	r0, [pc, #36]	@ (8007098 <siprintf+0x38>)
 8007072:	9107      	str	r1, [sp, #28]
 8007074:	9104      	str	r1, [sp, #16]
 8007076:	4909      	ldr	r1, [pc, #36]	@ (800709c <siprintf+0x3c>)
 8007078:	f853 2b04 	ldr.w	r2, [r3], #4
 800707c:	9105      	str	r1, [sp, #20]
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	a902      	add	r1, sp, #8
 8007084:	f000 f994 	bl	80073b0 <_svfiprintf_r>
 8007088:	9b02      	ldr	r3, [sp, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	b01c      	add	sp, #112	@ 0x70
 8007090:	f85d eb04 	ldr.w	lr, [sp], #4
 8007094:	b003      	add	sp, #12
 8007096:	4770      	bx	lr
 8007098:	20000024 	.word	0x20000024
 800709c:	ffff0208 	.word	0xffff0208

080070a0 <memset>:
 80070a0:	4402      	add	r2, r0
 80070a2:	4603      	mov	r3, r0
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d100      	bne.n	80070aa <memset+0xa>
 80070a8:	4770      	bx	lr
 80070aa:	f803 1b01 	strb.w	r1, [r3], #1
 80070ae:	e7f9      	b.n	80070a4 <memset+0x4>

080070b0 <__errno>:
 80070b0:	4b01      	ldr	r3, [pc, #4]	@ (80070b8 <__errno+0x8>)
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	20000024 	.word	0x20000024

080070bc <__libc_init_array>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	4d0d      	ldr	r5, [pc, #52]	@ (80070f4 <__libc_init_array+0x38>)
 80070c0:	4c0d      	ldr	r4, [pc, #52]	@ (80070f8 <__libc_init_array+0x3c>)
 80070c2:	1b64      	subs	r4, r4, r5
 80070c4:	10a4      	asrs	r4, r4, #2
 80070c6:	2600      	movs	r6, #0
 80070c8:	42a6      	cmp	r6, r4
 80070ca:	d109      	bne.n	80070e0 <__libc_init_array+0x24>
 80070cc:	4d0b      	ldr	r5, [pc, #44]	@ (80070fc <__libc_init_array+0x40>)
 80070ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007100 <__libc_init_array+0x44>)
 80070d0:	f000 fc66 	bl	80079a0 <_init>
 80070d4:	1b64      	subs	r4, r4, r5
 80070d6:	10a4      	asrs	r4, r4, #2
 80070d8:	2600      	movs	r6, #0
 80070da:	42a6      	cmp	r6, r4
 80070dc:	d105      	bne.n	80070ea <__libc_init_array+0x2e>
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e4:	4798      	blx	r3
 80070e6:	3601      	adds	r6, #1
 80070e8:	e7ee      	b.n	80070c8 <__libc_init_array+0xc>
 80070ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ee:	4798      	blx	r3
 80070f0:	3601      	adds	r6, #1
 80070f2:	e7f2      	b.n	80070da <__libc_init_array+0x1e>
 80070f4:	08007a40 	.word	0x08007a40
 80070f8:	08007a40 	.word	0x08007a40
 80070fc:	08007a40 	.word	0x08007a40
 8007100:	08007a44 	.word	0x08007a44

08007104 <__retarget_lock_acquire_recursive>:
 8007104:	4770      	bx	lr

08007106 <__retarget_lock_release_recursive>:
 8007106:	4770      	bx	lr

08007108 <_free_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4605      	mov	r5, r0
 800710c:	2900      	cmp	r1, #0
 800710e:	d041      	beq.n	8007194 <_free_r+0x8c>
 8007110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007114:	1f0c      	subs	r4, r1, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	bfb8      	it	lt
 800711a:	18e4      	addlt	r4, r4, r3
 800711c:	f000 f8e0 	bl	80072e0 <__malloc_lock>
 8007120:	4a1d      	ldr	r2, [pc, #116]	@ (8007198 <_free_r+0x90>)
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	b933      	cbnz	r3, 8007134 <_free_r+0x2c>
 8007126:	6063      	str	r3, [r4, #4]
 8007128:	6014      	str	r4, [r2, #0]
 800712a:	4628      	mov	r0, r5
 800712c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007130:	f000 b8dc 	b.w	80072ec <__malloc_unlock>
 8007134:	42a3      	cmp	r3, r4
 8007136:	d908      	bls.n	800714a <_free_r+0x42>
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	1821      	adds	r1, r4, r0
 800713c:	428b      	cmp	r3, r1
 800713e:	bf01      	itttt	eq
 8007140:	6819      	ldreq	r1, [r3, #0]
 8007142:	685b      	ldreq	r3, [r3, #4]
 8007144:	1809      	addeq	r1, r1, r0
 8007146:	6021      	streq	r1, [r4, #0]
 8007148:	e7ed      	b.n	8007126 <_free_r+0x1e>
 800714a:	461a      	mov	r2, r3
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	b10b      	cbz	r3, 8007154 <_free_r+0x4c>
 8007150:	42a3      	cmp	r3, r4
 8007152:	d9fa      	bls.n	800714a <_free_r+0x42>
 8007154:	6811      	ldr	r1, [r2, #0]
 8007156:	1850      	adds	r0, r2, r1
 8007158:	42a0      	cmp	r0, r4
 800715a:	d10b      	bne.n	8007174 <_free_r+0x6c>
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	4401      	add	r1, r0
 8007160:	1850      	adds	r0, r2, r1
 8007162:	4283      	cmp	r3, r0
 8007164:	6011      	str	r1, [r2, #0]
 8007166:	d1e0      	bne.n	800712a <_free_r+0x22>
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	6053      	str	r3, [r2, #4]
 800716e:	4408      	add	r0, r1
 8007170:	6010      	str	r0, [r2, #0]
 8007172:	e7da      	b.n	800712a <_free_r+0x22>
 8007174:	d902      	bls.n	800717c <_free_r+0x74>
 8007176:	230c      	movs	r3, #12
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	e7d6      	b.n	800712a <_free_r+0x22>
 800717c:	6820      	ldr	r0, [r4, #0]
 800717e:	1821      	adds	r1, r4, r0
 8007180:	428b      	cmp	r3, r1
 8007182:	bf04      	itt	eq
 8007184:	6819      	ldreq	r1, [r3, #0]
 8007186:	685b      	ldreq	r3, [r3, #4]
 8007188:	6063      	str	r3, [r4, #4]
 800718a:	bf04      	itt	eq
 800718c:	1809      	addeq	r1, r1, r0
 800718e:	6021      	streq	r1, [r4, #0]
 8007190:	6054      	str	r4, [r2, #4]
 8007192:	e7ca      	b.n	800712a <_free_r+0x22>
 8007194:	bd38      	pop	{r3, r4, r5, pc}
 8007196:	bf00      	nop
 8007198:	20000388 	.word	0x20000388

0800719c <sbrk_aligned>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4e0f      	ldr	r6, [pc, #60]	@ (80071dc <sbrk_aligned+0x40>)
 80071a0:	460c      	mov	r4, r1
 80071a2:	6831      	ldr	r1, [r6, #0]
 80071a4:	4605      	mov	r5, r0
 80071a6:	b911      	cbnz	r1, 80071ae <sbrk_aligned+0x12>
 80071a8:	f000 fba6 	bl	80078f8 <_sbrk_r>
 80071ac:	6030      	str	r0, [r6, #0]
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 fba1 	bl	80078f8 <_sbrk_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d103      	bne.n	80071c2 <sbrk_aligned+0x26>
 80071ba:	f04f 34ff 	mov.w	r4, #4294967295
 80071be:	4620      	mov	r0, r4
 80071c0:	bd70      	pop	{r4, r5, r6, pc}
 80071c2:	1cc4      	adds	r4, r0, #3
 80071c4:	f024 0403 	bic.w	r4, r4, #3
 80071c8:	42a0      	cmp	r0, r4
 80071ca:	d0f8      	beq.n	80071be <sbrk_aligned+0x22>
 80071cc:	1a21      	subs	r1, r4, r0
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 fb92 	bl	80078f8 <_sbrk_r>
 80071d4:	3001      	adds	r0, #1
 80071d6:	d1f2      	bne.n	80071be <sbrk_aligned+0x22>
 80071d8:	e7ef      	b.n	80071ba <sbrk_aligned+0x1e>
 80071da:	bf00      	nop
 80071dc:	20000384 	.word	0x20000384

080071e0 <_malloc_r>:
 80071e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e4:	1ccd      	adds	r5, r1, #3
 80071e6:	f025 0503 	bic.w	r5, r5, #3
 80071ea:	3508      	adds	r5, #8
 80071ec:	2d0c      	cmp	r5, #12
 80071ee:	bf38      	it	cc
 80071f0:	250c      	movcc	r5, #12
 80071f2:	2d00      	cmp	r5, #0
 80071f4:	4606      	mov	r6, r0
 80071f6:	db01      	blt.n	80071fc <_malloc_r+0x1c>
 80071f8:	42a9      	cmp	r1, r5
 80071fa:	d904      	bls.n	8007206 <_malloc_r+0x26>
 80071fc:	230c      	movs	r3, #12
 80071fe:	6033      	str	r3, [r6, #0]
 8007200:	2000      	movs	r0, #0
 8007202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007206:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072dc <_malloc_r+0xfc>
 800720a:	f000 f869 	bl	80072e0 <__malloc_lock>
 800720e:	f8d8 3000 	ldr.w	r3, [r8]
 8007212:	461c      	mov	r4, r3
 8007214:	bb44      	cbnz	r4, 8007268 <_malloc_r+0x88>
 8007216:	4629      	mov	r1, r5
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff ffbf 	bl	800719c <sbrk_aligned>
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	4604      	mov	r4, r0
 8007222:	d158      	bne.n	80072d6 <_malloc_r+0xf6>
 8007224:	f8d8 4000 	ldr.w	r4, [r8]
 8007228:	4627      	mov	r7, r4
 800722a:	2f00      	cmp	r7, #0
 800722c:	d143      	bne.n	80072b6 <_malloc_r+0xd6>
 800722e:	2c00      	cmp	r4, #0
 8007230:	d04b      	beq.n	80072ca <_malloc_r+0xea>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	4639      	mov	r1, r7
 8007236:	4630      	mov	r0, r6
 8007238:	eb04 0903 	add.w	r9, r4, r3
 800723c:	f000 fb5c 	bl	80078f8 <_sbrk_r>
 8007240:	4581      	cmp	r9, r0
 8007242:	d142      	bne.n	80072ca <_malloc_r+0xea>
 8007244:	6821      	ldr	r1, [r4, #0]
 8007246:	1a6d      	subs	r5, r5, r1
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ffa6 	bl	800719c <sbrk_aligned>
 8007250:	3001      	adds	r0, #1
 8007252:	d03a      	beq.n	80072ca <_malloc_r+0xea>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	442b      	add	r3, r5
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	f8d8 3000 	ldr.w	r3, [r8]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	bb62      	cbnz	r2, 80072bc <_malloc_r+0xdc>
 8007262:	f8c8 7000 	str.w	r7, [r8]
 8007266:	e00f      	b.n	8007288 <_malloc_r+0xa8>
 8007268:	6822      	ldr	r2, [r4, #0]
 800726a:	1b52      	subs	r2, r2, r5
 800726c:	d420      	bmi.n	80072b0 <_malloc_r+0xd0>
 800726e:	2a0b      	cmp	r2, #11
 8007270:	d917      	bls.n	80072a2 <_malloc_r+0xc2>
 8007272:	1961      	adds	r1, r4, r5
 8007274:	42a3      	cmp	r3, r4
 8007276:	6025      	str	r5, [r4, #0]
 8007278:	bf18      	it	ne
 800727a:	6059      	strne	r1, [r3, #4]
 800727c:	6863      	ldr	r3, [r4, #4]
 800727e:	bf08      	it	eq
 8007280:	f8c8 1000 	streq.w	r1, [r8]
 8007284:	5162      	str	r2, [r4, r5]
 8007286:	604b      	str	r3, [r1, #4]
 8007288:	4630      	mov	r0, r6
 800728a:	f000 f82f 	bl	80072ec <__malloc_unlock>
 800728e:	f104 000b 	add.w	r0, r4, #11
 8007292:	1d23      	adds	r3, r4, #4
 8007294:	f020 0007 	bic.w	r0, r0, #7
 8007298:	1ac2      	subs	r2, r0, r3
 800729a:	bf1c      	itt	ne
 800729c:	1a1b      	subne	r3, r3, r0
 800729e:	50a3      	strne	r3, [r4, r2]
 80072a0:	e7af      	b.n	8007202 <_malloc_r+0x22>
 80072a2:	6862      	ldr	r2, [r4, #4]
 80072a4:	42a3      	cmp	r3, r4
 80072a6:	bf0c      	ite	eq
 80072a8:	f8c8 2000 	streq.w	r2, [r8]
 80072ac:	605a      	strne	r2, [r3, #4]
 80072ae:	e7eb      	b.n	8007288 <_malloc_r+0xa8>
 80072b0:	4623      	mov	r3, r4
 80072b2:	6864      	ldr	r4, [r4, #4]
 80072b4:	e7ae      	b.n	8007214 <_malloc_r+0x34>
 80072b6:	463c      	mov	r4, r7
 80072b8:	687f      	ldr	r7, [r7, #4]
 80072ba:	e7b6      	b.n	800722a <_malloc_r+0x4a>
 80072bc:	461a      	mov	r2, r3
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d1fb      	bne.n	80072bc <_malloc_r+0xdc>
 80072c4:	2300      	movs	r3, #0
 80072c6:	6053      	str	r3, [r2, #4]
 80072c8:	e7de      	b.n	8007288 <_malloc_r+0xa8>
 80072ca:	230c      	movs	r3, #12
 80072cc:	6033      	str	r3, [r6, #0]
 80072ce:	4630      	mov	r0, r6
 80072d0:	f000 f80c 	bl	80072ec <__malloc_unlock>
 80072d4:	e794      	b.n	8007200 <_malloc_r+0x20>
 80072d6:	6005      	str	r5, [r0, #0]
 80072d8:	e7d6      	b.n	8007288 <_malloc_r+0xa8>
 80072da:	bf00      	nop
 80072dc:	20000388 	.word	0x20000388

080072e0 <__malloc_lock>:
 80072e0:	4801      	ldr	r0, [pc, #4]	@ (80072e8 <__malloc_lock+0x8>)
 80072e2:	f7ff bf0f 	b.w	8007104 <__retarget_lock_acquire_recursive>
 80072e6:	bf00      	nop
 80072e8:	20000380 	.word	0x20000380

080072ec <__malloc_unlock>:
 80072ec:	4801      	ldr	r0, [pc, #4]	@ (80072f4 <__malloc_unlock+0x8>)
 80072ee:	f7ff bf0a 	b.w	8007106 <__retarget_lock_release_recursive>
 80072f2:	bf00      	nop
 80072f4:	20000380 	.word	0x20000380

080072f8 <__ssputs_r>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	688e      	ldr	r6, [r1, #8]
 80072fe:	461f      	mov	r7, r3
 8007300:	42be      	cmp	r6, r7
 8007302:	680b      	ldr	r3, [r1, #0]
 8007304:	4682      	mov	sl, r0
 8007306:	460c      	mov	r4, r1
 8007308:	4690      	mov	r8, r2
 800730a:	d82d      	bhi.n	8007368 <__ssputs_r+0x70>
 800730c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007310:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007314:	d026      	beq.n	8007364 <__ssputs_r+0x6c>
 8007316:	6965      	ldr	r5, [r4, #20]
 8007318:	6909      	ldr	r1, [r1, #16]
 800731a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800731e:	eba3 0901 	sub.w	r9, r3, r1
 8007322:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007326:	1c7b      	adds	r3, r7, #1
 8007328:	444b      	add	r3, r9
 800732a:	106d      	asrs	r5, r5, #1
 800732c:	429d      	cmp	r5, r3
 800732e:	bf38      	it	cc
 8007330:	461d      	movcc	r5, r3
 8007332:	0553      	lsls	r3, r2, #21
 8007334:	d527      	bpl.n	8007386 <__ssputs_r+0x8e>
 8007336:	4629      	mov	r1, r5
 8007338:	f7ff ff52 	bl	80071e0 <_malloc_r>
 800733c:	4606      	mov	r6, r0
 800733e:	b360      	cbz	r0, 800739a <__ssputs_r+0xa2>
 8007340:	6921      	ldr	r1, [r4, #16]
 8007342:	464a      	mov	r2, r9
 8007344:	f000 fae8 	bl	8007918 <memcpy>
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800734e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	6126      	str	r6, [r4, #16]
 8007356:	6165      	str	r5, [r4, #20]
 8007358:	444e      	add	r6, r9
 800735a:	eba5 0509 	sub.w	r5, r5, r9
 800735e:	6026      	str	r6, [r4, #0]
 8007360:	60a5      	str	r5, [r4, #8]
 8007362:	463e      	mov	r6, r7
 8007364:	42be      	cmp	r6, r7
 8007366:	d900      	bls.n	800736a <__ssputs_r+0x72>
 8007368:	463e      	mov	r6, r7
 800736a:	6820      	ldr	r0, [r4, #0]
 800736c:	4632      	mov	r2, r6
 800736e:	4641      	mov	r1, r8
 8007370:	f000 faa8 	bl	80078c4 <memmove>
 8007374:	68a3      	ldr	r3, [r4, #8]
 8007376:	1b9b      	subs	r3, r3, r6
 8007378:	60a3      	str	r3, [r4, #8]
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	4433      	add	r3, r6
 800737e:	6023      	str	r3, [r4, #0]
 8007380:	2000      	movs	r0, #0
 8007382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007386:	462a      	mov	r2, r5
 8007388:	f000 fad4 	bl	8007934 <_realloc_r>
 800738c:	4606      	mov	r6, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	d1e0      	bne.n	8007354 <__ssputs_r+0x5c>
 8007392:	6921      	ldr	r1, [r4, #16]
 8007394:	4650      	mov	r0, sl
 8007396:	f7ff feb7 	bl	8007108 <_free_r>
 800739a:	230c      	movs	r3, #12
 800739c:	f8ca 3000 	str.w	r3, [sl]
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	e7e9      	b.n	8007382 <__ssputs_r+0x8a>
	...

080073b0 <_svfiprintf_r>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	4698      	mov	r8, r3
 80073b6:	898b      	ldrh	r3, [r1, #12]
 80073b8:	061b      	lsls	r3, r3, #24
 80073ba:	b09d      	sub	sp, #116	@ 0x74
 80073bc:	4607      	mov	r7, r0
 80073be:	460d      	mov	r5, r1
 80073c0:	4614      	mov	r4, r2
 80073c2:	d510      	bpl.n	80073e6 <_svfiprintf_r+0x36>
 80073c4:	690b      	ldr	r3, [r1, #16]
 80073c6:	b973      	cbnz	r3, 80073e6 <_svfiprintf_r+0x36>
 80073c8:	2140      	movs	r1, #64	@ 0x40
 80073ca:	f7ff ff09 	bl	80071e0 <_malloc_r>
 80073ce:	6028      	str	r0, [r5, #0]
 80073d0:	6128      	str	r0, [r5, #16]
 80073d2:	b930      	cbnz	r0, 80073e2 <_svfiprintf_r+0x32>
 80073d4:	230c      	movs	r3, #12
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	b01d      	add	sp, #116	@ 0x74
 80073de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e2:	2340      	movs	r3, #64	@ 0x40
 80073e4:	616b      	str	r3, [r5, #20]
 80073e6:	2300      	movs	r3, #0
 80073e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ea:	2320      	movs	r3, #32
 80073ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073f4:	2330      	movs	r3, #48	@ 0x30
 80073f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007594 <_svfiprintf_r+0x1e4>
 80073fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073fe:	f04f 0901 	mov.w	r9, #1
 8007402:	4623      	mov	r3, r4
 8007404:	469a      	mov	sl, r3
 8007406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800740a:	b10a      	cbz	r2, 8007410 <_svfiprintf_r+0x60>
 800740c:	2a25      	cmp	r2, #37	@ 0x25
 800740e:	d1f9      	bne.n	8007404 <_svfiprintf_r+0x54>
 8007410:	ebba 0b04 	subs.w	fp, sl, r4
 8007414:	d00b      	beq.n	800742e <_svfiprintf_r+0x7e>
 8007416:	465b      	mov	r3, fp
 8007418:	4622      	mov	r2, r4
 800741a:	4629      	mov	r1, r5
 800741c:	4638      	mov	r0, r7
 800741e:	f7ff ff6b 	bl	80072f8 <__ssputs_r>
 8007422:	3001      	adds	r0, #1
 8007424:	f000 80a7 	beq.w	8007576 <_svfiprintf_r+0x1c6>
 8007428:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800742a:	445a      	add	r2, fp
 800742c:	9209      	str	r2, [sp, #36]	@ 0x24
 800742e:	f89a 3000 	ldrb.w	r3, [sl]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 809f 	beq.w	8007576 <_svfiprintf_r+0x1c6>
 8007438:	2300      	movs	r3, #0
 800743a:	f04f 32ff 	mov.w	r2, #4294967295
 800743e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007442:	f10a 0a01 	add.w	sl, sl, #1
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	9307      	str	r3, [sp, #28]
 800744a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800744e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007450:	4654      	mov	r4, sl
 8007452:	2205      	movs	r2, #5
 8007454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007458:	484e      	ldr	r0, [pc, #312]	@ (8007594 <_svfiprintf_r+0x1e4>)
 800745a:	f7f8 feb9 	bl	80001d0 <memchr>
 800745e:	9a04      	ldr	r2, [sp, #16]
 8007460:	b9d8      	cbnz	r0, 800749a <_svfiprintf_r+0xea>
 8007462:	06d0      	lsls	r0, r2, #27
 8007464:	bf44      	itt	mi
 8007466:	2320      	movmi	r3, #32
 8007468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800746c:	0711      	lsls	r1, r2, #28
 800746e:	bf44      	itt	mi
 8007470:	232b      	movmi	r3, #43	@ 0x2b
 8007472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007476:	f89a 3000 	ldrb.w	r3, [sl]
 800747a:	2b2a      	cmp	r3, #42	@ 0x2a
 800747c:	d015      	beq.n	80074aa <_svfiprintf_r+0xfa>
 800747e:	9a07      	ldr	r2, [sp, #28]
 8007480:	4654      	mov	r4, sl
 8007482:	2000      	movs	r0, #0
 8007484:	f04f 0c0a 	mov.w	ip, #10
 8007488:	4621      	mov	r1, r4
 800748a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800748e:	3b30      	subs	r3, #48	@ 0x30
 8007490:	2b09      	cmp	r3, #9
 8007492:	d94b      	bls.n	800752c <_svfiprintf_r+0x17c>
 8007494:	b1b0      	cbz	r0, 80074c4 <_svfiprintf_r+0x114>
 8007496:	9207      	str	r2, [sp, #28]
 8007498:	e014      	b.n	80074c4 <_svfiprintf_r+0x114>
 800749a:	eba0 0308 	sub.w	r3, r0, r8
 800749e:	fa09 f303 	lsl.w	r3, r9, r3
 80074a2:	4313      	orrs	r3, r2
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	46a2      	mov	sl, r4
 80074a8:	e7d2      	b.n	8007450 <_svfiprintf_r+0xa0>
 80074aa:	9b03      	ldr	r3, [sp, #12]
 80074ac:	1d19      	adds	r1, r3, #4
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	9103      	str	r1, [sp, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bfbb      	ittet	lt
 80074b6:	425b      	neglt	r3, r3
 80074b8:	f042 0202 	orrlt.w	r2, r2, #2
 80074bc:	9307      	strge	r3, [sp, #28]
 80074be:	9307      	strlt	r3, [sp, #28]
 80074c0:	bfb8      	it	lt
 80074c2:	9204      	strlt	r2, [sp, #16]
 80074c4:	7823      	ldrb	r3, [r4, #0]
 80074c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80074c8:	d10a      	bne.n	80074e0 <_svfiprintf_r+0x130>
 80074ca:	7863      	ldrb	r3, [r4, #1]
 80074cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ce:	d132      	bne.n	8007536 <_svfiprintf_r+0x186>
 80074d0:	9b03      	ldr	r3, [sp, #12]
 80074d2:	1d1a      	adds	r2, r3, #4
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	9203      	str	r2, [sp, #12]
 80074d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074dc:	3402      	adds	r4, #2
 80074de:	9305      	str	r3, [sp, #20]
 80074e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075a4 <_svfiprintf_r+0x1f4>
 80074e4:	7821      	ldrb	r1, [r4, #0]
 80074e6:	2203      	movs	r2, #3
 80074e8:	4650      	mov	r0, sl
 80074ea:	f7f8 fe71 	bl	80001d0 <memchr>
 80074ee:	b138      	cbz	r0, 8007500 <_svfiprintf_r+0x150>
 80074f0:	9b04      	ldr	r3, [sp, #16]
 80074f2:	eba0 000a 	sub.w	r0, r0, sl
 80074f6:	2240      	movs	r2, #64	@ 0x40
 80074f8:	4082      	lsls	r2, r0
 80074fa:	4313      	orrs	r3, r2
 80074fc:	3401      	adds	r4, #1
 80074fe:	9304      	str	r3, [sp, #16]
 8007500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007504:	4824      	ldr	r0, [pc, #144]	@ (8007598 <_svfiprintf_r+0x1e8>)
 8007506:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800750a:	2206      	movs	r2, #6
 800750c:	f7f8 fe60 	bl	80001d0 <memchr>
 8007510:	2800      	cmp	r0, #0
 8007512:	d036      	beq.n	8007582 <_svfiprintf_r+0x1d2>
 8007514:	4b21      	ldr	r3, [pc, #132]	@ (800759c <_svfiprintf_r+0x1ec>)
 8007516:	bb1b      	cbnz	r3, 8007560 <_svfiprintf_r+0x1b0>
 8007518:	9b03      	ldr	r3, [sp, #12]
 800751a:	3307      	adds	r3, #7
 800751c:	f023 0307 	bic.w	r3, r3, #7
 8007520:	3308      	adds	r3, #8
 8007522:	9303      	str	r3, [sp, #12]
 8007524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007526:	4433      	add	r3, r6
 8007528:	9309      	str	r3, [sp, #36]	@ 0x24
 800752a:	e76a      	b.n	8007402 <_svfiprintf_r+0x52>
 800752c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007530:	460c      	mov	r4, r1
 8007532:	2001      	movs	r0, #1
 8007534:	e7a8      	b.n	8007488 <_svfiprintf_r+0xd8>
 8007536:	2300      	movs	r3, #0
 8007538:	3401      	adds	r4, #1
 800753a:	9305      	str	r3, [sp, #20]
 800753c:	4619      	mov	r1, r3
 800753e:	f04f 0c0a 	mov.w	ip, #10
 8007542:	4620      	mov	r0, r4
 8007544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007548:	3a30      	subs	r2, #48	@ 0x30
 800754a:	2a09      	cmp	r2, #9
 800754c:	d903      	bls.n	8007556 <_svfiprintf_r+0x1a6>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0c6      	beq.n	80074e0 <_svfiprintf_r+0x130>
 8007552:	9105      	str	r1, [sp, #20]
 8007554:	e7c4      	b.n	80074e0 <_svfiprintf_r+0x130>
 8007556:	fb0c 2101 	mla	r1, ip, r1, r2
 800755a:	4604      	mov	r4, r0
 800755c:	2301      	movs	r3, #1
 800755e:	e7f0      	b.n	8007542 <_svfiprintf_r+0x192>
 8007560:	ab03      	add	r3, sp, #12
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	462a      	mov	r2, r5
 8007566:	4b0e      	ldr	r3, [pc, #56]	@ (80075a0 <_svfiprintf_r+0x1f0>)
 8007568:	a904      	add	r1, sp, #16
 800756a:	4638      	mov	r0, r7
 800756c:	f3af 8000 	nop.w
 8007570:	1c42      	adds	r2, r0, #1
 8007572:	4606      	mov	r6, r0
 8007574:	d1d6      	bne.n	8007524 <_svfiprintf_r+0x174>
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	065b      	lsls	r3, r3, #25
 800757a:	f53f af2d 	bmi.w	80073d8 <_svfiprintf_r+0x28>
 800757e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007580:	e72c      	b.n	80073dc <_svfiprintf_r+0x2c>
 8007582:	ab03      	add	r3, sp, #12
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	462a      	mov	r2, r5
 8007588:	4b05      	ldr	r3, [pc, #20]	@ (80075a0 <_svfiprintf_r+0x1f0>)
 800758a:	a904      	add	r1, sp, #16
 800758c:	4638      	mov	r0, r7
 800758e:	f000 f879 	bl	8007684 <_printf_i>
 8007592:	e7ed      	b.n	8007570 <_svfiprintf_r+0x1c0>
 8007594:	08007a04 	.word	0x08007a04
 8007598:	08007a0e 	.word	0x08007a0e
 800759c:	00000000 	.word	0x00000000
 80075a0:	080072f9 	.word	0x080072f9
 80075a4:	08007a0a 	.word	0x08007a0a

080075a8 <_printf_common>:
 80075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	4616      	mov	r6, r2
 80075ae:	4698      	mov	r8, r3
 80075b0:	688a      	ldr	r2, [r1, #8]
 80075b2:	690b      	ldr	r3, [r1, #16]
 80075b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	bfb8      	it	lt
 80075bc:	4613      	movlt	r3, r2
 80075be:	6033      	str	r3, [r6, #0]
 80075c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075c4:	4607      	mov	r7, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	b10a      	cbz	r2, 80075ce <_printf_common+0x26>
 80075ca:	3301      	adds	r3, #1
 80075cc:	6033      	str	r3, [r6, #0]
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	0699      	lsls	r1, r3, #26
 80075d2:	bf42      	ittt	mi
 80075d4:	6833      	ldrmi	r3, [r6, #0]
 80075d6:	3302      	addmi	r3, #2
 80075d8:	6033      	strmi	r3, [r6, #0]
 80075da:	6825      	ldr	r5, [r4, #0]
 80075dc:	f015 0506 	ands.w	r5, r5, #6
 80075e0:	d106      	bne.n	80075f0 <_printf_common+0x48>
 80075e2:	f104 0a19 	add.w	sl, r4, #25
 80075e6:	68e3      	ldr	r3, [r4, #12]
 80075e8:	6832      	ldr	r2, [r6, #0]
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	42ab      	cmp	r3, r5
 80075ee:	dc26      	bgt.n	800763e <_printf_common+0x96>
 80075f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	3b00      	subs	r3, #0
 80075f8:	bf18      	it	ne
 80075fa:	2301      	movne	r3, #1
 80075fc:	0692      	lsls	r2, r2, #26
 80075fe:	d42b      	bmi.n	8007658 <_printf_common+0xb0>
 8007600:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007604:	4641      	mov	r1, r8
 8007606:	4638      	mov	r0, r7
 8007608:	47c8      	blx	r9
 800760a:	3001      	adds	r0, #1
 800760c:	d01e      	beq.n	800764c <_printf_common+0xa4>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	6922      	ldr	r2, [r4, #16]
 8007612:	f003 0306 	and.w	r3, r3, #6
 8007616:	2b04      	cmp	r3, #4
 8007618:	bf02      	ittt	eq
 800761a:	68e5      	ldreq	r5, [r4, #12]
 800761c:	6833      	ldreq	r3, [r6, #0]
 800761e:	1aed      	subeq	r5, r5, r3
 8007620:	68a3      	ldr	r3, [r4, #8]
 8007622:	bf0c      	ite	eq
 8007624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007628:	2500      	movne	r5, #0
 800762a:	4293      	cmp	r3, r2
 800762c:	bfc4      	itt	gt
 800762e:	1a9b      	subgt	r3, r3, r2
 8007630:	18ed      	addgt	r5, r5, r3
 8007632:	2600      	movs	r6, #0
 8007634:	341a      	adds	r4, #26
 8007636:	42b5      	cmp	r5, r6
 8007638:	d11a      	bne.n	8007670 <_printf_common+0xc8>
 800763a:	2000      	movs	r0, #0
 800763c:	e008      	b.n	8007650 <_printf_common+0xa8>
 800763e:	2301      	movs	r3, #1
 8007640:	4652      	mov	r2, sl
 8007642:	4641      	mov	r1, r8
 8007644:	4638      	mov	r0, r7
 8007646:	47c8      	blx	r9
 8007648:	3001      	adds	r0, #1
 800764a:	d103      	bne.n	8007654 <_printf_common+0xac>
 800764c:	f04f 30ff 	mov.w	r0, #4294967295
 8007650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007654:	3501      	adds	r5, #1
 8007656:	e7c6      	b.n	80075e6 <_printf_common+0x3e>
 8007658:	18e1      	adds	r1, r4, r3
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	2030      	movs	r0, #48	@ 0x30
 800765e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007662:	4422      	add	r2, r4
 8007664:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007668:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800766c:	3302      	adds	r3, #2
 800766e:	e7c7      	b.n	8007600 <_printf_common+0x58>
 8007670:	2301      	movs	r3, #1
 8007672:	4622      	mov	r2, r4
 8007674:	4641      	mov	r1, r8
 8007676:	4638      	mov	r0, r7
 8007678:	47c8      	blx	r9
 800767a:	3001      	adds	r0, #1
 800767c:	d0e6      	beq.n	800764c <_printf_common+0xa4>
 800767e:	3601      	adds	r6, #1
 8007680:	e7d9      	b.n	8007636 <_printf_common+0x8e>
	...

08007684 <_printf_i>:
 8007684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	7e0f      	ldrb	r7, [r1, #24]
 800768a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800768c:	2f78      	cmp	r7, #120	@ 0x78
 800768e:	4691      	mov	r9, r2
 8007690:	4680      	mov	r8, r0
 8007692:	460c      	mov	r4, r1
 8007694:	469a      	mov	sl, r3
 8007696:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800769a:	d807      	bhi.n	80076ac <_printf_i+0x28>
 800769c:	2f62      	cmp	r7, #98	@ 0x62
 800769e:	d80a      	bhi.n	80076b6 <_printf_i+0x32>
 80076a0:	2f00      	cmp	r7, #0
 80076a2:	f000 80d2 	beq.w	800784a <_printf_i+0x1c6>
 80076a6:	2f58      	cmp	r7, #88	@ 0x58
 80076a8:	f000 80b9 	beq.w	800781e <_printf_i+0x19a>
 80076ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076b4:	e03a      	b.n	800772c <_printf_i+0xa8>
 80076b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076ba:	2b15      	cmp	r3, #21
 80076bc:	d8f6      	bhi.n	80076ac <_printf_i+0x28>
 80076be:	a101      	add	r1, pc, #4	@ (adr r1, 80076c4 <_printf_i+0x40>)
 80076c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076c4:	0800771d 	.word	0x0800771d
 80076c8:	08007731 	.word	0x08007731
 80076cc:	080076ad 	.word	0x080076ad
 80076d0:	080076ad 	.word	0x080076ad
 80076d4:	080076ad 	.word	0x080076ad
 80076d8:	080076ad 	.word	0x080076ad
 80076dc:	08007731 	.word	0x08007731
 80076e0:	080076ad 	.word	0x080076ad
 80076e4:	080076ad 	.word	0x080076ad
 80076e8:	080076ad 	.word	0x080076ad
 80076ec:	080076ad 	.word	0x080076ad
 80076f0:	08007831 	.word	0x08007831
 80076f4:	0800775b 	.word	0x0800775b
 80076f8:	080077eb 	.word	0x080077eb
 80076fc:	080076ad 	.word	0x080076ad
 8007700:	080076ad 	.word	0x080076ad
 8007704:	08007853 	.word	0x08007853
 8007708:	080076ad 	.word	0x080076ad
 800770c:	0800775b 	.word	0x0800775b
 8007710:	080076ad 	.word	0x080076ad
 8007714:	080076ad 	.word	0x080076ad
 8007718:	080077f3 	.word	0x080077f3
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6032      	str	r2, [r6, #0]
 8007724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007728:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800772c:	2301      	movs	r3, #1
 800772e:	e09d      	b.n	800786c <_printf_i+0x1e8>
 8007730:	6833      	ldr	r3, [r6, #0]
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	1d19      	adds	r1, r3, #4
 8007736:	6031      	str	r1, [r6, #0]
 8007738:	0606      	lsls	r6, r0, #24
 800773a:	d501      	bpl.n	8007740 <_printf_i+0xbc>
 800773c:	681d      	ldr	r5, [r3, #0]
 800773e:	e003      	b.n	8007748 <_printf_i+0xc4>
 8007740:	0645      	lsls	r5, r0, #25
 8007742:	d5fb      	bpl.n	800773c <_printf_i+0xb8>
 8007744:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007748:	2d00      	cmp	r5, #0
 800774a:	da03      	bge.n	8007754 <_printf_i+0xd0>
 800774c:	232d      	movs	r3, #45	@ 0x2d
 800774e:	426d      	negs	r5, r5
 8007750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007754:	4859      	ldr	r0, [pc, #356]	@ (80078bc <_printf_i+0x238>)
 8007756:	230a      	movs	r3, #10
 8007758:	e011      	b.n	800777e <_printf_i+0xfa>
 800775a:	6821      	ldr	r1, [r4, #0]
 800775c:	6833      	ldr	r3, [r6, #0]
 800775e:	0608      	lsls	r0, r1, #24
 8007760:	f853 5b04 	ldr.w	r5, [r3], #4
 8007764:	d402      	bmi.n	800776c <_printf_i+0xe8>
 8007766:	0649      	lsls	r1, r1, #25
 8007768:	bf48      	it	mi
 800776a:	b2ad      	uxthmi	r5, r5
 800776c:	2f6f      	cmp	r7, #111	@ 0x6f
 800776e:	4853      	ldr	r0, [pc, #332]	@ (80078bc <_printf_i+0x238>)
 8007770:	6033      	str	r3, [r6, #0]
 8007772:	bf14      	ite	ne
 8007774:	230a      	movne	r3, #10
 8007776:	2308      	moveq	r3, #8
 8007778:	2100      	movs	r1, #0
 800777a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800777e:	6866      	ldr	r6, [r4, #4]
 8007780:	60a6      	str	r6, [r4, #8]
 8007782:	2e00      	cmp	r6, #0
 8007784:	bfa2      	ittt	ge
 8007786:	6821      	ldrge	r1, [r4, #0]
 8007788:	f021 0104 	bicge.w	r1, r1, #4
 800778c:	6021      	strge	r1, [r4, #0]
 800778e:	b90d      	cbnz	r5, 8007794 <_printf_i+0x110>
 8007790:	2e00      	cmp	r6, #0
 8007792:	d04b      	beq.n	800782c <_printf_i+0x1a8>
 8007794:	4616      	mov	r6, r2
 8007796:	fbb5 f1f3 	udiv	r1, r5, r3
 800779a:	fb03 5711 	mls	r7, r3, r1, r5
 800779e:	5dc7      	ldrb	r7, [r0, r7]
 80077a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077a4:	462f      	mov	r7, r5
 80077a6:	42bb      	cmp	r3, r7
 80077a8:	460d      	mov	r5, r1
 80077aa:	d9f4      	bls.n	8007796 <_printf_i+0x112>
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d10b      	bne.n	80077c8 <_printf_i+0x144>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	07df      	lsls	r7, r3, #31
 80077b4:	d508      	bpl.n	80077c8 <_printf_i+0x144>
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	6861      	ldr	r1, [r4, #4]
 80077ba:	4299      	cmp	r1, r3
 80077bc:	bfde      	ittt	le
 80077be:	2330      	movle	r3, #48	@ 0x30
 80077c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077c8:	1b92      	subs	r2, r2, r6
 80077ca:	6122      	str	r2, [r4, #16]
 80077cc:	f8cd a000 	str.w	sl, [sp]
 80077d0:	464b      	mov	r3, r9
 80077d2:	aa03      	add	r2, sp, #12
 80077d4:	4621      	mov	r1, r4
 80077d6:	4640      	mov	r0, r8
 80077d8:	f7ff fee6 	bl	80075a8 <_printf_common>
 80077dc:	3001      	adds	r0, #1
 80077de:	d14a      	bne.n	8007876 <_printf_i+0x1f2>
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295
 80077e4:	b004      	add	sp, #16
 80077e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	f043 0320 	orr.w	r3, r3, #32
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	4833      	ldr	r0, [pc, #204]	@ (80078c0 <_printf_i+0x23c>)
 80077f4:	2778      	movs	r7, #120	@ 0x78
 80077f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	6831      	ldr	r1, [r6, #0]
 80077fe:	061f      	lsls	r7, r3, #24
 8007800:	f851 5b04 	ldr.w	r5, [r1], #4
 8007804:	d402      	bmi.n	800780c <_printf_i+0x188>
 8007806:	065f      	lsls	r7, r3, #25
 8007808:	bf48      	it	mi
 800780a:	b2ad      	uxthmi	r5, r5
 800780c:	6031      	str	r1, [r6, #0]
 800780e:	07d9      	lsls	r1, r3, #31
 8007810:	bf44      	itt	mi
 8007812:	f043 0320 	orrmi.w	r3, r3, #32
 8007816:	6023      	strmi	r3, [r4, #0]
 8007818:	b11d      	cbz	r5, 8007822 <_printf_i+0x19e>
 800781a:	2310      	movs	r3, #16
 800781c:	e7ac      	b.n	8007778 <_printf_i+0xf4>
 800781e:	4827      	ldr	r0, [pc, #156]	@ (80078bc <_printf_i+0x238>)
 8007820:	e7e9      	b.n	80077f6 <_printf_i+0x172>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	f023 0320 	bic.w	r3, r3, #32
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	e7f6      	b.n	800781a <_printf_i+0x196>
 800782c:	4616      	mov	r6, r2
 800782e:	e7bd      	b.n	80077ac <_printf_i+0x128>
 8007830:	6833      	ldr	r3, [r6, #0]
 8007832:	6825      	ldr	r5, [r4, #0]
 8007834:	6961      	ldr	r1, [r4, #20]
 8007836:	1d18      	adds	r0, r3, #4
 8007838:	6030      	str	r0, [r6, #0]
 800783a:	062e      	lsls	r6, r5, #24
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	d501      	bpl.n	8007844 <_printf_i+0x1c0>
 8007840:	6019      	str	r1, [r3, #0]
 8007842:	e002      	b.n	800784a <_printf_i+0x1c6>
 8007844:	0668      	lsls	r0, r5, #25
 8007846:	d5fb      	bpl.n	8007840 <_printf_i+0x1bc>
 8007848:	8019      	strh	r1, [r3, #0]
 800784a:	2300      	movs	r3, #0
 800784c:	6123      	str	r3, [r4, #16]
 800784e:	4616      	mov	r6, r2
 8007850:	e7bc      	b.n	80077cc <_printf_i+0x148>
 8007852:	6833      	ldr	r3, [r6, #0]
 8007854:	1d1a      	adds	r2, r3, #4
 8007856:	6032      	str	r2, [r6, #0]
 8007858:	681e      	ldr	r6, [r3, #0]
 800785a:	6862      	ldr	r2, [r4, #4]
 800785c:	2100      	movs	r1, #0
 800785e:	4630      	mov	r0, r6
 8007860:	f7f8 fcb6 	bl	80001d0 <memchr>
 8007864:	b108      	cbz	r0, 800786a <_printf_i+0x1e6>
 8007866:	1b80      	subs	r0, r0, r6
 8007868:	6060      	str	r0, [r4, #4]
 800786a:	6863      	ldr	r3, [r4, #4]
 800786c:	6123      	str	r3, [r4, #16]
 800786e:	2300      	movs	r3, #0
 8007870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007874:	e7aa      	b.n	80077cc <_printf_i+0x148>
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	4632      	mov	r2, r6
 800787a:	4649      	mov	r1, r9
 800787c:	4640      	mov	r0, r8
 800787e:	47d0      	blx	sl
 8007880:	3001      	adds	r0, #1
 8007882:	d0ad      	beq.n	80077e0 <_printf_i+0x15c>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	079b      	lsls	r3, r3, #30
 8007888:	d413      	bmi.n	80078b2 <_printf_i+0x22e>
 800788a:	68e0      	ldr	r0, [r4, #12]
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	4298      	cmp	r0, r3
 8007890:	bfb8      	it	lt
 8007892:	4618      	movlt	r0, r3
 8007894:	e7a6      	b.n	80077e4 <_printf_i+0x160>
 8007896:	2301      	movs	r3, #1
 8007898:	4632      	mov	r2, r6
 800789a:	4649      	mov	r1, r9
 800789c:	4640      	mov	r0, r8
 800789e:	47d0      	blx	sl
 80078a0:	3001      	adds	r0, #1
 80078a2:	d09d      	beq.n	80077e0 <_printf_i+0x15c>
 80078a4:	3501      	adds	r5, #1
 80078a6:	68e3      	ldr	r3, [r4, #12]
 80078a8:	9903      	ldr	r1, [sp, #12]
 80078aa:	1a5b      	subs	r3, r3, r1
 80078ac:	42ab      	cmp	r3, r5
 80078ae:	dcf2      	bgt.n	8007896 <_printf_i+0x212>
 80078b0:	e7eb      	b.n	800788a <_printf_i+0x206>
 80078b2:	2500      	movs	r5, #0
 80078b4:	f104 0619 	add.w	r6, r4, #25
 80078b8:	e7f5      	b.n	80078a6 <_printf_i+0x222>
 80078ba:	bf00      	nop
 80078bc:	08007a15 	.word	0x08007a15
 80078c0:	08007a26 	.word	0x08007a26

080078c4 <memmove>:
 80078c4:	4288      	cmp	r0, r1
 80078c6:	b510      	push	{r4, lr}
 80078c8:	eb01 0402 	add.w	r4, r1, r2
 80078cc:	d902      	bls.n	80078d4 <memmove+0x10>
 80078ce:	4284      	cmp	r4, r0
 80078d0:	4623      	mov	r3, r4
 80078d2:	d807      	bhi.n	80078e4 <memmove+0x20>
 80078d4:	1e43      	subs	r3, r0, #1
 80078d6:	42a1      	cmp	r1, r4
 80078d8:	d008      	beq.n	80078ec <memmove+0x28>
 80078da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078e2:	e7f8      	b.n	80078d6 <memmove+0x12>
 80078e4:	4402      	add	r2, r0
 80078e6:	4601      	mov	r1, r0
 80078e8:	428a      	cmp	r2, r1
 80078ea:	d100      	bne.n	80078ee <memmove+0x2a>
 80078ec:	bd10      	pop	{r4, pc}
 80078ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078f6:	e7f7      	b.n	80078e8 <memmove+0x24>

080078f8 <_sbrk_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4d06      	ldr	r5, [pc, #24]	@ (8007914 <_sbrk_r+0x1c>)
 80078fc:	2300      	movs	r3, #0
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	f7f9 fcd8 	bl	80012b8 <_sbrk>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_sbrk_r+0x1a>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_sbrk_r+0x1a>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	2000037c 	.word	0x2000037c

08007918 <memcpy>:
 8007918:	440a      	add	r2, r1
 800791a:	4291      	cmp	r1, r2
 800791c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007920:	d100      	bne.n	8007924 <memcpy+0xc>
 8007922:	4770      	bx	lr
 8007924:	b510      	push	{r4, lr}
 8007926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800792a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800792e:	4291      	cmp	r1, r2
 8007930:	d1f9      	bne.n	8007926 <memcpy+0xe>
 8007932:	bd10      	pop	{r4, pc}

08007934 <_realloc_r>:
 8007934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007938:	4680      	mov	r8, r0
 800793a:	4615      	mov	r5, r2
 800793c:	460c      	mov	r4, r1
 800793e:	b921      	cbnz	r1, 800794a <_realloc_r+0x16>
 8007940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007944:	4611      	mov	r1, r2
 8007946:	f7ff bc4b 	b.w	80071e0 <_malloc_r>
 800794a:	b92a      	cbnz	r2, 8007958 <_realloc_r+0x24>
 800794c:	f7ff fbdc 	bl	8007108 <_free_r>
 8007950:	2400      	movs	r4, #0
 8007952:	4620      	mov	r0, r4
 8007954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007958:	f000 f81a 	bl	8007990 <_malloc_usable_size_r>
 800795c:	4285      	cmp	r5, r0
 800795e:	4606      	mov	r6, r0
 8007960:	d802      	bhi.n	8007968 <_realloc_r+0x34>
 8007962:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007966:	d8f4      	bhi.n	8007952 <_realloc_r+0x1e>
 8007968:	4629      	mov	r1, r5
 800796a:	4640      	mov	r0, r8
 800796c:	f7ff fc38 	bl	80071e0 <_malloc_r>
 8007970:	4607      	mov	r7, r0
 8007972:	2800      	cmp	r0, #0
 8007974:	d0ec      	beq.n	8007950 <_realloc_r+0x1c>
 8007976:	42b5      	cmp	r5, r6
 8007978:	462a      	mov	r2, r5
 800797a:	4621      	mov	r1, r4
 800797c:	bf28      	it	cs
 800797e:	4632      	movcs	r2, r6
 8007980:	f7ff ffca 	bl	8007918 <memcpy>
 8007984:	4621      	mov	r1, r4
 8007986:	4640      	mov	r0, r8
 8007988:	f7ff fbbe 	bl	8007108 <_free_r>
 800798c:	463c      	mov	r4, r7
 800798e:	e7e0      	b.n	8007952 <_realloc_r+0x1e>

08007990 <_malloc_usable_size_r>:
 8007990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007994:	1f18      	subs	r0, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfbc      	itt	lt
 800799a:	580b      	ldrlt	r3, [r1, r0]
 800799c:	18c0      	addlt	r0, r0, r3
 800799e:	4770      	bx	lr

080079a0 <_init>:
 80079a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a2:	bf00      	nop
 80079a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a6:	bc08      	pop	{r3}
 80079a8:	469e      	mov	lr, r3
 80079aa:	4770      	bx	lr

080079ac <_fini>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	bf00      	nop
 80079b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b2:	bc08      	pop	{r3}
 80079b4:	469e      	mov	lr, r3
 80079b6:	4770      	bx	lr
